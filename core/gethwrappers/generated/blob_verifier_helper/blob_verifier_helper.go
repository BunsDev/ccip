// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package blob_verifier_helper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type BlobVerifierInterfaceBlobVerifierConfig struct {
	OnRamps          []common.Address
	MinSeqNrByOnRamp []uint64
}

type CCIPInterval struct {
	Min uint64
	Max uint64
}

type CCIPRelayReport struct {
	OnRamps     []common.Address
	Intervals   []CCIPInterval
	MerkleRoots [][32]byte
	RootOfRoots [32]byte
}

var BlobVerifierHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAFNSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadHealthConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfiguration\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval\",\"name\":\"interval\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"InvalidRelayReport\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"UnsupportedOnRamp\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"indexed\":false,\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"BlobVerifierConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOURCE_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAFNHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rp\",\"type\":\"bytes\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootToReset\",\"type\":\"bytes32[]\"}],\"name\":\"resetUnblessedRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"innerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"innerProofFlagBits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"outerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"outerProofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b50604051620042083803806200420883398101604081905262000034916200058a565b6000805460ff19168155849084908490849060019083903390819081620000a25760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0380851661010002610100600160a81b031990921691909117909155811615620000dc57620000dc8162000266565b5050506001600160a01b0381166200010757604051630958ef9b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055151560805260a084905260c0839052805180518291600a916200015291839160209091019062000317565b5060208281015180516200016d926001850192019062000381565b5050600b54600a54149050620001965760405163c52a9bd360e01b815260040160405180910390fd5b60005b600a548110156200025757600b805482908110620001bb57620001bb620006b2565b90600052602060002090600491828204019190066008029054906101000a90046001600160401b0316600c6000600a6000018481548110620002015762000201620006b2565b6000918252602080832091909101546001600160a01b03168352820192909252604001902080546001600160401b0319166001600160401b03929092169190911790556200024f81620006c8565b905062000199565b505050505050505050620006f0565b336001600160a01b03821603620002c05760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000099565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b8280548282559060005260206000209081019282156200036f579160200282015b828111156200036f57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000338565b506200037d92915062000436565b5090565b828054828255906000526020600020906003016004900481019282156200036f5791602002820160005b83821115620003f757835183826101000a8154816001600160401b0302191690836001600160401b031602179055509260200192600801602081600701049283019260010302620003ab565b80156200042c5782816101000a8154906001600160401b030219169055600801602081600701049283019260010302620003f7565b50506200037d9291505b5b808211156200037d576000815560010162000437565b6001600160a01b03811681146200046357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715620004a157620004a162000466565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004d257620004d262000466565b604052919050565b60006001600160401b03821115620004f657620004f662000466565b5060051b60200190565b600082601f8301126200051257600080fd5b815160206200052b6200052583620004da565b620004a7565b82815260059290921b840181019181810190868411156200054b57600080fd5b8286015b848110156200057f5780516001600160401b0381168114620005715760008081fd5b83529183019183016200054f565b509695505050505050565b60008060008060808587031215620005a157600080fd5b8451935060208086015193506040860151620005bd816200044d565b60608701519093506001600160401b0380821115620005db57600080fd5b908701906040828a031215620005f057600080fd5b620005fa6200047c565b8251828111156200060a57600080fd5b8301601f81018b136200061c57600080fd5b80516200062d6200052582620004da565b81815260059190911b8201860190868101908d8311156200064d57600080fd5b928701925b828410156200067857835162000668816200044d565b8252928701929087019062000652565b845250505082840151828111156200068f57600080fd5b6200069d8b82860162000500565b85830152508094505050505092959194509250565b634e487b7160e01b600052603260045260246000fd5b600060018201620006e957634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c051613ae862000720600039600061029b0152600061032a01526000610cc70152613ae86000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80638456cb59116100ee578063b576716611610097578063e3d0e71211610071578063e3d0e71214610443578063e71e65ce14610456578063f2fde38b14610469578063f47a86901461047c57600080fd5b8063b5767166146103c2578063c1131d8e146103d5578063c3f909d41461042e57600080fd5b8063a7206cd6116100c8578063a7206cd61461036f578063afcb95d71461038f578063b1dc65a4146103af57600080fd5b80638456cb591461031d57806385e1f4d0146103255780638da5cb5b1461034c57600080fd5b80635c975abb11610150578063814118341161012a57806381411834146102c557806381ff7048146102da57806383ec5cf61461030a57600080fd5b80635c975abb1461028b57806374be21501461029657806379ba5097146102bd57600080fd5b8063181f5a7711610181578063181f5a77146101fb5780632222dd42146102445780633f4ba83a1461028357600080fd5b806307761f3d146101a8578063108ee5fc146101ce578063147809b3146101e3575b600080fd5b6101bb6101b636600461293e565b61048f565b6040519081526020015b60405180910390f35b6101e16101dc3660046129cd565b610639565b005b6101eb610714565b60405190151581526020016101c5565b6102376040518060400160405280601281526020017f426c6f62566572696669657220312e302e30000000000000000000000000000081525081565b6040516101c59190612a55565b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c5565b6101e16107ae565b60005460ff166101eb565b6101bb7f000000000000000000000000000000000000000000000000000000000000000081565b6101e16107c0565b6102cd6108e7565b6040516101c59190612ab9565b6005546003546040805163ffffffff808516825264010000000090940490931660208401528201526060016101c5565b6101e1610318366004612acc565b610956565b6101e1610b7a565b6101bb7f000000000000000000000000000000000000000000000000000000000000000081565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1661025e565b6101bb61037d366004612b07565b60009081526009602052604090205490565b6040805160018152600060208201819052918101919091526060016101c5565b6101e16103bd366004612b6c565b610b8a565b6101e16103d0366004612cdf565b611231565b6104156103e33660046129cd565b73ffffffffffffffffffffffffffffffffffffffff166000908152600c602052604090205467ffffffffffffffff1690565b60405167ffffffffffffffff90911681526020016101c5565b610436611240565b6040516101c59190612d1c565b6101e1610451366004612e3c565b611358565b6101bb610464366004612f09565b611d3b565b6101e16104773660046129cd565b611e4d565b6101e161048a366004612fb4565b611e5e565b600080845190506000600185518301039050806000036104cd57856000815181106104bc576104bc612ff6565b602002602001015192505050610632565b6101008111156104dc57600080fd5b60008167ffffffffffffffff8111156104f7576104f76127e5565b604051908082528060200260200182016040528015610520578160200160208202803683370190505b50905060008080805b8581101561060b576105e66001828b901c16600114610566578a5160018401938c91811061055957610559612ff6565b60200260200101516105a4565b87851061058457855160018501948791811061055957610559612ff6565b8b5160018601958d91811061059b5761059b612ff6565b60200260200101515b8886106105cf5786516001860195889181106105c2576105c2612ff6565b6020026020010151611eb6565b8c5160018701968e9181106105c2576105c2612ff6565b8582815181106105f8576105f8612ff6565b6020908102919091010152600101610529565b5083600186038151811061062157610621612ff6565b602002602001015196505050505050505b9392505050565b610641611f71565b73ffffffffffffffffffffffffffffffffffffffff811661068e576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28910160405180910390a15050565b600254604080517f46f8e6d7000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916346f8e6d79160048083019260209291908290030181865afa158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a89190613025565b15905090565b6107b6611f71565b6107be611ff7565b565b60015473ffffffffffffffffffffffffffffffffffffffff163314610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054336101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8416178455600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560405173ffffffffffffffffffffffffffffffffffffffff919093041692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6060600880548060200260200160405190810160405280929190818152602001828054801561094c57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610921575b5050505050905090565b61095e611f71565b600061096a8280613047565b915061097b90506020830183613047565b905081141580610989575080155b156109c0576040517fc52a9bd300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a5460005b81811015610a4f57600c6000600a60000183815481106109e8576109e8612ff6565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169055610a48816130de565b90506109c6565b5082600a610a5d8282613279565b90505060005b82811015610b3d57610a786020850185613047565b82818110610a8857610a88612ff6565b9050602002016020810190610a9d919061335a565b600c6000610aab8780613047565b85818110610abb57610abb612ff6565b9050602002016020810190610ad091906129cd565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92909216919091179055610b36816130de565b9050610a63565b507f6a58c52cba3b1b32bf483778bd30d3930b0930f34aa7e416643023a4f8f7130a83604051610b6d91906133de565b60405180910390a1505050565b610b82611f71565b6107be6120d8565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c013591610be091849163ffffffff851691908e908e908190840183828082843760009201919091525061219892505050565b6040805183815262ffffff600884901c1660208201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16040805160608101825260035480825260045460ff80821660208501526101009091041692820192909252908314610cb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f636f6e666967446967657374206d69736d617463680000000000000000000000604482015260640161083d565b610cc38b8b8b8b8b8b612565565b60007f000000000000000000000000000000000000000000000000000000000000000015610d2057600282602001518360400151610d0191906134b6565b610d0b91906134db565b610d169060016134b6565b60ff169050610d36565b6020820151610d309060016134b6565b60ff1690505b888114610d9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e617475726573000000000000604482015260640161083d565b888714610e08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e0000604482015260640161083d565b3360009081526006602090815260408083208151808301909252805460ff80821684529293919291840191610100909104166002811115610e4b57610e4b613524565b6002811115610e5c57610e5c613524565b9052509050600281602001516002811115610e7957610e79613524565b148015610ec057506008816000015160ff1681548110610e9b57610e9b612ff6565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b610f26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f756e617574686f72697a6564207472616e736d69747465720000000000000000604482015260640161083d565b505050505060008888604051610f3d929190613553565b604051908190038120610f54918c90602001613563565b604051602081830303815290604052805190602001209050610f746127c6565b604080518082019091526000808252602082015260005b8881101561120f576000600185888460208110610faa57610faa612ff6565b610fb791901a601b6134b6565b8d8d86818110610fc957610fc9612ff6565b905060200201358c8c87818110610fe257610fe2612ff6565b905060200201356040516000815260200160405260405161101f949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611041573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff811660009081526006602090815290849020838501909452835460ff808216855292965092945084019161010090041660028111156110c1576110c1613524565b60028111156110d2576110d2613524565b90525092506001836020015160028111156110ef576110ef613524565b14611156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e0000604482015260640161083d565b8251849060ff16601f811061116d5761116d612ff6565b6020020151156111d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f6e2d756e69717565207369676e6174757265000000000000000000000000604482015260640161083d565b600184846000015160ff16601f81106111f4576111f4612ff6565b9115156020909202015250611208816130de565b9050610f8b565b5050505063ffffffff81106112265761122661357f565b505050505050505050565b61123d60008083612198565b50565b604080518082019091526060808252602082015260408051600a8054606060208202840181018552938301818152929391928492909184918401828280156112be57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611293575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561134a57602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116113055790505b505050505081525050905090565b855185518560ff16601f8311156113cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e65727300000000000000000000000000000000604482015260640161083d565b60008111611435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f7369746976650000000000000000000000000000604482015260640161083d565b8183146114c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e00000000000000000000000000000000000000000000000000000000606482015260840161083d565b6114ce816003613116565b8311611536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f20686967680000000000000000604482015260640161083d565b61153e611f71565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b6007541561173157600754600090611596906001906135ae565b90506000600782815481106115ad576115ad612ff6565b60009182526020822001546008805473ffffffffffffffffffffffffffffffffffffffff909216935090849081106115e7576115e7612ff6565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff85811684526006909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811690915592909116808452922080549091169055600780549192509080611667576116676135c5565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905560088054806116d0576116d06135c5565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555061157c915050565b60005b815151811015611b96576000600660008460000151848151811061175a5761175a612ff6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff1660028111156117a4576117a4613524565b1461180b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e65722061646472657373000000000000000000604482015260640161083d565b6040805180820190915260ff8216815260016020820152825180516006916000918590811061183c5761183c612ff6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016176101008360028111156118dd576118dd613524565b0217905550600091506118ed9050565b600660008460200151848151811061190757611907612ff6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff16600281111561195157611951613524565b146119b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d6974746572206164647265737300000000604482015260640161083d565b6040805180820190915260ff8216815260208101600281525060066000846020015184815181106119eb576119eb612ff6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611a8c57611a8c613524565b021790555050825180516007925083908110611aaa57611aaa612ff6565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921790915582015180516008919083908110611b2657611b26612ff6565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055611b8f816130de565b9050611734565b506040810151600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600580547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff438116820292831785559083048116936001939092600092611c289286929082169116176135f4565b92506101000a81548163ffffffff021916908363ffffffff160217905550611c874630600560009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a00151612620565b6003819055825180516004805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560055460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0598611d26988b98919763ffffffff90921696909591949193919261361c565b60405180910390a15050505050505050505050565b60408051600180825281830190925260009182919060208083019080368337019050509050611dcf8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508b925061048f915050565b81600081518110611de257611de2612ff6565b6020026020010181815250506000611e2f8287878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525089925061048f915050565b6000908152600960205260409020549b9a5050505050505050505050565b611e55611f71565b61123d816126cb565b611e66611f71565b60005b81811015611eb15760096000848484818110611e8757611e87612ff6565b9050602002013581526020019081526020016000206000905580611eaa906130de565b9050611e69565b505050565b6000818310611f1857604080517f01000000000000000000000000000000000000000000000000000000000000006020808301919091526021820185905260418083018790528351808403909101815260619092019092528051910120610632565b604080517f01000000000000000000000000000000000000000000000000000000000000006020808301919091526021820186905260418083018690528351808403909101815260619092019092528051910120610632565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1633146107be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161083d565b60005460ff16612063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161083d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005460ff1615612145576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161083d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120ae3390565b60005460ff1615612205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161083d565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166346f8e6d76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122969190613025565b156122cc576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818060200190518101906122e2919061379e565b805151602082015151919250908114158061230257508160400151518114155b1561233b57816040517fa13dc2f800000000000000000000000000000000000000000000000000000000815260040161083d91906138ec565b60005b8181101561250f5760008360000151828151811061235e5761235e612ff6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff81166000908152600c909252604082205490925067ffffffffffffffff16908190036123ef576040517fb4fbc1e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015260240161083d565b60008560200151848151811061240757612407612ff6565b60200260200101519050806000015167ffffffffffffffff168267ffffffffffffffff161415806124535750806020015167ffffffffffffffff16816000015167ffffffffffffffff16115b1561248e5780836040517f3389cbd500000000000000000000000000000000000000000000000000000000815260040161083d9291906139c3565b602081015161249e906001613a0b565b73ffffffffffffffffffffffffffffffffffffffff939093166000908152600c6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff90941693909317909255506125089050816130de565b905061233e565b50606082015160009081526009602052604090819020429055517f0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef906125569084906138ec565b60405180910390a15050505050565b6000612572826020613116565b61257d856020613116565b61258988610144613a2e565b6125939190613a2e565b61259d9190613a2e565b6125a8906000613a2e565b9050368114612613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d617463680000000000000000604482015260640161083d565b50505050505050565b5050565b6000808a8a8a8a8a8a8a8a8a60405160200161264499989796959493929190613a46565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff82160361274a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161083d565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b604051806103e00160405280601f906020820280368337509192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612837576128376127e5565b60405290565b6040516080810167ffffffffffffffff81118282101715612837576128376127e5565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156128a7576128a76127e5565b604052919050565b600067ffffffffffffffff8211156128c9576128c96127e5565b5060051b60200190565b600082601f8301126128e457600080fd5b813560206128f96128f4836128af565b612860565b82815260059290921b8401810191818101908684111561291857600080fd5b8286015b84811015612933578035835291830191830161291c565b509695505050505050565b60008060006060848603121561295357600080fd5b833567ffffffffffffffff8082111561296b57600080fd5b612977878388016128d3565b9450602086013591508082111561298d57600080fd5b5061299a868287016128d3565b925050604084013590509250925092565b73ffffffffffffffffffffffffffffffffffffffff8116811461123d57600080fd5b6000602082840312156129df57600080fd5b8135610632816129ab565b6000815180845260005b81811015612a10576020818501810151868301820152016129f4565b81811115612a22576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061063260208301846129ea565b600081518084526020808501945080840160005b83811015612aae57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612a7c565b509495945050505050565b6020815260006106326020830184612a68565b600060208284031215612ade57600080fd5b813567ffffffffffffffff811115612af557600080fd5b82016040818503121561063257600080fd5b600060208284031215612b1957600080fd5b5035919050565b60008083601f840112612b3257600080fd5b50813567ffffffffffffffff811115612b4a57600080fd5b6020830191508360208260051b8501011115612b6557600080fd5b9250929050565b60008060008060008060008060e0898b031215612b8857600080fd5b606089018a811115612b9957600080fd5b8998503567ffffffffffffffff80821115612bb357600080fd5b818b0191508b601f830112612bc757600080fd5b813581811115612bd657600080fd5b8c6020828501011115612be857600080fd5b6020830199508098505060808b0135915080821115612c0657600080fd5b612c128c838d01612b20565b909750955060a08b0135915080821115612c2b57600080fd5b50612c388b828c01612b20565b999c989b50969995989497949560c00135949350505050565b600082601f830112612c6257600080fd5b813567ffffffffffffffff811115612c7c57612c7c6127e5565b612cad60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612860565b818152846020838601011115612cc257600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612cf157600080fd5b813567ffffffffffffffff811115612d0857600080fd5b612d1484828501612c51565b949350505050565b600060208083528351604082850152612d386060850182612a68565b858301518582037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0016040870152805180835290840192506000918401905b8083101561293357835167ffffffffffffffff168252928401926001929092019190840190612d77565b600082601f830112612db257600080fd5b81356020612dc26128f4836128af565b82815260059290921b84018101918181019086841115612de157600080fd5b8286015b84811015612933578035612df8816129ab565b8352918301918301612de5565b803560ff81168114612e1657600080fd5b919050565b67ffffffffffffffff8116811461123d57600080fd5b8035612e1681612e1b565b60008060008060008060c08789031215612e5557600080fd5b863567ffffffffffffffff80821115612e6d57600080fd5b612e798a838b01612da1565b97506020890135915080821115612e8f57600080fd5b612e9b8a838b01612da1565b9650612ea960408a01612e05565b95506060890135915080821115612ebf57600080fd5b612ecb8a838b01612c51565b9450612ed960808a01612e31565b935060a0890135915080821115612eef57600080fd5b50612efc89828a01612c51565b9150509295509295509295565b60008060008060008060008060a0898b031215612f2557600080fd5b883567ffffffffffffffff80821115612f3d57600080fd5b612f498c838d01612b20565b909a50985060208b0135915080821115612f6257600080fd5b612f6e8c838d01612b20565b909850965060408b0135955060608b0135915080821115612f8e57600080fd5b50612f9b8b828c01612b20565b999c989b50969995989497949560800135949350505050565b60008060208385031215612fc757600080fd5b823567ffffffffffffffff811115612fde57600080fd5b612fea85828601612b20565b90969095509350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561303757600080fd5b8151801515811461063257600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261307c57600080fd5b83018035915067ffffffffffffffff82111561309757600080fd5b6020019150600581901b3603821315612b6557600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361310f5761310f6130af565b5060010190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561314e5761314e6130af565b500290565b5b8181101561261c5760008155600101613154565b6000813561317581612e1b565b92915050565b68010000000000000000831115613194576131946127e5565b80548382558084101561320b578160005260206000206003850160021c810160188660031b1680156131f5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083018054828460200360031b1c16815550505b506132086003840160021c830182613153565b50505b506000818152602081208391805b868110156126135761325161322d85613168565b845467ffffffffffffffff600386901b81811b801990931693909116901b16178455565b602084019350600882019150601882111561327157600091506001830192505b600101613219565b6132838283613047565b6801000000000000000081111561329c5761329c6127e5565b8254818455808210156132c2578360005260206000206132c0828201848301613153565b505b508260005260208060002060005b838110156133335784356132e3816129ab565b82547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9190911617825593820193600191820191016132d0565b505061334181860186613047565b935091505061335482826001860161317b565b50505050565b60006020828403121561336c57600080fd5b813561063281612e1b565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126133ac57600080fd5b830160208101925035905067ffffffffffffffff8111156133cc57600080fd5b8060051b3603821315612b6557600080fd5b60006020808352606083016133f38586613377565b6040868501529182905290600090608086015b81831015613443578335613419816129ab565b73ffffffffffffffffffffffffffffffffffffffff16815292840192600192909201918401613406565b61344f85890189613377565b8883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00160408a0152808352945092508401905060005b8381101561293357823561349a81612e1b565b67ffffffffffffffff1682529184019190840190600101613487565b600060ff821660ff84168060ff038211156134d3576134d36130af565b019392505050565b600060ff831680613515577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000828210156135c0576135c06130af565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600063ffffffff808316818516808303821115613613576136136130af565b01949350505050565b600061012063ffffffff808d1684528b6020850152808b1660408501525080606084015261364c8184018a612a68565b905082810360808401526136608189612a68565b905060ff871660a084015282810360c084015261367d81876129ea565b905067ffffffffffffffff851660e08401528281036101008401526136a281856129ea565b9c9b505050505050505050505050565b600082601f8301126136c357600080fd5b815160206136d36128f4836128af565b82815260069290921b840181019181810190868411156136f257600080fd5b8286015b84811015612933576040818903121561370f5760008081fd5b613717612814565b815161372281612e1b565b81528185015161373181612e1b565b818601528352918301916040016136f6565b600082601f83011261375457600080fd5b815160206137646128f4836128af565b82815260059290921b8401810191818101908684111561378357600080fd5b8286015b848110156129335780518352918301918301613787565b600060208083850312156137b157600080fd5b825167ffffffffffffffff808211156137c957600080fd5b90840190608082870312156137dd57600080fd5b6137e561283d565b8251828111156137f457600080fd5b8301601f8101881361380557600080fd5b80516138136128f4826128af565b81815260059190911b8201860190868101908a83111561383257600080fd5b928701925b8284101561385957835161384a816129ab565b82529287019290870190613837565b8452505050828401518281111561386f57600080fd5b61387b888286016136b2565b8583015250604083015193508184111561389457600080fd5b6138a087858501613743565b6040820152606083015160608201528094505050505092915050565b600081518084526020808501945080840160005b83811015612aae578151875295820195908201906001016138d0565b60006020808352835160808285015261390860a0850182612a68565b9050818501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0604081878503018188015283835180865286860191508685019550600094505b8085101561398d57613979828751805167ffffffffffffffff908116835260209182015116910152565b94860194600194909401939082019061394f565b50818901519550828882030160608901526139a881876138bc565b95505050505050606084015160808401528091505092915050565b606081016139e88285805167ffffffffffffffff908116835260209182015116910152565b73ffffffffffffffffffffffffffffffffffffffff831660408301529392505050565b600067ffffffffffffffff808316818516808303821115613613576136136130af565b60008219821115613a4157613a416130af565b500190565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b166040850152816060850152613a8d8285018b612a68565b91508382036080850152613aa1828a612a68565b915060ff881660a085015283820360c0850152613abe82886129ea565b90861660e085015283810361010085015290506136a281856129ea56fea164736f6c634300080f000a",
}

var BlobVerifierHelperABI = BlobVerifierHelperMetaData.ABI

var BlobVerifierHelperBin = BlobVerifierHelperMetaData.Bin

func DeployBlobVerifierHelper(auth *bind.TransactOpts, backend bind.ContractBackend, chainId *big.Int, sourceChainId *big.Int, afn common.Address, config BlobVerifierInterfaceBlobVerifierConfig) (common.Address, *types.Transaction, *BlobVerifierHelper, error) {
	parsed, err := BlobVerifierHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BlobVerifierHelperBin), backend, chainId, sourceChainId, afn, config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BlobVerifierHelper{BlobVerifierHelperCaller: BlobVerifierHelperCaller{contract: contract}, BlobVerifierHelperTransactor: BlobVerifierHelperTransactor{contract: contract}, BlobVerifierHelperFilterer: BlobVerifierHelperFilterer{contract: contract}}, nil
}

type BlobVerifierHelper struct {
	address common.Address
	abi     abi.ABI
	BlobVerifierHelperCaller
	BlobVerifierHelperTransactor
	BlobVerifierHelperFilterer
}

type BlobVerifierHelperCaller struct {
	contract *bind.BoundContract
}

type BlobVerifierHelperTransactor struct {
	contract *bind.BoundContract
}

type BlobVerifierHelperFilterer struct {
	contract *bind.BoundContract
}

type BlobVerifierHelperSession struct {
	Contract     *BlobVerifierHelper
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type BlobVerifierHelperCallerSession struct {
	Contract *BlobVerifierHelperCaller
	CallOpts bind.CallOpts
}

type BlobVerifierHelperTransactorSession struct {
	Contract     *BlobVerifierHelperTransactor
	TransactOpts bind.TransactOpts
}

type BlobVerifierHelperRaw struct {
	Contract *BlobVerifierHelper
}

type BlobVerifierHelperCallerRaw struct {
	Contract *BlobVerifierHelperCaller
}

type BlobVerifierHelperTransactorRaw struct {
	Contract *BlobVerifierHelperTransactor
}

func NewBlobVerifierHelper(address common.Address, backend bind.ContractBackend) (*BlobVerifierHelper, error) {
	abi, err := abi.JSON(strings.NewReader(BlobVerifierHelperABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindBlobVerifierHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelper{address: address, abi: abi, BlobVerifierHelperCaller: BlobVerifierHelperCaller{contract: contract}, BlobVerifierHelperTransactor: BlobVerifierHelperTransactor{contract: contract}, BlobVerifierHelperFilterer: BlobVerifierHelperFilterer{contract: contract}}, nil
}

func NewBlobVerifierHelperCaller(address common.Address, caller bind.ContractCaller) (*BlobVerifierHelperCaller, error) {
	contract, err := bindBlobVerifierHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperCaller{contract: contract}, nil
}

func NewBlobVerifierHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*BlobVerifierHelperTransactor, error) {
	contract, err := bindBlobVerifierHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperTransactor{contract: contract}, nil
}

func NewBlobVerifierHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*BlobVerifierHelperFilterer, error) {
	contract, err := bindBlobVerifierHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperFilterer{contract: contract}, nil
}

func bindBlobVerifierHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BlobVerifierHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlobVerifierHelper.Contract.BlobVerifierHelperCaller.contract.Call(opts, result, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.BlobVerifierHelperTransactor.contract.Transfer(opts)
}

func (_BlobVerifierHelper *BlobVerifierHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.BlobVerifierHelperTransactor.contract.Transact(opts, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlobVerifierHelper.Contract.contract.Call(opts, result, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.contract.Transfer(opts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.contract.Transact(opts, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) CHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) CHAINID() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.CHAINID(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) CHAINID() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.CHAINID(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) SOURCECHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "SOURCE_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SOURCECHAINID() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.SOURCECHAINID(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) SOURCECHAINID() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.SOURCECHAINID(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetAFN() (common.Address, error) {
	return _BlobVerifierHelper.Contract.GetAFN(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetAFN() (common.Address, error) {
	return _BlobVerifierHelper.Contract.GetAFN(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetConfig(opts *bind.CallOpts) (BlobVerifierInterfaceBlobVerifierConfig, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getConfig")

	if err != nil {
		return *new(BlobVerifierInterfaceBlobVerifierConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(BlobVerifierInterfaceBlobVerifierConfig)).(*BlobVerifierInterfaceBlobVerifierConfig)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetConfig() (BlobVerifierInterfaceBlobVerifierConfig, error) {
	return _BlobVerifierHelper.Contract.GetConfig(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetConfig() (BlobVerifierInterfaceBlobVerifierConfig, error) {
	return _BlobVerifierHelper.Contract.GetConfig(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getExpectedNextSequenceNumber", onRamp)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _BlobVerifierHelper.Contract.GetExpectedNextSequenceNumber(&_BlobVerifierHelper.CallOpts, onRamp)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _BlobVerifierHelper.Contract.GetExpectedNextSequenceNumber(&_BlobVerifierHelper.CallOpts, onRamp)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.GetMerkleRoot(&_BlobVerifierHelper.CallOpts, root)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.GetMerkleRoot(&_BlobVerifierHelper.CallOpts, root)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) IsAFNHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "isAFNHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) IsAFNHealthy() (bool, error) {
	return _BlobVerifierHelper.Contract.IsAFNHealthy(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) IsAFNHealthy() (bool, error) {
	return _BlobVerifierHelper.Contract.IsAFNHealthy(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDetails(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDetails(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDigestAndEpoch(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDigestAndEpoch(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "merkleRoot", leaves, proofs, proofFlagBits)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _BlobVerifierHelper.Contract.MerkleRoot(&_BlobVerifierHelper.CallOpts, leaves, proofs, proofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _BlobVerifierHelper.Contract.MerkleRoot(&_BlobVerifierHelper.CallOpts, leaves, proofs, proofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Owner() (common.Address, error) {
	return _BlobVerifierHelper.Contract.Owner(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Owner() (common.Address, error) {
	return _BlobVerifierHelper.Contract.Owner(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Paused() (bool, error) {
	return _BlobVerifierHelper.Contract.Paused(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Paused() (bool, error) {
	return _BlobVerifierHelper.Contract.Paused(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Transmitters() ([]common.Address, error) {
	return _BlobVerifierHelper.Contract.Transmitters(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Transmitters() ([]common.Address, error) {
	return _BlobVerifierHelper.Contract.Transmitters(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) TypeAndVersion() (string, error) {
	return _BlobVerifierHelper.Contract.TypeAndVersion(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) TypeAndVersion() (string, error) {
	return _BlobVerifierHelper.Contract.TypeAndVersion(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "verify", hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.Verify(&_BlobVerifierHelper.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.Verify(&_BlobVerifierHelper.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "acceptOwnership")
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) AcceptOwnership() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.AcceptOwnership(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.AcceptOwnership(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "pause")
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Pause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Pause(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Pause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Pause(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Report(opts *bind.TransactOpts, rp []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "report", rp)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Report(rp []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Report(&_BlobVerifierHelper.TransactOpts, rp)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Report(rp []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Report(&_BlobVerifierHelper.TransactOpts, rp)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "resetUnblessedRoots", rootToReset)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.ResetUnblessedRoots(&_BlobVerifierHelper.TransactOpts, rootToReset)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.ResetUnblessedRoots(&_BlobVerifierHelper.TransactOpts, rootToReset)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "setAFN", afn)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetAFN(&_BlobVerifierHelper.TransactOpts, afn)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetAFN(&_BlobVerifierHelper.TransactOpts, afn)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) SetConfig(opts *bind.TransactOpts, config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "setConfig", config)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SetConfig(config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig(&_BlobVerifierHelper.TransactOpts, config)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) SetConfig(config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig(&_BlobVerifierHelper.TransactOpts, config)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) SetConfig0(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "setConfig0", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SetConfig0(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig0(&_BlobVerifierHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) SetConfig0(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig0(&_BlobVerifierHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "transferOwnership", to)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.TransferOwnership(&_BlobVerifierHelper.TransactOpts, to)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.TransferOwnership(&_BlobVerifierHelper.TransactOpts, to)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Transmit(&_BlobVerifierHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Transmit(&_BlobVerifierHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "unpause")
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Unpause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Unpause(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Unpause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Unpause(&_BlobVerifierHelper.TransactOpts)
}

type BlobVerifierHelperAFNSetIterator struct {
	Event *BlobVerifierHelperAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperAFNSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterAFNSet(opts *bind.FilterOpts) (*BlobVerifierHelperAFNSetIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperAFNSetIterator{contract: _BlobVerifierHelper.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperAFNSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperAFNSet)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseAFNSet(log types.Log) (*BlobVerifierHelperAFNSet, error) {
	event := new(BlobVerifierHelperAFNSet)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperBlobVerifierConfigSetIterator struct {
	Event *BlobVerifierHelperBlobVerifierConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperBlobVerifierConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperBlobVerifierConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperBlobVerifierConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperBlobVerifierConfigSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperBlobVerifierConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperBlobVerifierConfigSet struct {
	Config BlobVerifierInterfaceBlobVerifierConfig
	Raw    types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterBlobVerifierConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperBlobVerifierConfigSetIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "BlobVerifierConfigSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperBlobVerifierConfigSetIterator{contract: _BlobVerifierHelper.contract, event: "BlobVerifierConfigSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchBlobVerifierConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperBlobVerifierConfigSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "BlobVerifierConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperBlobVerifierConfigSet)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "BlobVerifierConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseBlobVerifierConfigSet(log types.Log) (*BlobVerifierHelperBlobVerifierConfigSet, error) {
	event := new(BlobVerifierHelperBlobVerifierConfigSet)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "BlobVerifierConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperConfigSetIterator struct {
	Event *BlobVerifierHelperConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperConfigSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperConfigSetIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperConfigSetIterator{contract: _BlobVerifierHelper.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperConfigSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperConfigSet)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseConfigSet(log types.Log) (*BlobVerifierHelperConfigSet, error) {
	event := new(BlobVerifierHelperConfigSet)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperOwnershipTransferRequestedIterator struct {
	Event *BlobVerifierHelperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperOwnershipTransferRequestedIterator{contract: _BlobVerifierHelper.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperOwnershipTransferRequested)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseOwnershipTransferRequested(log types.Log) (*BlobVerifierHelperOwnershipTransferRequested, error) {
	event := new(BlobVerifierHelperOwnershipTransferRequested)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperOwnershipTransferredIterator struct {
	Event *BlobVerifierHelperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperOwnershipTransferredIterator{contract: _BlobVerifierHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperOwnershipTransferred)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseOwnershipTransferred(log types.Log) (*BlobVerifierHelperOwnershipTransferred, error) {
	event := new(BlobVerifierHelperOwnershipTransferred)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperPausedIterator struct {
	Event *BlobVerifierHelperPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperPausedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterPaused(opts *bind.FilterOpts) (*BlobVerifierHelperPausedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperPausedIterator{contract: _BlobVerifierHelper.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperPaused) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperPaused)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParsePaused(log types.Log) (*BlobVerifierHelperPaused, error) {
	event := new(BlobVerifierHelperPaused)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperReportAcceptedIterator struct {
	Event *BlobVerifierHelperReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperReportAccepted struct {
	Report CCIPRelayReport
	Raw    types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*BlobVerifierHelperReportAcceptedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperReportAcceptedIterator{contract: _BlobVerifierHelper.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperReportAccepted) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperReportAccepted)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseReportAccepted(log types.Log) (*BlobVerifierHelperReportAccepted, error) {
	event := new(BlobVerifierHelperReportAccepted)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperTransmittedIterator struct {
	Event *BlobVerifierHelperTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperTransmittedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterTransmitted(opts *bind.FilterOpts) (*BlobVerifierHelperTransmittedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperTransmittedIterator{contract: _BlobVerifierHelper.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperTransmitted) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperTransmitted)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseTransmitted(log types.Log) (*BlobVerifierHelperTransmitted, error) {
	event := new(BlobVerifierHelperTransmitted)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperUnpausedIterator struct {
	Event *BlobVerifierHelperUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperUnpausedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BlobVerifierHelperUnpausedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperUnpausedIterator{contract: _BlobVerifierHelper.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperUnpaused) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperUnpaused)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseUnpaused(log types.Log) (*BlobVerifierHelperUnpaused, error) {
	event := new(BlobVerifierHelperUnpaused)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_BlobVerifierHelper *BlobVerifierHelper) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _BlobVerifierHelper.abi.Events["AFNSet"].ID:
		return _BlobVerifierHelper.ParseAFNSet(log)
	case _BlobVerifierHelper.abi.Events["BlobVerifierConfigSet"].ID:
		return _BlobVerifierHelper.ParseBlobVerifierConfigSet(log)
	case _BlobVerifierHelper.abi.Events["ConfigSet"].ID:
		return _BlobVerifierHelper.ParseConfigSet(log)
	case _BlobVerifierHelper.abi.Events["OwnershipTransferRequested"].ID:
		return _BlobVerifierHelper.ParseOwnershipTransferRequested(log)
	case _BlobVerifierHelper.abi.Events["OwnershipTransferred"].ID:
		return _BlobVerifierHelper.ParseOwnershipTransferred(log)
	case _BlobVerifierHelper.abi.Events["Paused"].ID:
		return _BlobVerifierHelper.ParsePaused(log)
	case _BlobVerifierHelper.abi.Events["ReportAccepted"].ID:
		return _BlobVerifierHelper.ParseReportAccepted(log)
	case _BlobVerifierHelper.abi.Events["Transmitted"].ID:
		return _BlobVerifierHelper.ParseTransmitted(log)
	case _BlobVerifierHelper.abi.Events["Unpaused"].ID:
		return _BlobVerifierHelper.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (BlobVerifierHelperAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (BlobVerifierHelperBlobVerifierConfigSet) Topic() common.Hash {
	return common.HexToHash("0x6a58c52cba3b1b32bf483778bd30d3930b0930f34aa7e416643023a4f8f7130a")
}

func (BlobVerifierHelperConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (BlobVerifierHelperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (BlobVerifierHelperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (BlobVerifierHelperPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (BlobVerifierHelperReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef")
}

func (BlobVerifierHelperTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (BlobVerifierHelperUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_BlobVerifierHelper *BlobVerifierHelper) Address() common.Address {
	return _BlobVerifierHelper.address
}

type BlobVerifierHelperInterface interface {
	CHAINID(opts *bind.CallOpts) (*big.Int, error)

	SOURCECHAINID(opts *bind.CallOpts) (*big.Int, error)

	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetConfig(opts *bind.CallOpts) (BlobVerifierInterfaceBlobVerifierConfig, error)

	GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	IsAFNHealthy(opts *bind.CallOpts) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	Report(opts *bind.TransactOpts, rp []byte) (*types.Transaction, error)

	ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error)

	SetConfig0(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterAFNSet(opts *bind.FilterOpts) (*BlobVerifierHelperAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*BlobVerifierHelperAFNSet, error)

	FilterBlobVerifierConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperBlobVerifierConfigSetIterator, error)

	WatchBlobVerifierConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperBlobVerifierConfigSet) (event.Subscription, error)

	ParseBlobVerifierConfigSet(log types.Log) (*BlobVerifierHelperBlobVerifierConfigSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*BlobVerifierHelperConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*BlobVerifierHelperOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*BlobVerifierHelperOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*BlobVerifierHelperPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*BlobVerifierHelperPaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*BlobVerifierHelperReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*BlobVerifierHelperReportAccepted, error)

	FilterTransmitted(opts *bind.FilterOpts) (*BlobVerifierHelperTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*BlobVerifierHelperTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*BlobVerifierHelperUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*BlobVerifierHelperUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package evm_2_evm_subscription_onramp

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type AggregateRateLimiterInterfaceRateLimiterConfig struct {
	Rate     *big.Int
	Capacity *big.Int
}

type AggregateRateLimiterInterfaceTokenBucket struct {
	Rate        *big.Int
	Capacity    *big.Int
	Tokens      *big.Int
	LastUpdated *big.Int
}

type BaseOnRampInterfaceOnRampConfig struct {
	RelayingFeeJuels uint64
	MaxDataSize      uint64
	MaxTokensLength  uint64
}

type CCIPEVM2AnySubscriptionMessage struct {
	Receiver []byte
	Data     []byte
	Tokens   []common.Address
	Amounts  []*big.Int
	GasLimit *big.Int
}

type CCIPEVM2EVMSubscriptionMessage struct {
	SourceChainId  *big.Int
	SequenceNumber uint64
	Sender         common.Address
	Receiver       common.Address
	Nonce          uint64
	Data           []byte
	Tokens         []common.Address
	Amounts        []*big.Int
	GasLimit       *big.Int
}

var EVM2EVMSubscriptionOnRampMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contractPoolInterface[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowlist\",\"type\":\"address[]\"},{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"relayingFeeJuels\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxDataSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTokensLength\",\"type\":\"uint64\"}],\"internalType\":\"structBaseOnRampInterface.OnRampConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"structAggregateRateLimiterInterface.RateLimiterConfig\",\"name\":\"rateLimiterConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"tokenLimitsAdmin\",\"type\":\"address\"},{\"internalType\":\"contractEVM2AnySubscriptionOnRampRouterInterface\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAFNSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadHealthConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BucketOverfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTokenAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenPoolConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualSize\",\"type\":\"uint256\"}],\"name\":\"MessageTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeCalledByRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPools\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCallableByAdminOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PriceNotFoundForToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefillRateTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterMustSetOriginalSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenPoolMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensAndPriceLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedNumberOfTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueExceedsAllowedThreshold\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AllowListEnabledSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowlist\",\"type\":\"address[]\"}],\"name\":\"AllowListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCCIP.EVM2EVMSubscriptionMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"CCIPSendRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"relayingFeeJuels\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxDataSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTokensLength\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structBaseOnRampInterface.OnRampConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"OnRampConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractPoolInterface\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractPoolInterface\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"TokenPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensRemovedFromBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contractPoolInterface\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateCurrentTokenBucketState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"structAggregateRateLimiterInterface.TokenBucket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"internalType\":\"structCCIP.EVM2AnySubscriptionMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"originalSender\",\"type\":\"address\"}],\"name\":\"forwardFromRouter\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"relayingFeeJuels\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxDataSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTokensLength\",\"type\":\"uint64\"}],\"internalType\":\"structBaseOnRampInterface.OnRampConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"sourceToken\",\"type\":\"address\"}],\"name\":\"getDestinationToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDestinationTokens\",\"outputs\":[{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"sourceToken\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"contractPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contractIERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getPricesForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenLimitAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenPool\",\"outputs\":[{\"internalType\":\"contractPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_destinationChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAFNHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contractPoolInterface\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowlist\",\"type\":\"address[]\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAllowlistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"relayingFeeJuels\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxDataSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTokensLength\",\"type\":\"uint64\"}],\"internalType\":\"structBaseOnRampInterface.OnRampConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"structAggregateRateLimiterInterface.RateLimiterConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setRateLimiterConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setTokenLimitAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAccumulatedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b50604051620037ec380380620037ec8339810160408190526200003491620006d9565b6000805460ff191681558a908a908a908a908a908a908a908a908a908a908390839088908b908b908a903390819081620000b55760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0380851661010002610100600160a81b031990921691909117909155811615620000ef57620000ef81620003d5565b5050506001600160a01b0381166200011a57604051630958ef9b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b039290921691909117905580518251146200015c5760405162d8548360e71b815260040160405180910390fd5b81516200017190600490602085019062000486565b5060005b82518110156200023c576000828281518110620001965762000196620007e1565b602002602001015190506040518060400160405280826001600160a01b03168152602001836001600160601b031681525060036000868581518110620001e057620001e0620007e1565b6020908102919091018101516001600160a01b039081168352828201939093526040909101600020835193909101516001600160601b0316600160a01b0292909116919091179055506200023481620007f7565b905062000175565b505081511590506200026c576005805460ff1916600117905580516200026a90600690602084019062000486565b505b60005b8151811015620002d957600160076000848481518110620002945762000294620007e1565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055620002d181620007f7565b90506200026f565b5050600880546001600160a01b039283166001600160a01b03199182161790915560408051608080820183528551808352602096870180518885018190529051848601819052426060909501859052600b92909255600c55600d55600e919091559d909d5260a09b909b528551601080549388015197909d01516001600160401b03908116600160801b02600160801b600160c01b031998821668010000000000000000026001600160801b031990951691909216179290921795909516179099555050601180549790911696909516959095179093555050600f80546001600160401b0319169055506200081f9a5050505050505050505050565b336001600160a01b038216036200042f5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401620000ac565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b828054828255906000526020600020908101928215620004de579160200282015b82811115620004de57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620004a7565b50620004ec929150620004f0565b5090565b5b80821115620004ec5760008155600101620004f1565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200053357600080fd5b50565b600082601f8301126200054857600080fd5b815160206001600160401b038083111562000567576200056762000507565b8260051b604051601f19603f830116810181811084821117156200058f576200058f62000507565b604052938452858101830193838101925087851115620005ae57600080fd5b83870191505b84821015620005da578151620005ca816200051d565b83529183019190830190620005b4565b979650505050505050565b8051620005f2816200051d565b919050565b80516001600160401b0381168114620005f257600080fd5b6000606082840312156200062257600080fd5b604051606081016001600160401b038111828210171562000647576200064762000507565b6040529050806200065883620005f7565b81526200066860208401620005f7565b60208201526200067b60408401620005f7565b60408201525092915050565b6000604082840312156200069a57600080fd5b604080519081016001600160401b0381118282101715620006bf57620006bf62000507565b604052825181526020928301519281019290925250919050565b6000806000806000806000806000806101a08b8d031215620006fa57600080fd5b8a5160208c015160408d0151919b5099506001600160401b03808211156200072157600080fd5b6200072f8e838f0162000536565b995060608d01519150808211156200074657600080fd5b620007548e838f0162000536565b985060808d01519150808211156200076b57600080fd5b506200077a8d828e0162000536565b9650506200078b60a08c01620005e5565b94506200079c8c60c08d016200060f565b9350620007ae8c6101208d0162000687565b9250620007bf6101608c01620005e5565b9150620007d06101808c01620005e5565b90509295989b9194979a5092959850565b634e487b7160e01b600052603260045260246000fd5b6000600182016200081857634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a051612fa06200084c60003960006104e6015260008181610336015261130b0152612fa06000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c806379ba509711610145578063b4069b31116100bd578063c5eff3d01161008c578063eb511dd411610071578063eb511dd414610609578063f2fde38b1461061c578063f78faa321461062f57600080fd5b8063c5eff3d0146105e1578063d7644ba2146105f657600080fd5b8063b4069b3114610519578063bbe4f6db14610261578063c0d786551461052c578063c3f909d41461053f57600080fd5b80638da5cb5b1161011457806391872543116100f957806391872543146104ce578063a7217195146104e1578063b0f479a11461050857600080fd5b80638da5cb5b1461047d57806390c2339b1461049357600080fd5b806379ba5097146104525780637d9c44881461045a5780638456cb591461046d57806389c065681461047557600080fd5b80634352fa9f116101d857806359e96b5b116101a7578063671dc3371161018c578063671dc33714610417578063681fba161461042a578063744b92e21461043f57600080fd5b806359e96b5b146103f95780635c975abb1461040c57600080fd5b80634352fa9f146103a25780634741062e146103b5578063552b818b146103d5578063599f6431146103e857600080fd5b80632222dd421161022f57806339aa92641161021457806339aa9264146103665780633f4ba83a146103795780634120fccd1461038157600080fd5b80632222dd421461032057806328094b591461033157600080fd5b806304c2a34a14610261578063108ee5fc146102aa578063147809b3146102bf578063181f5a77146102d7575b600080fd5b61028d61026f366004612593565b6001600160a01b039081166000908152600360205260409020541690565b6040516001600160a01b0390911681526020015b60405180910390f35b6102bd6102b8366004612593565b61063a565b005b6102c76106e3565b60405190151581526020016102a1565b6103136040518060400160405280601f81526020017f45564d3245564d537562736372697074696f6e4f6e52616d7020312e302e300081525081565b6040516102a1919061260c565b6002546001600160a01b031661028d565b6103587f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016102a1565b6102bd610374366004612593565b610770565b6102bd61079a565b6103896107ac565b60405167ffffffffffffffff90911681526020016102a1565b6102bd6103b0366004612792565b6107cc565b6103c86103c33660046127f6565b610a08565b6040516102a19190612866565b6102bd6103e3366004612879565b610ad0565b6008546001600160a01b031661028d565b6102bd6104073660046128ee565b610c5a565b60005460ff166102c7565b6102bd61042536600461292f565b610cbe565b610432610d10565b6040516102a19190612980565b6102bd61044d366004612993565b610dd5565b6102bd6110a6565b610389610468366004612a3c565b611181565b6102bd611487565b610432611497565b60005461010090046001600160a01b031661028d565b61049b6114f9565b6040516102a191908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6102bd6104dc366004612b32565b61159a565b6103587f000000000000000000000000000000000000000000000000000000000000000081565b6011546001600160a01b031661028d565b61028d610527366004612593565b6116ad565b6102bd61053a366004612593565b611782565b6105ae6040805160608101825260008082526020820181905291810191909152506040805160608101825260105467ffffffffffffffff808216835268010000000000000000820481166020840152700100000000000000000000000000000000909104169181019190915290565b60408051825167ffffffffffffffff908116825260208085015182169083015292820151909216908201526060016102a1565b6105e96117d8565b6040516102a19190612b81565b6102bd610604366004612bdc565b611838565b6102bd610617366004612993565b611881565b6102bd61062a366004612593565b611a22565b60055460ff166102c7565b610642611a36565b6001600160a01b038116610682576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28910160405180910390a15050565b600254604080517f46f8e6d700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916346f8e6d79160048083019260209291908290030181865afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a9190612bf9565b15905090565b610778611a36565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6107a2611a36565b6107aa611a95565b565b600f546000906107c79067ffffffffffffffff166001612c2c565b905090565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b03161415801561080957506008546001600160a01b03163314155b15610827576040516307b66ab160e51b815260040160405180910390fd5b815181518114610863576040517f3959163300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a5460005b818110156108bd5760096000600a838154811061088857610888612c58565b60009182526020808320909101546001600160a01b031683528201929092526040018120556108b681612c6e565b9050610869565b5060005b828110156109ed5760008582815181106108dd576108dd612c58565b6020026020010151905060006001600160a01b0316816001600160a01b031603610933576040517fe622e04000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84828151811061094557610945612c58565b602002602001015160096000836001600160a01b03166001600160a01b03168152602001908152602001600020819055507f4cd172fb90d81a44670b97a6e2a5a3b01417f33a809b634a5a1764e93d338e1f818684815181106109aa576109aa612c58565b60200260200101516040516109d49291906001600160a01b03929092168252602082015260400190565b60405180910390a1506109e681612c6e565b90506108c1565b508351610a0190600a9060208701906124b5565b5050505050565b80516060908067ffffffffffffffff811115610a2657610a2661262f565b604051908082528060200260200182016040528015610a4f578160200160208202803683370190505b50915060005b81811015610ac95760096000858381518110610a7357610a73612c58565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110610aae57610aae612c58565b6020908102919091010152610ac281612c6e565b9050610a55565b5050919050565b610ad8611a36565b60006006805480602002602001604051908101604052809291908181526020018280548015610b3057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b12575b5050505050905060005b8151811015610b9d57600060076000848481518110610b5b57610b5b612c58565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055610b9681612c6e565b9050610b3a565b50610baa60068484612516565b5060005b82811015610c1b57600160076000868685818110610bce57610bce612c58565b9050602002016020810190610be39190612593565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055610c1481612c6e565b9050610bae565b507ff8adc5fee247b62a85f63294cb46e4be61da815e4756bc57672a83b24faf0dda8383604051610c4d929190612c87565b60405180910390a1505050565b610c62611a36565b610c766001600160a01b0384168383611b31565b604080516001600160a01b038086168252841660208201529081018290527f5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa890606001610c4d565b610cc6611a36565b806010610cd38282612ce0565b9050507fcc6ce9e57c1de2adf58a81e94b96b43d77ea6973e3f08e6ea4fe83d62ae60e9e81604051610d059190612da6565b60405180910390a150565b60045460609067ffffffffffffffff811115610d2e57610d2e61262f565b604051908082528060200260200182016040528015610d57578160200160208202803683370190505b50905060005b600454811015610dd157610d9760048281548110610d7d57610d7d612c58565b6000918252602090912001546001600160a01b03166116ad565b828281518110610da957610da9612c58565b6001600160a01b0390921660209283029190910190910152610dca81612c6e565b9050610d5d565b5090565b610ddd611a36565b6004546000819003610e1b576040517f6987841e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03838116600090815260036020908152604091829020825180840190935254928316808352600160a01b9093046bffffffffffffffffffffffff169082015290610e7f576040516302721e1f60e61b815260040160405180910390fd5b826001600160a01b031681600001516001600160a01b031614610ece576040517f6cc7b99800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006004610edd600185612df9565b81548110610eed57610eed612c58565b9060005260206000200160009054906101000a90046001600160a01b03169050600482602001516bffffffffffffffffffffffff1681548110610f3257610f32612c58565b6000918252602090912001546001600160a01b03166004610f54600186612df9565b81548110610f6457610f64612c58565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600483602001516bffffffffffffffffffffffff1681548110610fb857610fb8612c58565b6000918252602080832090910180546001600160a01b039485166001600160a01b03199091161790558481015184841683526003909152604090912080546bffffffffffffffffffffffff909216600160a01b0291909216179055600480548061102457611024612e10565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b03878116808452600383526040808520949094558351908152908716918101919091527f987eb3c2f78454541205f72f34839b434c306c9eaf4922efd7c0c3060fdb2e4c910160405180910390a15050505050565b6001546001600160a01b031633146111055760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054336101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8416178455600180546001600160a01b03191690556040516001600160a01b03919093041692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000805460ff16156111d55760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016110fc565b600260009054906101000a90046001600160a01b03166001600160a01b03166346f8e6d76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190612bf9565b15611282576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6011546001600160a01b031633146112c6576040517f1c0a352900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112df8360200151518460400151856060015185611bb6565b600083600001518060200190518101906112f99190612e26565b905060006040518061012001604052807f00000000000000000000000000000000000000000000000000000000000000008152602001600f600081819054906101000a900467ffffffffffffffff1661135190612e43565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905567ffffffffffffffff168152602001856001600160a01b03168152602001836001600160a01b0316815260200160126000856001600160a01b03166001600160a01b03168152602001908152602001600020600081819054906101000a900467ffffffffffffffff166113e890612e43565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905567ffffffffffffffff168152602001866020015181526020018660400151815260200186606001518152602001866080015181525090507f73dfb9df8214728e699dbaaf6ba97aa125afaaba83a5d0de7903062e7c5b3139816040516114739190612e6a565b60405180910390a160200151949350505050565b61148f611a36565b6107aa611eb9565b606060048054806020026020016040519081016040528092919081815260200182805480156114ef57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114d1575b5050505050905090565b6115246040518060800160405280600081526020016000815260200160008152602001600081525090565b60408051608081018252600b548152600c546020820152600d5491810191909152600e5460608201819052429060009061155e9083612df9565b6020840151845191925061158a916115769084612f40565b85604001516115859190612f5f565b611f41565b6040840152506060820152919050565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b0316141580156115d757506008546001600160a01b03163314155b156115f5576040516307b66ab160e51b815260040160405180910390fd5b805179ffffffffffffffffffffffffffffffffffffffffffffffffffff11611649576040517f3d9cbdab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611653600b611f57565b6020810151600c8190558151600b55600d5461166f9190611f41565b600d55602081810151825160408051928352928201527f8e012bd57e8109fb3513158da3ff482a86a1e3ff4d5be099be0945772547322d9101610d05565b6001600160a01b03808216600090815260036020526040812054909116806116e8576040516302721e1f60e61b815260040160405180910390fd5b6001600160a01b038084166000908152600360209081526040918290205482517f21df0da700000000000000000000000000000000000000000000000000000000815292519316926321df0da79260048082019392918290030181865afa158015611757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177b9190612e26565b9392505050565b61178a611a36565b601180546001600160a01b0319166001600160a01b0383169081179091556040519081527fc6b438e6a8a59579ce6a4406cbd203b740e0d47b458aae6596339bcd40c40d1590602001610d05565b606060068054806020026020016040519081016040528092919081815260200182805480156114ef576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116114d1575050505050905090565b611840611a36565b6005805460ff19168215159081179091556040519081527fccf4daf6ab6430389f26b970595dab82a5881ad454770907e415ede27c8df03290602001610d05565b611889611a36565b6001600160a01b03821615806118a657506001600160a01b038116155b156118dd576040517f6c2a418000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03828116600090815260036020908152604091829020825180840190935254928316808352600160a01b9093046bffffffffffffffffffffffff1690820152901561195b576040517f3caf458500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03828116808352600480546bffffffffffffffffffffffff908116602080870191825288861660008181526003835260408082208a519551909616600160a01b0294909816939093179093558354600181018555939091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90920180546001600160a01b031916821790558351908152908101919091527f95f865c2808f8b2a85eea2611db7843150ee7835ef1403f9755918a97d76933c9101610c4d565b611a2a611a36565b611a3381612004565b50565b60005461010090046001600160a01b031633146107aa5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016110fc565b60005460ff16611ae75760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016110fc565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611bb19084906120b3565b505050565b6011546001600160a01b0316611bf8576040517f179ce99f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116611c38576040517fa4ec747900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60105468010000000000000000900467ffffffffffffffff16841115611cac576010546040517f869337890000000000000000000000000000000000000000000000000000000081526801000000000000000090910467ffffffffffffffff166004820152602481018590526044016110fc565b8251601054700100000000000000000000000000000000900467ffffffffffffffff16811180611cdd575082518114155b15611d14576040517f4c056b6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460ff168015611d3f57506001600160a01b03821660009081526007602052604090205460ff16155b15611d81576040517fd0d259760000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016110fc565b611d8b8484612198565b60005b81811015611eb1576000858281518110611daa57611daa612c58565b602002602001015190506000611dd8826001600160a01b039081166000908152600360205260409020541690565b90506001600160a01b038116611e25576040517fbf16aab60000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016110fc565b806001600160a01b031663503c2858878581518110611e4657611e46612c58565b60200260200101516040518263ffffffff1660e01b8152600401611e6c91815260200190565b600060405180830381600087803b158015611e8657600080fd5b505af1158015611e9a573d6000803e3d6000fd5b50505050505080611eaa90612c6e565b9050611d8e565b505050505050565b60005460ff1615611f0c5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016110fc565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b143390565b6000818310611f50578161177b565b5090919050565b6001810154600282015442911480611f725750808260030154145b15611f7b575050565b816001015482600201541115611fbd576040517f9725942a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826003015482611fcf9190612df9565b60018401548454919250611ff691611fe79084612f40565b85600201546115859190612f5f565b600284015550600390910155565b336001600160a01b0382160361205c5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016110fc565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000612108826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123269092919063ffffffff16565b805190915015611bb157808060200190518101906121269190612bf9565b611bb15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016110fc565b6000805b835181101561228f576000600960008684815181106121bd576121bd612c58565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205490508060000361224c5784828151811061220257612202612c58565b60200260200101516040517f9a655f7b0000000000000000000000000000000000000000000000000000000081526004016110fc91906001600160a01b0391909116815260200190565b83828151811061225e5761225e612c58565b6020026020010151816122719190612f40565b61227b9084612f5f565b9250508061228890612c6e565b905061219c565b508015611bb1576122a0600b611f57565b600d548111156122dc576040517f3bfa6f3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600b60020160008282546122f19190612df9565b90915550506040518181527fcecaabdf078137e9f3ffad598f679665628d62e269c3d929bd10fef8a22ba37890602001610c4d565b6060612335848460008561233d565b949350505050565b6060824710156123b55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016110fc565b843b6124035760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016110fc565b600080866001600160a01b0316858760405161241f9190612f77565b60006040518083038185875af1925050503d806000811461245c576040519150601f19603f3d011682016040523d82523d6000602084013e612461565b606091505b509150915061247182828661247c565b979650505050505050565b6060831561248b57508161177b565b82511561249b5782518084602001fd5b8160405162461bcd60e51b81526004016110fc919061260c565b82805482825590600052602060002090810192821561250a579160200282015b8281111561250a57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906124d5565b50610dd1929150612569565b82805482825590600052602060002090810192821561250a579160200282015b8281111561250a5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612536565b5b80821115610dd1576000815560010161256a565b6001600160a01b0381168114611a3357600080fd5b6000602082840312156125a557600080fd5b813561177b8161257e565b60005b838110156125cb5781810151838201526020016125b3565b838111156125da576000848401525b50505050565b600081518084526125f88160208601602086016125b0565b601f01601f19169290920160200192915050565b60208152600061177b60208301846125e0565b803561262a8161257e565b919050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156126685761266861262f565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156126975761269761262f565b604052919050565b600067ffffffffffffffff8211156126b9576126b961262f565b5060051b60200190565b600082601f8301126126d457600080fd5b813560206126e96126e48361269f565b61266e565b82815260059290921b8401810191818101908684111561270857600080fd5b8286015b8481101561272c57803561271f8161257e565b835291830191830161270c565b509695505050505050565b600082601f83011261274857600080fd5b813560206127586126e48361269f565b82815260059290921b8401810191818101908684111561277757600080fd5b8286015b8481101561272c578035835291830191830161277b565b600080604083850312156127a557600080fd5b823567ffffffffffffffff808211156127bd57600080fd5b6127c9868387016126c3565b935060208501359150808211156127df57600080fd5b506127ec85828601612737565b9150509250929050565b60006020828403121561280857600080fd5b813567ffffffffffffffff81111561281f57600080fd5b612335848285016126c3565b600081518084526020808501945080840160005b8381101561285b5781518752958201959082019060010161283f565b509495945050505050565b60208152600061177b602083018461282b565b6000806020838503121561288c57600080fd5b823567ffffffffffffffff808211156128a457600080fd5b818501915085601f8301126128b857600080fd5b8135818111156128c757600080fd5b8660208260051b85010111156128dc57600080fd5b60209290920196919550909350505050565b60008060006060848603121561290357600080fd5b833561290e8161257e565b9250602084013561291e8161257e565b929592945050506040919091013590565b60006060828403121561294157600080fd5b50919050565b600081518084526020808501945080840160005b8381101561285b5781516001600160a01b03168752958201959082019060010161295b565b60208152600061177b6020830184612947565b600080604083850312156129a657600080fd5b82356129b18161257e565b915060208301356129c18161257e565b809150509250929050565b600082601f8301126129dd57600080fd5b813567ffffffffffffffff8111156129f7576129f761262f565b612a0a601f8201601f191660200161266e565b818152846020838601011115612a1f57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612a4f57600080fd5b823567ffffffffffffffff80821115612a6757600080fd5b9084019060a08287031215612a7b57600080fd5b612a83612645565b823582811115612a9257600080fd5b612a9e888286016129cc565b825250602083013582811115612ab357600080fd5b612abf888286016129cc565b602083015250604083013582811115612ad757600080fd5b612ae3888286016126c3565b604083015250606083013582811115612afb57600080fd5b612b0788828601612737565b60608301525060808301356080820152809450505050612b296020840161261f565b90509250929050565b600060408284031215612b4457600080fd5b6040516040810181811067ffffffffffffffff82111715612b6757612b6761262f565b604052823581526020928301359281019290925250919050565b6020808252825182820181905260009190848201906040850190845b81811015612bc25783516001600160a01b031683529284019291840191600101612b9d565b50909695505050505050565b8015158114611a3357600080fd5b600060208284031215612bee57600080fd5b813561177b81612bce565b600060208284031215612c0b57600080fd5b815161177b81612bce565b634e487b7160e01b600052601160045260246000fd5b600067ffffffffffffffff808316818516808303821115612c4f57612c4f612c16565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b600060018201612c8057612c80612c16565b5060010190565b60208082528181018390526000908460408401835b8681101561272c578235612caf8161257e565b6001600160a01b031682529183019190830190600101612c9c565b67ffffffffffffffff81168114611a3357600080fd5b8135612ceb81612cca565b67ffffffffffffffff8116905081548167ffffffffffffffff1982161783556020840135612d1881612cca565b6fffffffffffffffff0000000000000000604091821b166fffffffffffffffffffffffffffffffff19831684178117855590850135612d5681612cca565b77ffffffffffffffff000000000000000000000000000000008160801b16847fffffffffffffffff0000000000000000000000000000000000000000000000008516178317178555505050505050565b606081018235612db581612cca565b67ffffffffffffffff9081168352602084013590612dd282612cca565b9081166020840152604084013590612de982612cca565b8082166040850152505092915050565b600082821015612e0b57612e0b612c16565b500390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215612e3857600080fd5b815161177b8161257e565b600067ffffffffffffffff808316818103612e6057612e60612c16565b6001019392505050565b602081528151602082015260006020830151612e92604084018267ffffffffffffffff169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b038116608084015250608083015167ffffffffffffffff811660a08401525060a08301516101208060c0850152612eef6101408501836125e0565b915060c0850151601f19808685030160e0870152612f0d8483612947565b935060e08701519150610100818786030181880152612f2c858461282b565b970151959092019490945250929392505050565b6000816000190483118215151615612f5a57612f5a612c16565b500290565b60008219821115612f7257612f72612c16565b500190565b60008251612f898184602087016125b0565b919091019291505056fea164736f6c634300080f000a",
}

var EVM2EVMSubscriptionOnRampABI = EVM2EVMSubscriptionOnRampMetaData.ABI

var EVM2EVMSubscriptionOnRampBin = EVM2EVMSubscriptionOnRampMetaData.Bin

func DeployEVM2EVMSubscriptionOnRamp(auth *bind.TransactOpts, backend bind.ContractBackend, chainId *big.Int, destinationChainId *big.Int, tokens []common.Address, pools []common.Address, allowlist []common.Address, afn common.Address, config BaseOnRampInterfaceOnRampConfig, rateLimiterConfig AggregateRateLimiterInterfaceRateLimiterConfig, tokenLimitsAdmin common.Address, router common.Address) (common.Address, *types.Transaction, *EVM2EVMSubscriptionOnRamp, error) {
	parsed, err := EVM2EVMSubscriptionOnRampMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EVM2EVMSubscriptionOnRampBin), backend, chainId, destinationChainId, tokens, pools, allowlist, afn, config, rateLimiterConfig, tokenLimitsAdmin, router)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EVM2EVMSubscriptionOnRamp{EVM2EVMSubscriptionOnRampCaller: EVM2EVMSubscriptionOnRampCaller{contract: contract}, EVM2EVMSubscriptionOnRampTransactor: EVM2EVMSubscriptionOnRampTransactor{contract: contract}, EVM2EVMSubscriptionOnRampFilterer: EVM2EVMSubscriptionOnRampFilterer{contract: contract}}, nil
}

type EVM2EVMSubscriptionOnRamp struct {
	address common.Address
	abi     abi.ABI
	EVM2EVMSubscriptionOnRampCaller
	EVM2EVMSubscriptionOnRampTransactor
	EVM2EVMSubscriptionOnRampFilterer
}

type EVM2EVMSubscriptionOnRampCaller struct {
	contract *bind.BoundContract
}

type EVM2EVMSubscriptionOnRampTransactor struct {
	contract *bind.BoundContract
}

type EVM2EVMSubscriptionOnRampFilterer struct {
	contract *bind.BoundContract
}

type EVM2EVMSubscriptionOnRampSession struct {
	Contract     *EVM2EVMSubscriptionOnRamp
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type EVM2EVMSubscriptionOnRampCallerSession struct {
	Contract *EVM2EVMSubscriptionOnRampCaller
	CallOpts bind.CallOpts
}

type EVM2EVMSubscriptionOnRampTransactorSession struct {
	Contract     *EVM2EVMSubscriptionOnRampTransactor
	TransactOpts bind.TransactOpts
}

type EVM2EVMSubscriptionOnRampRaw struct {
	Contract *EVM2EVMSubscriptionOnRamp
}

type EVM2EVMSubscriptionOnRampCallerRaw struct {
	Contract *EVM2EVMSubscriptionOnRampCaller
}

type EVM2EVMSubscriptionOnRampTransactorRaw struct {
	Contract *EVM2EVMSubscriptionOnRampTransactor
}

func NewEVM2EVMSubscriptionOnRamp(address common.Address, backend bind.ContractBackend) (*EVM2EVMSubscriptionOnRamp, error) {
	abi, err := abi.JSON(strings.NewReader(EVM2EVMSubscriptionOnRampABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindEVM2EVMSubscriptionOnRamp(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRamp{address: address, abi: abi, EVM2EVMSubscriptionOnRampCaller: EVM2EVMSubscriptionOnRampCaller{contract: contract}, EVM2EVMSubscriptionOnRampTransactor: EVM2EVMSubscriptionOnRampTransactor{contract: contract}, EVM2EVMSubscriptionOnRampFilterer: EVM2EVMSubscriptionOnRampFilterer{contract: contract}}, nil
}

func NewEVM2EVMSubscriptionOnRampCaller(address common.Address, caller bind.ContractCaller) (*EVM2EVMSubscriptionOnRampCaller, error) {
	contract, err := bindEVM2EVMSubscriptionOnRamp(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampCaller{contract: contract}, nil
}

func NewEVM2EVMSubscriptionOnRampTransactor(address common.Address, transactor bind.ContractTransactor) (*EVM2EVMSubscriptionOnRampTransactor, error) {
	contract, err := bindEVM2EVMSubscriptionOnRamp(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampTransactor{contract: contract}, nil
}

func NewEVM2EVMSubscriptionOnRampFilterer(address common.Address, filterer bind.ContractFilterer) (*EVM2EVMSubscriptionOnRampFilterer, error) {
	contract, err := bindEVM2EVMSubscriptionOnRamp(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampFilterer{contract: contract}, nil
}

func bindEVM2EVMSubscriptionOnRamp(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EVM2EVMSubscriptionOnRampABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EVM2EVMSubscriptionOnRamp.Contract.EVM2EVMSubscriptionOnRampCaller.contract.Call(opts, result, method, params...)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.EVM2EVMSubscriptionOnRampTransactor.contract.Transfer(opts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.EVM2EVMSubscriptionOnRampTransactor.contract.Transact(opts, method, params...)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EVM2EVMSubscriptionOnRamp.Contract.contract.Call(opts, result, method, params...)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.contract.Transfer(opts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.contract.Transact(opts, method, params...)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) CalculateCurrentTokenBucketState(opts *bind.CallOpts) (AggregateRateLimiterInterfaceTokenBucket, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "calculateCurrentTokenBucketState")

	if err != nil {
		return *new(AggregateRateLimiterInterfaceTokenBucket), err
	}

	out0 := *abi.ConvertType(out[0], new(AggregateRateLimiterInterfaceTokenBucket)).(*AggregateRateLimiterInterfaceTokenBucket)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) CalculateCurrentTokenBucketState() (AggregateRateLimiterInterfaceTokenBucket, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.CalculateCurrentTokenBucketState(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) CalculateCurrentTokenBucketState() (AggregateRateLimiterInterfaceTokenBucket, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.CalculateCurrentTokenBucketState(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetAFN() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAFN(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetAFN() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAFN(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetAllowlist(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getAllowlist")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetAllowlist() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAllowlist(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetAllowlist() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAllowlist(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetAllowlistEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getAllowlistEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetAllowlistEnabled() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAllowlistEnabled(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetAllowlistEnabled() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAllowlistEnabled(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetConfig(opts *bind.CallOpts) (BaseOnRampInterfaceOnRampConfig, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getConfig")

	if err != nil {
		return *new(BaseOnRampInterfaceOnRampConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(BaseOnRampInterfaceOnRampConfig)).(*BaseOnRampInterfaceOnRampConfig)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetConfig() (BaseOnRampInterfaceOnRampConfig, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetConfig(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetConfig() (BaseOnRampInterfaceOnRampConfig, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetConfig(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetDestinationToken(opts *bind.CallOpts, sourceToken common.Address) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getDestinationToken", sourceToken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetDestinationToken(sourceToken common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetDestinationToken(&_EVM2EVMSubscriptionOnRamp.CallOpts, sourceToken)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetDestinationToken(sourceToken common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetDestinationToken(&_EVM2EVMSubscriptionOnRamp.CallOpts, sourceToken)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetDestinationTokens(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getDestinationTokens")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetDestinationTokens() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetDestinationTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetDestinationTokens() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetDestinationTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetExpectedNextSequenceNumber(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getExpectedNextSequenceNumber")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetExpectedNextSequenceNumber() (uint64, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetExpectedNextSequenceNumber(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetExpectedNextSequenceNumber() (uint64, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetExpectedNextSequenceNumber(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetPool(opts *bind.CallOpts, sourceToken common.Address) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getPool", sourceToken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetPool(sourceToken common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPool(&_EVM2EVMSubscriptionOnRamp.CallOpts, sourceToken)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetPool(sourceToken common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPool(&_EVM2EVMSubscriptionOnRamp.CallOpts, sourceToken)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetPoolTokens(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getPoolTokens")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetPoolTokens() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPoolTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetPoolTokens() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPoolTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetPricesForTokens(opts *bind.CallOpts, tokens []common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getPricesForTokens", tokens)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetPricesForTokens(tokens []common.Address) ([]*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPricesForTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts, tokens)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetPricesForTokens(tokens []common.Address) ([]*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPricesForTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts, tokens)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetRouter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getRouter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetRouter() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetRouter(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetRouter() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetRouter(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetTokenLimitAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getTokenLimitAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetTokenLimitAdmin() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetTokenLimitAdmin(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetTokenLimitAdmin() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetTokenLimitAdmin(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetTokenPool(opts *bind.CallOpts, token common.Address) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getTokenPool", token)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetTokenPool(token common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetTokenPool(&_EVM2EVMSubscriptionOnRamp.CallOpts, token)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetTokenPool(token common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetTokenPool(&_EVM2EVMSubscriptionOnRamp.CallOpts, token)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) IChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "i_chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) IChainId() (*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IChainId(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) IChainId() (*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IChainId(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) IDestinationChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "i_destinationChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) IDestinationChainId() (*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IDestinationChainId(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) IDestinationChainId() (*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IDestinationChainId(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) IsAFNHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "isAFNHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) IsAFNHealthy() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IsAFNHealthy(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) IsAFNHealthy() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IsAFNHealthy(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) Owner() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Owner(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) Owner() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Owner(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) Paused() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Paused(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) Paused() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Paused(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) TypeAndVersion() (string, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.TypeAndVersion(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) TypeAndVersion() (string, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.TypeAndVersion(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "acceptOwnership")
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) AcceptOwnership() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.AcceptOwnership(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.AcceptOwnership(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) AddPool(opts *bind.TransactOpts, token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "addPool", token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) AddPool(token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.AddPool(&_EVM2EVMSubscriptionOnRamp.TransactOpts, token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) AddPool(token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.AddPool(&_EVM2EVMSubscriptionOnRamp.TransactOpts, token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) ForwardFromRouter(opts *bind.TransactOpts, message CCIPEVM2AnySubscriptionMessage, originalSender common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "forwardFromRouter", message, originalSender)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) ForwardFromRouter(message CCIPEVM2AnySubscriptionMessage, originalSender common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.ForwardFromRouter(&_EVM2EVMSubscriptionOnRamp.TransactOpts, message, originalSender)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) ForwardFromRouter(message CCIPEVM2AnySubscriptionMessage, originalSender common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.ForwardFromRouter(&_EVM2EVMSubscriptionOnRamp.TransactOpts, message, originalSender)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "pause")
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) Pause() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Pause(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) Pause() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Pause(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) RemovePool(opts *bind.TransactOpts, token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "removePool", token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) RemovePool(token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.RemovePool(&_EVM2EVMSubscriptionOnRamp.TransactOpts, token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) RemovePool(token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.RemovePool(&_EVM2EVMSubscriptionOnRamp.TransactOpts, token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setAFN", afn)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAFN(&_EVM2EVMSubscriptionOnRamp.TransactOpts, afn)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAFN(&_EVM2EVMSubscriptionOnRamp.TransactOpts, afn)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetAllowlist(opts *bind.TransactOpts, allowlist []common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setAllowlist", allowlist)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetAllowlist(allowlist []common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAllowlist(&_EVM2EVMSubscriptionOnRamp.TransactOpts, allowlist)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetAllowlist(allowlist []common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAllowlist(&_EVM2EVMSubscriptionOnRamp.TransactOpts, allowlist)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetAllowlistEnabled(opts *bind.TransactOpts, enabled bool) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setAllowlistEnabled", enabled)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetAllowlistEnabled(enabled bool) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAllowlistEnabled(&_EVM2EVMSubscriptionOnRamp.TransactOpts, enabled)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetAllowlistEnabled(enabled bool) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAllowlistEnabled(&_EVM2EVMSubscriptionOnRamp.TransactOpts, enabled)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetConfig(opts *bind.TransactOpts, config BaseOnRampInterfaceOnRampConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setConfig", config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetConfig(config BaseOnRampInterfaceOnRampConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetConfig(&_EVM2EVMSubscriptionOnRamp.TransactOpts, config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetConfig(config BaseOnRampInterfaceOnRampConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetConfig(&_EVM2EVMSubscriptionOnRamp.TransactOpts, config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetPrices(opts *bind.TransactOpts, tokens []common.Address, prices []*big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setPrices", tokens, prices)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetPrices(tokens []common.Address, prices []*big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetPrices(&_EVM2EVMSubscriptionOnRamp.TransactOpts, tokens, prices)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetPrices(tokens []common.Address, prices []*big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetPrices(&_EVM2EVMSubscriptionOnRamp.TransactOpts, tokens, prices)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetRateLimiterConfig(opts *bind.TransactOpts, config AggregateRateLimiterInterfaceRateLimiterConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setRateLimiterConfig", config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetRateLimiterConfig(config AggregateRateLimiterInterfaceRateLimiterConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetRateLimiterConfig(&_EVM2EVMSubscriptionOnRamp.TransactOpts, config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetRateLimiterConfig(config AggregateRateLimiterInterfaceRateLimiterConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetRateLimiterConfig(&_EVM2EVMSubscriptionOnRamp.TransactOpts, config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetRouter(opts *bind.TransactOpts, router common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setRouter", router)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetRouter(router common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetRouter(&_EVM2EVMSubscriptionOnRamp.TransactOpts, router)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetRouter(router common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetRouter(&_EVM2EVMSubscriptionOnRamp.TransactOpts, router)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetTokenLimitAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setTokenLimitAdmin", newAdmin)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetTokenLimitAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetTokenLimitAdmin(&_EVM2EVMSubscriptionOnRamp.TransactOpts, newAdmin)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetTokenLimitAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetTokenLimitAdmin(&_EVM2EVMSubscriptionOnRamp.TransactOpts, newAdmin)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "transferOwnership", to)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.TransferOwnership(&_EVM2EVMSubscriptionOnRamp.TransactOpts, to)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.TransferOwnership(&_EVM2EVMSubscriptionOnRamp.TransactOpts, to)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "unpause")
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) Unpause() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Unpause(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) Unpause() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Unpause(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "withdrawAccumulatedFees", feeToken, recipient, amount)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.WithdrawAccumulatedFees(&_EVM2EVMSubscriptionOnRamp.TransactOpts, feeToken, recipient, amount)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.WithdrawAccumulatedFees(&_EVM2EVMSubscriptionOnRamp.TransactOpts, feeToken, recipient, amount)
}

type EVM2EVMSubscriptionOnRampAFNSetIterator struct {
	Event *EVM2EVMSubscriptionOnRampAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampAFNSetIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterAFNSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAFNSetIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampAFNSetIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAFNSet) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampAFNSet)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseAFNSet(log types.Log) (*EVM2EVMSubscriptionOnRampAFNSet, error) {
	event := new(EVM2EVMSubscriptionOnRampAFNSet)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator struct {
	Event *EVM2EVMSubscriptionOnRampAllowListEnabledSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampAllowListEnabledSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampAllowListEnabledSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampAllowListEnabledSet struct {
	Enabled bool
	Raw     types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterAllowListEnabledSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "AllowListEnabledSet")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "AllowListEnabledSet", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchAllowListEnabledSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAllowListEnabledSet) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "AllowListEnabledSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampAllowListEnabledSet)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AllowListEnabledSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseAllowListEnabledSet(log types.Log) (*EVM2EVMSubscriptionOnRampAllowListEnabledSet, error) {
	event := new(EVM2EVMSubscriptionOnRampAllowListEnabledSet)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AllowListEnabledSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampAllowListSetIterator struct {
	Event *EVM2EVMSubscriptionOnRampAllowListSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampAllowListSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampAllowListSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampAllowListSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampAllowListSetIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampAllowListSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampAllowListSet struct {
	Allowlist []common.Address
	Raw       types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterAllowListSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAllowListSetIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "AllowListSet")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampAllowListSetIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "AllowListSet", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchAllowListSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAllowListSet) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "AllowListSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampAllowListSet)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AllowListSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseAllowListSet(log types.Log) (*EVM2EVMSubscriptionOnRampAllowListSet, error) {
	event := new(EVM2EVMSubscriptionOnRampAllowListSet)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AllowListSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator struct {
	Event *EVM2EVMSubscriptionOnRampCCIPSendRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampCCIPSendRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampCCIPSendRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampCCIPSendRequested struct {
	Message CCIPEVM2EVMSubscriptionMessage
	Raw     types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterCCIPSendRequested(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "CCIPSendRequested")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "CCIPSendRequested", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchCCIPSendRequested(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampCCIPSendRequested) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "CCIPSendRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampCCIPSendRequested)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "CCIPSendRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseCCIPSendRequested(log types.Log) (*EVM2EVMSubscriptionOnRampCCIPSendRequested, error) {
	event := new(EVM2EVMSubscriptionOnRampCCIPSendRequested)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "CCIPSendRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampConfigChangedIterator struct {
	Event *EVM2EVMSubscriptionOnRampConfigChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampConfigChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampConfigChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampConfigChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampConfigChangedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampConfigChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampConfigChanged struct {
	Capacity *big.Int
	Rate     *big.Int
	Raw      types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterConfigChanged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampConfigChangedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "ConfigChanged")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampConfigChangedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "ConfigChanged", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchConfigChanged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampConfigChanged) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "ConfigChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampConfigChanged)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "ConfigChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseConfigChanged(log types.Log) (*EVM2EVMSubscriptionOnRampConfigChanged, error) {
	event := new(EVM2EVMSubscriptionOnRampConfigChanged)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "ConfigChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampFeeChargedIterator struct {
	Event *EVM2EVMSubscriptionOnRampFeeCharged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampFeeChargedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampFeeCharged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampFeeCharged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampFeeChargedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampFeeChargedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampFeeCharged struct {
	From common.Address
	To   common.Address
	Fee  *big.Int
	Raw  types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterFeeCharged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampFeeChargedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "FeeCharged")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampFeeChargedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "FeeCharged", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchFeeCharged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampFeeCharged) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "FeeCharged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampFeeCharged)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "FeeCharged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseFeeCharged(log types.Log) (*EVM2EVMSubscriptionOnRampFeeCharged, error) {
	event := new(EVM2EVMSubscriptionOnRampFeeCharged)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "FeeCharged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampFeesWithdrawnIterator struct {
	Event *EVM2EVMSubscriptionOnRampFeesWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampFeesWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampFeesWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampFeesWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampFeesWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampFeesWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampFeesWithdrawn struct {
	FeeToken  common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterFeesWithdrawn(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampFeesWithdrawnIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampFeesWithdrawnIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "FeesWithdrawn", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampFeesWithdrawn) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampFeesWithdrawn)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseFeesWithdrawn(log types.Log) (*EVM2EVMSubscriptionOnRampFeesWithdrawn, error) {
	event := new(EVM2EVMSubscriptionOnRampFeesWithdrawn)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampOnRampConfigSetIterator struct {
	Event *EVM2EVMSubscriptionOnRampOnRampConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampOnRampConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampOnRampConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampOnRampConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampOnRampConfigSetIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampOnRampConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampOnRampConfigSet struct {
	Config BaseOnRampInterfaceOnRampConfig
	Raw    types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterOnRampConfigSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampOnRampConfigSetIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "OnRampConfigSet")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampOnRampConfigSetIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "OnRampConfigSet", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchOnRampConfigSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOnRampConfigSet) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "OnRampConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampOnRampConfigSet)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OnRampConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseOnRampConfigSet(log types.Log) (*EVM2EVMSubscriptionOnRampOnRampConfigSet, error) {
	event := new(EVM2EVMSubscriptionOnRampOnRampConfigSet)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OnRampConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator struct {
	Event *EVM2EVMSubscriptionOnRampOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampOwnershipTransferRequested)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseOwnershipTransferRequested(log types.Log) (*EVM2EVMSubscriptionOnRampOwnershipTransferRequested, error) {
	event := new(EVM2EVMSubscriptionOnRampOwnershipTransferRequested)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampOwnershipTransferredIterator struct {
	Event *EVM2EVMSubscriptionOnRampOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EVM2EVMSubscriptionOnRampOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampOwnershipTransferredIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampOwnershipTransferred)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseOwnershipTransferred(log types.Log) (*EVM2EVMSubscriptionOnRampOwnershipTransferred, error) {
	event := new(EVM2EVMSubscriptionOnRampOwnershipTransferred)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampPausedIterator struct {
	Event *EVM2EVMSubscriptionOnRampPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampPausedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterPaused(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPausedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampPausedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPaused) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampPaused)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParsePaused(log types.Log) (*EVM2EVMSubscriptionOnRampPaused, error) {
	event := new(EVM2EVMSubscriptionOnRampPaused)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampPoolAddedIterator struct {
	Event *EVM2EVMSubscriptionOnRampPoolAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampPoolAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampPoolAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampPoolAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampPoolAddedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampPoolAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampPoolAdded struct {
	Token common.Address
	Pool  common.Address
	Raw   types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterPoolAdded(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPoolAddedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "PoolAdded")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampPoolAddedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "PoolAdded", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchPoolAdded(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPoolAdded) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "PoolAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampPoolAdded)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "PoolAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParsePoolAdded(log types.Log) (*EVM2EVMSubscriptionOnRampPoolAdded, error) {
	event := new(EVM2EVMSubscriptionOnRampPoolAdded)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "PoolAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampPoolRemovedIterator struct {
	Event *EVM2EVMSubscriptionOnRampPoolRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampPoolRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampPoolRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampPoolRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampPoolRemovedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampPoolRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampPoolRemoved struct {
	Token common.Address
	Pool  common.Address
	Raw   types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterPoolRemoved(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPoolRemovedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "PoolRemoved")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampPoolRemovedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "PoolRemoved", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchPoolRemoved(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPoolRemoved) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "PoolRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampPoolRemoved)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "PoolRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParsePoolRemoved(log types.Log) (*EVM2EVMSubscriptionOnRampPoolRemoved, error) {
	event := new(EVM2EVMSubscriptionOnRampPoolRemoved)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "PoolRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampRouterSetIterator struct {
	Event *EVM2EVMSubscriptionOnRampRouterSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampRouterSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampRouterSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampRouterSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampRouterSetIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampRouterSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampRouterSet struct {
	Router common.Address
	Raw    types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterRouterSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampRouterSetIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "RouterSet")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampRouterSetIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "RouterSet", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchRouterSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampRouterSet) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "RouterSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampRouterSet)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "RouterSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseRouterSet(log types.Log) (*EVM2EVMSubscriptionOnRampRouterSet, error) {
	event := new(EVM2EVMSubscriptionOnRampRouterSet)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "RouterSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampTokenPriceChangedIterator struct {
	Event *EVM2EVMSubscriptionOnRampTokenPriceChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampTokenPriceChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampTokenPriceChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampTokenPriceChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampTokenPriceChangedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampTokenPriceChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampTokenPriceChanged struct {
	Token    common.Address
	NewPrice *big.Int
	Raw      types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterTokenPriceChanged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampTokenPriceChangedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "TokenPriceChanged")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampTokenPriceChangedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "TokenPriceChanged", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchTokenPriceChanged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampTokenPriceChanged) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "TokenPriceChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampTokenPriceChanged)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "TokenPriceChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseTokenPriceChanged(log types.Log) (*EVM2EVMSubscriptionOnRampTokenPriceChanged, error) {
	event := new(EVM2EVMSubscriptionOnRampTokenPriceChanged)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "TokenPriceChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator struct {
	Event *EVM2EVMSubscriptionOnRampTokensRemovedFromBucket

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampTokensRemovedFromBucket)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampTokensRemovedFromBucket)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampTokensRemovedFromBucket struct {
	Tokens *big.Int
	Raw    types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterTokensRemovedFromBucket(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "TokensRemovedFromBucket")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "TokensRemovedFromBucket", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchTokensRemovedFromBucket(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampTokensRemovedFromBucket) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "TokensRemovedFromBucket")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampTokensRemovedFromBucket)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "TokensRemovedFromBucket", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseTokensRemovedFromBucket(log types.Log) (*EVM2EVMSubscriptionOnRampTokensRemovedFromBucket, error) {
	event := new(EVM2EVMSubscriptionOnRampTokensRemovedFromBucket)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "TokensRemovedFromBucket", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampUnpausedIterator struct {
	Event *EVM2EVMSubscriptionOnRampUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampUnpausedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterUnpaused(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampUnpausedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampUnpausedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampUnpaused) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampUnpaused)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseUnpaused(log types.Log) (*EVM2EVMSubscriptionOnRampUnpaused, error) {
	event := new(EVM2EVMSubscriptionOnRampUnpaused)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRamp) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _EVM2EVMSubscriptionOnRamp.abi.Events["AFNSet"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseAFNSet(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["AllowListEnabledSet"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseAllowListEnabledSet(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["AllowListSet"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseAllowListSet(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["CCIPSendRequested"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseCCIPSendRequested(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["ConfigChanged"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseConfigChanged(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["FeeCharged"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseFeeCharged(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["FeesWithdrawn"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseFeesWithdrawn(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["OnRampConfigSet"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseOnRampConfigSet(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["OwnershipTransferRequested"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseOwnershipTransferRequested(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["OwnershipTransferred"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseOwnershipTransferred(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["Paused"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParsePaused(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["PoolAdded"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParsePoolAdded(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["PoolRemoved"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParsePoolRemoved(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["RouterSet"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseRouterSet(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["TokenPriceChanged"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseTokenPriceChanged(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["TokensRemovedFromBucket"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseTokensRemovedFromBucket(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["Unpaused"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (EVM2EVMSubscriptionOnRampAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (EVM2EVMSubscriptionOnRampAllowListEnabledSet) Topic() common.Hash {
	return common.HexToHash("0xccf4daf6ab6430389f26b970595dab82a5881ad454770907e415ede27c8df032")
}

func (EVM2EVMSubscriptionOnRampAllowListSet) Topic() common.Hash {
	return common.HexToHash("0xf8adc5fee247b62a85f63294cb46e4be61da815e4756bc57672a83b24faf0dda")
}

func (EVM2EVMSubscriptionOnRampCCIPSendRequested) Topic() common.Hash {
	return common.HexToHash("0x73dfb9df8214728e699dbaaf6ba97aa125afaaba83a5d0de7903062e7c5b3139")
}

func (EVM2EVMSubscriptionOnRampConfigChanged) Topic() common.Hash {
	return common.HexToHash("0x8e012bd57e8109fb3513158da3ff482a86a1e3ff4d5be099be0945772547322d")
}

func (EVM2EVMSubscriptionOnRampFeeCharged) Topic() common.Hash {
	return common.HexToHash("0x945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d")
}

func (EVM2EVMSubscriptionOnRampFeesWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa8")
}

func (EVM2EVMSubscriptionOnRampOnRampConfigSet) Topic() common.Hash {
	return common.HexToHash("0xcc6ce9e57c1de2adf58a81e94b96b43d77ea6973e3f08e6ea4fe83d62ae60e9e")
}

func (EVM2EVMSubscriptionOnRampOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (EVM2EVMSubscriptionOnRampOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (EVM2EVMSubscriptionOnRampPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (EVM2EVMSubscriptionOnRampPoolAdded) Topic() common.Hash {
	return common.HexToHash("0x95f865c2808f8b2a85eea2611db7843150ee7835ef1403f9755918a97d76933c")
}

func (EVM2EVMSubscriptionOnRampPoolRemoved) Topic() common.Hash {
	return common.HexToHash("0x987eb3c2f78454541205f72f34839b434c306c9eaf4922efd7c0c3060fdb2e4c")
}

func (EVM2EVMSubscriptionOnRampRouterSet) Topic() common.Hash {
	return common.HexToHash("0xc6b438e6a8a59579ce6a4406cbd203b740e0d47b458aae6596339bcd40c40d15")
}

func (EVM2EVMSubscriptionOnRampTokenPriceChanged) Topic() common.Hash {
	return common.HexToHash("0x4cd172fb90d81a44670b97a6e2a5a3b01417f33a809b634a5a1764e93d338e1f")
}

func (EVM2EVMSubscriptionOnRampTokensRemovedFromBucket) Topic() common.Hash {
	return common.HexToHash("0xcecaabdf078137e9f3ffad598f679665628d62e269c3d929bd10fef8a22ba378")
}

func (EVM2EVMSubscriptionOnRampUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRamp) Address() common.Address {
	return _EVM2EVMSubscriptionOnRamp.address
}

type EVM2EVMSubscriptionOnRampInterface interface {
	CalculateCurrentTokenBucketState(opts *bind.CallOpts) (AggregateRateLimiterInterfaceTokenBucket, error)

	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetAllowlist(opts *bind.CallOpts) ([]common.Address, error)

	GetAllowlistEnabled(opts *bind.CallOpts) (bool, error)

	GetConfig(opts *bind.CallOpts) (BaseOnRampInterfaceOnRampConfig, error)

	GetDestinationToken(opts *bind.CallOpts, sourceToken common.Address) (common.Address, error)

	GetDestinationTokens(opts *bind.CallOpts) ([]common.Address, error)

	GetExpectedNextSequenceNumber(opts *bind.CallOpts) (uint64, error)

	GetPool(opts *bind.CallOpts, sourceToken common.Address) (common.Address, error)

	GetPoolTokens(opts *bind.CallOpts) ([]common.Address, error)

	GetPricesForTokens(opts *bind.CallOpts, tokens []common.Address) ([]*big.Int, error)

	GetRouter(opts *bind.CallOpts) (common.Address, error)

	GetTokenLimitAdmin(opts *bind.CallOpts) (common.Address, error)

	GetTokenPool(opts *bind.CallOpts, token common.Address) (common.Address, error)

	IChainId(opts *bind.CallOpts) (*big.Int, error)

	IDestinationChainId(opts *bind.CallOpts) (*big.Int, error)

	IsAFNHealthy(opts *bind.CallOpts) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddPool(opts *bind.TransactOpts, token common.Address, pool common.Address) (*types.Transaction, error)

	ForwardFromRouter(opts *bind.TransactOpts, message CCIPEVM2AnySubscriptionMessage, originalSender common.Address) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	RemovePool(opts *bind.TransactOpts, token common.Address, pool common.Address) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetAllowlist(opts *bind.TransactOpts, allowlist []common.Address) (*types.Transaction, error)

	SetAllowlistEnabled(opts *bind.TransactOpts, enabled bool) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, config BaseOnRampInterfaceOnRampConfig) (*types.Transaction, error)

	SetPrices(opts *bind.TransactOpts, tokens []common.Address, prices []*big.Int) (*types.Transaction, error)

	SetRateLimiterConfig(opts *bind.TransactOpts, config AggregateRateLimiterInterfaceRateLimiterConfig) (*types.Transaction, error)

	SetRouter(opts *bind.TransactOpts, router common.Address) (*types.Transaction, error)

	SetTokenLimitAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	FilterAFNSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*EVM2EVMSubscriptionOnRampAFNSet, error)

	FilterAllowListEnabledSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator, error)

	WatchAllowListEnabledSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAllowListEnabledSet) (event.Subscription, error)

	ParseAllowListEnabledSet(log types.Log) (*EVM2EVMSubscriptionOnRampAllowListEnabledSet, error)

	FilterAllowListSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAllowListSetIterator, error)

	WatchAllowListSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAllowListSet) (event.Subscription, error)

	ParseAllowListSet(log types.Log) (*EVM2EVMSubscriptionOnRampAllowListSet, error)

	FilterCCIPSendRequested(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator, error)

	WatchCCIPSendRequested(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampCCIPSendRequested) (event.Subscription, error)

	ParseCCIPSendRequested(log types.Log) (*EVM2EVMSubscriptionOnRampCCIPSendRequested, error)

	FilterConfigChanged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampConfigChangedIterator, error)

	WatchConfigChanged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampConfigChanged) (event.Subscription, error)

	ParseConfigChanged(log types.Log) (*EVM2EVMSubscriptionOnRampConfigChanged, error)

	FilterFeeCharged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampFeeChargedIterator, error)

	WatchFeeCharged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampFeeCharged) (event.Subscription, error)

	ParseFeeCharged(log types.Log) (*EVM2EVMSubscriptionOnRampFeeCharged, error)

	FilterFeesWithdrawn(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampFeesWithdrawnIterator, error)

	WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampFeesWithdrawn) (event.Subscription, error)

	ParseFeesWithdrawn(log types.Log) (*EVM2EVMSubscriptionOnRampFeesWithdrawn, error)

	FilterOnRampConfigSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampOnRampConfigSetIterator, error)

	WatchOnRampConfigSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOnRampConfigSet) (event.Subscription, error)

	ParseOnRampConfigSet(log types.Log) (*EVM2EVMSubscriptionOnRampOnRampConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*EVM2EVMSubscriptionOnRampOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EVM2EVMSubscriptionOnRampOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*EVM2EVMSubscriptionOnRampOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*EVM2EVMSubscriptionOnRampPaused, error)

	FilterPoolAdded(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPoolAddedIterator, error)

	WatchPoolAdded(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPoolAdded) (event.Subscription, error)

	ParsePoolAdded(log types.Log) (*EVM2EVMSubscriptionOnRampPoolAdded, error)

	FilterPoolRemoved(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPoolRemovedIterator, error)

	WatchPoolRemoved(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPoolRemoved) (event.Subscription, error)

	ParsePoolRemoved(log types.Log) (*EVM2EVMSubscriptionOnRampPoolRemoved, error)

	FilterRouterSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampRouterSetIterator, error)

	WatchRouterSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampRouterSet) (event.Subscription, error)

	ParseRouterSet(log types.Log) (*EVM2EVMSubscriptionOnRampRouterSet, error)

	FilterTokenPriceChanged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampTokenPriceChangedIterator, error)

	WatchTokenPriceChanged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampTokenPriceChanged) (event.Subscription, error)

	ParseTokenPriceChanged(log types.Log) (*EVM2EVMSubscriptionOnRampTokenPriceChanged, error)

	FilterTokensRemovedFromBucket(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator, error)

	WatchTokensRemovedFromBucket(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampTokensRemovedFromBucket) (event.Subscription, error)

	ParseTokensRemovedFromBucket(log types.Log) (*EVM2EVMSubscriptionOnRampTokensRemovedFromBucket, error)

	FilterUnpaused(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*EVM2EVMSubscriptionOnRampUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

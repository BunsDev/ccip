// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package single_token_offramp_helper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type CCIPMessage struct {
	SequenceNumber     *big.Int
	SourceChainId      *big.Int
	DestinationChainId *big.Int
	Sender             common.Address
	Payload            CCIPMessagePayload
}

type CCIPMessagePayload struct {
	Receiver common.Address
	Data     []byte
	Tokens   []common.Address
	Amounts  []*big.Int
	Executor common.Address
	Options  []byte
}

type CCIPRelayReport struct {
	MerkleRoot        [32]byte
	MinSequenceNumber *big.Int
	MaxSequenceNumber *big.Int
}

type TokenLimitsTokenBucket struct {
	Rate        *big.Int
	Capacity    *big.Int
	Tokens      *big.Int
	LastUpdated *big.Int
}

var SingleTokenOffRampHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contractPoolInterface\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBucketRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBucketCapacity\",\"type\":\"uint256\"},{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeWithoutAFNSignal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionDelaySeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"AFNMaxHeartbeatTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"encodedConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"}],\"name\":\"CrossChainMessageExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"ExecutionDelaySecondsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"full\",\"type\":\"bool\"}],\"name\":\"NewTokenBucketConstructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minSequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSequenceNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contractPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOURCE_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"full\",\"type\":\"bool\"}],\"name\":\"configureTokenBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"structCCIP.MessagePayload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"internalType\":\"structCCIP.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"generateMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"}],\"name\":\"getExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExecutionDelaySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastReport\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minSequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSequenceNumber\",\"type\":\"uint256\"}],\"internalType\":\"structCCIP.RelayReport\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSecondsWithoutAFNHeartbeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBucket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"structTokenLimits.TokenBucket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"merkle\",\"type\":\"bytes\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"executionDelaySeconds\",\"type\":\"uint256\"}],\"name\":\"setExecutionDelaySeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setMaxSecondsWithoutAFNHeartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101206040523480156200001257600080fd5b50604051620042953803806200429583398101604081905262000035916200039f565b6000805460ff19168155899089908990899089908990899089908990600190849084903390819081620000af5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0380851661010002610100600160a81b031990921691909117909155811615620000e957620000e98162000260565b5050506001600160a01b038216158062000101575080155b156200012057604051630958ef9b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0393841617905560035590151560f81b608052604080516321df0da760e01b81529051898316928916916321df0da7916004808301926020929190829003018186803b1580156200018557600080fd5b505afa1580156200019a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c0919062000378565b6001600160a01b031614620001e85760405163936bb5ad60e01b815260040160405180910390fd5b60a089905260c0889052606087811b6001600160601b0319908116610100529087901b1660e052620002298585600162000312602090811b620021f717901c565b80516010556020810151601155604081015160125560600151601355600c5550620004489f50505050505050505050505050505050565b6001600160a01b038116331415620002bb5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401620000a6565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6200033e6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000826200034e57600062000350565b835b6040805160808101825296875260208701959095529385019390935250504260608301525090565b6000602082840312156200038b57600080fd5b815162000398816200042f565b9392505050565b60008060008060008060008060006101208a8c031215620003bf57600080fd5b8951985060208a0151975060408a0151620003da816200042f565b60608b0151909750620003ed816200042f565b8096505060808a0151945060a08a0151935060c08a01516200040f816200042f565b8093505060e08a015191506101008a015190509295985092959850929598565b6001600160a01b03811681146200044557600080fd5b50565b60805160f81c60a05160c05160e05160601c6101005160601c613ddc620004b96000396000818161038e015281816129880152612af101526000818161031a015281816116070152612a93015260006103bd0152600081816102f301526128c901526000610aea0152613ddc6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806382bfefc811610104578063b1dc65a4116100a2578063dc53c76e11610071578063dc53c76e146104b1578063e3d0e712146104c4578063eefa7a3e146104d7578063f2fde38b1461052d57600080fd5b8063b1dc65a414610465578063b576716614610478578063b6608c3b1461048b578063c15d605b1461049e57600080fd5b80638da5cb5b116100de5780638da5cb5b146103df5780639504c51914610402578063a7206cd61461043d578063b034909c1461045d57600080fd5b806382bfefc8146103895780638456cb59146103b057806385e1f4d0146103b857600080fd5b80633f4ba83a116101715780637535d2461161014b5780637535d2461461031557806379ba50971461033c578063814118341461034457806381ff70481461035957600080fd5b80633f4ba83a146102db5780635c975abb146102e357806374be2150146102ee57600080fd5b80631a830a1e116101ad5780631a830a1e1461024457806321947507146102565780632222dd42146102895780633a6dcd3e146102c857600080fd5b80630b514037146101d4578063108ee5fc146101e9578063181f5a77146101fc575b600080fd5b6101e76101e2366004613570565b610540565b005b6101e76101f736600461311b565b6105b5565b604080518082018252601881527f53696e676c65546f6b656e4f666652616d7020312e312e3000000000000000006020820152905161023b919061389e565b60405180910390f35b600c545b60405190815260200161023b565b6102796102643660046134de565b6000908152600b602052604090205460ff1690565b604051901515815260200161023b565b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161023b565b6102486102d63660046132ea565b610691565b6101e76107a2565b60005460ff16610279565b6102487f000000000000000000000000000000000000000000000000000000000000000081565b6102a37f000000000000000000000000000000000000000000000000000000000000000081565b6101e76107b4565b61034c6108db565b60405161023b919061382c565b6006546004546040805163ffffffff8085168252640100000000909404909316602084015282015260600161023b565b6102a37f000000000000000000000000000000000000000000000000000000000000000081565b6101e761094a565b6102487f000000000000000000000000000000000000000000000000000000000000000081565b600054610100900473ffffffffffffffffffffffffffffffffffffffff166102a3565b61040a61095a565b60405161023b91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61024861044b3660046134de565b6000908152600a602052604090205490565b600354610248565b6101e7610473366004613205565b6109b2565b6101e76104863660046134f7565b611056565b6101e76104993660046134de565b611065565b6101e76104ac3660046134de565b6110e2565b6101e76104bf366004613338565b611125565b6101e76104d2366004613138565b611801565b6040805160608082018352600080835260208084018290529284015282518082018452600d54808252600e54828501908152600f549286019283528551918252519381019390935251928201929092520161023b565b6101e761053b36600461311b565b6121e6565b61054861225a565b6105538383836121f7565b80516010556020808201516011556040808301516012556060928301516013558051868152918201859052831515908201527ffaf3310019e551542b5c6014c1ae13e2a8d3943d7611d779c4df9b36c111924f910160405180910390a1505050565b6105bd61225a565b73ffffffffffffffffffffffffffffffffffffffff811661060a576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd2891015b60405180910390a15050565b600082815b85518110156107995760008682815181106106b3576106b3613d41565b602002602001015190506002856106ca9190613c42565b610725576040517f010000000000000000000000000000000000000000000000000000000000000060208201526021810184905260418101829052606101604051602081830303815290604052805190602001209250610778565b6040517f0100000000000000000000000000000000000000000000000000000000000000602082015260218101829052604181018490526061016040516020818303038152906040528051906020012092505b610783600286613b4f565b945050808061079190613c09565b915050610696565b50949350505050565b6107aa61225a565b6107b26122e0565b565b60015473ffffffffffffffffffffffffffffffffffffffff16331461083a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054336101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8416178455600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560405173ffffffffffffffffffffffffffffffffffffffff919093041692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6060600980548060200260200160405190810160405280929190818152602001828054801561094057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610915575b5050505050905090565b61095261225a565b6107b26123c1565b6109856040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526010548152601154602082015260125491810191909152601354606082015290565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c013591610a029184918491908e908e908190840183828082843760009201919091525061248192505050565b6040805183815263ffffffff600884901c1660208201527fd78f2a94a6a9ba96eb1197c7833ce19ec0fef80881049b0bd8ced9ee533739e3910160405180910390a16040805160608101825260045480825260055460ff80821660208501526101009091041692820192909252908314610ad8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f636f6e666967446967657374206d69736d6174636800000000000000000000006044820152606401610831565b610ae68b8b8b8b8b8b612810565b60007f000000000000000000000000000000000000000000000000000000000000000015610b4357600282602001518360400151610b249190613b2a565b610b2e9190613b63565b610b39906001613b2a565b60ff169050610b59565b6020820151610b53906001613b2a565b60ff1690505b888114610bc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e6174757265730000000000006044820152606401610831565b888714610c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e00006044820152606401610831565b3360009081526007602090815260408083208151808301909252805460ff80821684529293919291840191610100909104166002811115610c6e57610c6e613ce3565b6002811115610c7f57610c7f613ce3565b9052509050600281602001516002811115610c9c57610c9c613ce3565b148015610ce357506009816000015160ff1681548110610cbe57610cbe613d41565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b610d49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f756e617574686f72697a6564207472616e736d697474657200000000000000006044820152606401610831565b505050505060008888604051610d6092919061381c565b604051908190038120610d77918c90602001613800565b604051602081830303815290604052805190602001209050610d97612ea5565b604080518082019091526000808252602082015260005b88811015611034576000600185888460208110610dcd57610dcd613d41565b610dda91901a601b613b2a565b8d8d86818110610dec57610dec613d41565b905060200201358c8c87818110610e0557610e05613d41565b9050602002013560405160008152602001604052604051610e42949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610e64573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff811660009081526007602090815290849020838501909452835460ff80821685529296509294508401916101009004166002811115610ee457610ee4613ce3565b6002811115610ef557610ef5613ce3565b9052509250600183602001516002811115610f1257610f12613ce3565b14610f79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e00006044820152606401610831565b8251849060ff16601f8110610f9057610f90613d41565b602002015115610ffc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f6e2d756e69717565207369676e61747572650000000000000000000000006044820152606401610831565b600184846000015160ff16601f811061101757611017613d41565b91151560209092020152508061102c81613c09565b915050610dae565b5050505063ffffffff811061104b5761104b613c56565b505050505050505050565b61106260008083612481565b50565b61106d61225a565b806110a4576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380549082905560408051828152602081018490527f72e72b3dfd44fb4d803f52b2d895c7347b912da657d0f77599a0afc26956c2519101610685565b6110ea61225a565b600c8190556040518181527ffbb92e09fd0b7bcabafe655657e745c10bcd9812c1e32e205e477a3c5ff74fc09060200160405180910390a150565b60005460ff1615611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610831565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf72b39b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156111fc57600080fd5b505af1158015611210573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123491906134c1565b1561126a576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254604080517f343157b4000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163343157b491600480830192606092919082900301818787803b1580156112d657600080fd5b505af11580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e9190613534565b90506003548160200151426113239190613bc2565b111561135b576040517fa8c8866900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060f81b8460405160200161137291906138b1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526113ae92916020016137b8565b60405160208183030381529060405280519060200120905060006113d3868386610691565b6000818152600a602052604090205490915080611422578686866040517f31ec415c0000000000000000000000000000000000000000000000000000000081526004016108319392919061383f565b42600c54826114319190613aea565b10611468576040517f15c33ba200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516000908152600b602052604090205460ff16156114b95785516040517f6a64e9610000000000000000000000000000000000000000000000000000000081526004810191909152602401610831565b608080870151015173ffffffffffffffffffffffffffffffffffffffff16158015906115025750608080870151015173ffffffffffffffffffffffffffffffffffffffff163314155b1561153f5785516040517fd8e90b980000000000000000000000000000000000000000000000000000000081526004810191909152602401610831565b611548866128c7565b61155186612a6d565b85516000908152600b6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055608087015160600151805182906115a3576115a3613d41565b602002602001015190506115c1816010612bc290919063ffffffff16565b611605576012546040517f331220f7000000000000000000000000000000000000000000000000000000008152600481019190915260248101829052604401610831565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ea6192a288608001516000015189608001516060015160008151811061166557611665613d41565b60200260200101516040518363ffffffff1660e01b81526004016116ab92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060405180830381600087803b1580156116c557600080fd5b505af11580156116d9573d6000803e3d6000fd5b5050506080880151516040517f3a56bb7100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169150633a56bb7190611736908a906004016138b1565b600060405180830381600087803b15801561175057600080fd5b505af1925050508015611761575060015b6117cc573d80801561178f576040519150601f19603f3d011682016040523d82523d6000602084013e611794565b606091505b5087516040517f6a3fd4f200000000000000000000000000000000000000000000000000000000815261083191908390600401613969565b86516040517fc51bf0f6d90b467e0849da0ad18a4d9144a4b78b9f83202e1c65cd68f72d4a3890600090a25050505050505050565b855185518560ff16601f831115611874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e657273000000000000000000000000000000006044820152606401610831565b600081116118de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610831565b81831461196c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e000000000000000000000000000000000000000000000000000000006064820152608401610831565b611977816003613b85565b83116119df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610831565b6119e761225a565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b60085415611bda57600854600090611a3f90600190613bc2565b9050600060088281548110611a5657611a56613d41565b60009182526020822001546009805473ffffffffffffffffffffffffffffffffffffffff90921693509084908110611a9057611a90613d41565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff85811684526007909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811690915592909116808452922080549091169055600880549192509080611b1057611b10613d12565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190556009805480611b7957611b79613d12565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550611a25915050565b60005b8151518110156120415760006007600084600001518481518110611c0357611c03613d41565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115611c4d57611c4d613ce3565b14611cb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610831565b6040805180820190915260ff82168152600160208201528251805160079160009185908110611ce557611ce5613d41565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611d8657611d86613ce3565b021790555060009150611d969050565b6007600084602001518481518110611db057611db0613d41565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115611dfa57611dfa613ce3565b14611e61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610831565b6040805180820190915260ff821681526020810160028152506007600084602001518481518110611e9457611e94613d41565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611f3557611f35613ce3565b021790555050825180516008925083908110611f5357611f53613d41565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921790915582015180516009919083908110611fcf57611fcf613d41565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790558061203981613c09565b915050611bdd565b506040810151600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600680547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff4381168202928317855590830481169360019390926000926120d3928692908216911617613b02565b92506101000a81548163ffffffff021916908363ffffffff1602179055506121324630600660009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a00151612c05565b6004819055825180516005805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560065460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05986121d1988b98919763ffffffff909216969095919491939192613982565b60405180910390a15050505050505050505050565b6121ee61225a565b61106281612cb0565b6122226040518060800160405280600081526020016000815260200160008152602001600081525090565b600082612230576000612232565b835b6040805160808101825296875260208701959095529385019390935250504260608301525090565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1633146107b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610831565b60005460ff1661234c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610831565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005460ff161561242e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610831565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123973390565b60005460ff16156124ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610831565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf72b39b6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561255857600080fd5b505af115801561256c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259091906134c1565b156125c6576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254604080517f343157b4000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163343157b491600480830192606092919082900301818787803b15801561263257600080fd5b505af1158015612646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266a9190613534565b905060035481602001514261267f9190613bc2565b11156126b7576040517fa8c8866900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828060200190518101906126cd9190613534565b9050806040015181602001511115612711576040517f67a3824c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606081018252600d54808252600e546020830152600f5492820192909252901561279a576040810151612749906001613aea565b82602001511461279a57806040015182602001516040517fcc7f1bd0000000000000000000000000000000000000000000000000000000008152600401610831929190918252602082015260400190565b81516000908152600a60209081526040918290204290558351600d8190558185018051600e558386018051600f55845192835290519282019290925290518183015290517f07d7bce06be2a7b0230e4dd0d72523c0407e82419ab1d947c5ddaf59ca36484e9181900360600190a1505050505050565b600061281d826020613b85565b612828856020613b85565b61283488610144613aea565b61283e9190613aea565b6128489190613aea565b612853906000613aea565b90503681146128be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d6174636800000000000000006044820152606401610831565b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081602001511461292c5780602001516040517fd44bc9eb00000000000000000000000000000000000000000000000000000000815260040161083191815260200190565b80608001516040015151600114158061294f575080608001516060015151600114155b15612986576040517f4c056b6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168160800151604001516000815181106129d8576129d8613d41565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461106257806080015160400151600081518110612a1657612a16613d41565b60200260200101516040517fbf16aab6000000000000000000000000000000000000000000000000000000008152600401610831919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60808101515173ffffffffffffffffffffffffffffffffffffffff16301480612ae957507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681608001516000015173ffffffffffffffffffffffffffffffffffffffff16145b80612b4757507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681608001516000015173ffffffffffffffffffffffffffffffffffffffff16145b80612b6c575060808101515173ffffffffffffffffffffffffffffffffffffffff163b155b15611062576080810151516040517f9cfea58300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401610831565b6000612bcd83612dac565b8183600201541015612be157506000612bff565b81836002016000828254612bf59190613bc2565b9091555060019150505b92915050565b6000808a8a8a8a8a8a8a8a8a604051602001612c29999897969594939291906138c4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116331415612d30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610831565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b806001015481600201541115612dee576040517f9725942a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001015481600201541415612e015750565b60038101544290811015612e41576040517ff01f197500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826003015482612e539190613bc2565b60018401548454919250612e7f91612e6b9084613b85565b8560020154612e7a9190613aea565b612e8d565b600284015550600390910155565b6000818310612e9c5781612e9e565b825b9392505050565b604051806103e00160405280601f906020820280368337509192915050565b8035612ecf81613d9f565b919050565b600082601f830112612ee557600080fd5b81356020612efa612ef583613ac6565b613a77565b80838252828201915082860187848660051b8901011115612f1a57600080fd5b60005b85811015612f42578135612f3081613d9f565b84529284019290840190600101612f1d565b5090979650505050505050565b60008083601f840112612f6157600080fd5b50813567ffffffffffffffff811115612f7957600080fd5b6020830191508360208260051b8501011115612f9457600080fd5b9250929050565b600082601f830112612fac57600080fd5b81356020612fbc612ef583613ac6565b80838252828201915082860187848660051b8901011115612fdc57600080fd5b60005b85811015612f4257813584529284019290840190600101612fdf565b600082601f83011261300c57600080fd5b8135602061301c612ef583613ac6565b80838252828201915082860187848660051b890101111561303c57600080fd5b60005b85811015612f4257813561305281613d9f565b8452928401929084019060010161303f565b600082601f83011261307557600080fd5b813567ffffffffffffffff81111561308f5761308f613d70565b6130c060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613a77565b8181528460208386010111156130d557600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff81168114612ecf57600080fd5b803560ff81168114612ecf57600080fd5b60006020828403121561312d57600080fd5b8135612e9e81613d9f565b60008060008060008060c0878903121561315157600080fd5b863567ffffffffffffffff8082111561316957600080fd5b6131758a838b01612ed4565b9750602089013591508082111561318b57600080fd5b6131978a838b01612ed4565b96506131a560408a0161310a565b955060608901359150808211156131bb57600080fd5b6131c78a838b01613064565b94506131d560808a016130f2565b935060a08901359150808211156131eb57600080fd5b506131f889828a01613064565b9150509295509295509295565b60008060008060008060008060e0898b03121561322157600080fd5b606089018a81111561323257600080fd5b8998503567ffffffffffffffff8082111561324c57600080fd5b818b0191508b601f83011261326057600080fd5b81358181111561326f57600080fd5b8c602082850101111561328157600080fd5b6020830199508098505060808b013591508082111561329f57600080fd5b6132ab8c838d01612f4f565b909750955060a08b01359150808211156132c457600080fd5b506132d18b828c01612f4f565b999c989b50969995989497949560c00135949350505050565b6000806000606084860312156132ff57600080fd5b833567ffffffffffffffff81111561331657600080fd5b61332286828701612f9b565b9660208601359650604090950135949350505050565b60008060006060848603121561334d57600080fd5b833567ffffffffffffffff8082111561336557600080fd5b61337187838801612f9b565b9450602086013591508082111561338757600080fd5b9085019060a0828803121561339b57600080fd5b6133a3613a08565b82358152602083013560208201526040830135604082015260608301356133c981613d9f565b60608201526080830135828111156133e057600080fd5b929092019160c083890312156133f557600080fd5b6133fd613a31565b61340684612ec4565b815260208401358381111561341a57600080fd5b6134268a828701613064565b60208301525060408401358381111561343e57600080fd5b61344a8a828701612ffb565b60408301525060608401358381111561346257600080fd5b61346e8a828701612f9b565b60608301525061348060808501612ec4565b608082015260a08401358381111561349757600080fd5b6134a38a828701613064565b60a08301525060808201529497949650505050604092909201359150565b6000602082840312156134d357600080fd5b8151612e9e81613dc1565b6000602082840312156134f057600080fd5b5035919050565b60006020828403121561350957600080fd5b813567ffffffffffffffff81111561352057600080fd5b61352c84828501613064565b949350505050565b60006060828403121561354657600080fd5b61354e613a54565b8251815260208301516020820152604083015160408201528091505092915050565b60008060006060848603121561358557600080fd5b8335925060208401359150604084013561359e81613dc1565b809150509250925092565b600081518084526020808501945080840160005b838110156135ef57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016135bd565b509495945050505050565b600081518084526020808501945080840160005b838110156135ef5781518752958201959082019060010161360e565b60008151808452613642816020860160208601613bd9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8051825260006020808301518185015260408301516040850152606083015173ffffffffffffffffffffffffffffffffffffffff80821660608701526080850151915060a060808701528082511660a08701528282015160c0808801526136df61016088018261362a565b60408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60898303810160e08b0152815180845291870193506000929091908701905b8084101561374557845186168252938701936001939093019290870190613723565b5060608601519650818a8203016101008b015261376281886135fa565b9650506080850151935061378f6101208a018573ffffffffffffffffffffffffffffffffffffffff169052565b60a0850151945080898703016101408a0152505050506137af828261362a565b95945050505050565b7fff0000000000000000000000000000000000000000000000000000000000000083168152600082516137f2816001850160208701613bd9565b919091016001019392505050565b8281526060826020830137600060809190910190815292915050565b8183823760009101908152919050565b602081526000612e9e60208301846135a9565b606080825284519082018190526000906020906080840190828801845b828110156138785781518452928401929084019060010161385c565b5050508381038285015261388c8187613674565b92505050826040830152949350505050565b602081526000612e9e602083018461362a565b602081526000612e9e6020830184613674565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b16604085015281606085015261390b8285018b6135a9565b9150838203608085015261391f828a6135a9565b915060ff881660a085015283820360c085015261393c828861362a565b90861660e08501528381036101008501529050613959818561362a565b9c9b505050505050505050505050565b82815260406020820152600061352c604083018461362a565b600061012063ffffffff808d1684528b6020850152808b166040850152508060608401526139b28184018a6135a9565b905082810360808401526139c681896135a9565b905060ff871660a084015282810360c08401526139e3818761362a565b905067ffffffffffffffff851660e0840152828103610100840152613959818561362a565b60405160a0810167ffffffffffffffff81118282101715613a2b57613a2b613d70565b60405290565b60405160c0810167ffffffffffffffff81118282101715613a2b57613a2b613d70565b6040516060810167ffffffffffffffff81118282101715613a2b57613a2b613d70565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613abe57613abe613d70565b604052919050565b600067ffffffffffffffff821115613ae057613ae0613d70565b5060051b60200190565b60008219821115613afd57613afd613c85565b500190565b600063ffffffff808316818516808303821115613b2157613b21613c85565b01949350505050565b600060ff821660ff84168060ff03821115613b4757613b47613c85565b019392505050565b600082613b5e57613b5e613cb4565b500490565b600060ff831680613b7657613b76613cb4565b8060ff84160491505092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613bbd57613bbd613c85565b500290565b600082821015613bd457613bd4613c85565b500390565b60005b83811015613bf4578181015183820152602001613bdc565b83811115613c03576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613c3b57613c3b613c85565b5060010190565b600082613c5157613c51613cb4565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461106257600080fd5b801515811461106257600080fdfea164736f6c6343000806000a",
}

var SingleTokenOffRampHelperABI = SingleTokenOffRampHelperMetaData.ABI

var SingleTokenOffRampHelperBin = SingleTokenOffRampHelperMetaData.Bin

func DeploySingleTokenOffRampHelper(auth *bind.TransactOpts, backend bind.ContractBackend, sourceChainId *big.Int, destinationChainId *big.Int, token common.Address, pool common.Address, tokenBucketRate *big.Int, tokenBucketCapacity *big.Int, afn common.Address, maxTimeWithoutAFNSignal *big.Int, executionDelaySeconds *big.Int) (common.Address, *types.Transaction, *SingleTokenOffRampHelper, error) {
	parsed, err := SingleTokenOffRampHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SingleTokenOffRampHelperBin), backend, sourceChainId, destinationChainId, token, pool, tokenBucketRate, tokenBucketCapacity, afn, maxTimeWithoutAFNSignal, executionDelaySeconds)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SingleTokenOffRampHelper{SingleTokenOffRampHelperCaller: SingleTokenOffRampHelperCaller{contract: contract}, SingleTokenOffRampHelperTransactor: SingleTokenOffRampHelperTransactor{contract: contract}, SingleTokenOffRampHelperFilterer: SingleTokenOffRampHelperFilterer{contract: contract}}, nil
}

type SingleTokenOffRampHelper struct {
	address common.Address
	abi     abi.ABI
	SingleTokenOffRampHelperCaller
	SingleTokenOffRampHelperTransactor
	SingleTokenOffRampHelperFilterer
}

type SingleTokenOffRampHelperCaller struct {
	contract *bind.BoundContract
}

type SingleTokenOffRampHelperTransactor struct {
	contract *bind.BoundContract
}

type SingleTokenOffRampHelperFilterer struct {
	contract *bind.BoundContract
}

type SingleTokenOffRampHelperSession struct {
	Contract     *SingleTokenOffRampHelper
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type SingleTokenOffRampHelperCallerSession struct {
	Contract *SingleTokenOffRampHelperCaller
	CallOpts bind.CallOpts
}

type SingleTokenOffRampHelperTransactorSession struct {
	Contract     *SingleTokenOffRampHelperTransactor
	TransactOpts bind.TransactOpts
}

type SingleTokenOffRampHelperRaw struct {
	Contract *SingleTokenOffRampHelper
}

type SingleTokenOffRampHelperCallerRaw struct {
	Contract *SingleTokenOffRampHelperCaller
}

type SingleTokenOffRampHelperTransactorRaw struct {
	Contract *SingleTokenOffRampHelperTransactor
}

func NewSingleTokenOffRampHelper(address common.Address, backend bind.ContractBackend) (*SingleTokenOffRampHelper, error) {
	abi, err := abi.JSON(strings.NewReader(SingleTokenOffRampHelperABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindSingleTokenOffRampHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelper{address: address, abi: abi, SingleTokenOffRampHelperCaller: SingleTokenOffRampHelperCaller{contract: contract}, SingleTokenOffRampHelperTransactor: SingleTokenOffRampHelperTransactor{contract: contract}, SingleTokenOffRampHelperFilterer: SingleTokenOffRampHelperFilterer{contract: contract}}, nil
}

func NewSingleTokenOffRampHelperCaller(address common.Address, caller bind.ContractCaller) (*SingleTokenOffRampHelperCaller, error) {
	contract, err := bindSingleTokenOffRampHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperCaller{contract: contract}, nil
}

func NewSingleTokenOffRampHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*SingleTokenOffRampHelperTransactor, error) {
	contract, err := bindSingleTokenOffRampHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperTransactor{contract: contract}, nil
}

func NewSingleTokenOffRampHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*SingleTokenOffRampHelperFilterer, error) {
	contract, err := bindSingleTokenOffRampHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperFilterer{contract: contract}, nil
}

func bindSingleTokenOffRampHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SingleTokenOffRampHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SingleTokenOffRampHelper.Contract.SingleTokenOffRampHelperCaller.contract.Call(opts, result, method, params...)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SingleTokenOffRampHelperTransactor.contract.Transfer(opts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SingleTokenOffRampHelperTransactor.contract.Transact(opts, method, params...)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SingleTokenOffRampHelper.Contract.contract.Call(opts, result, method, params...)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.contract.Transfer(opts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.contract.Transact(opts, method, params...)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) CHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) CHAINID() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.CHAINID(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) CHAINID() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.CHAINID(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) POOL() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.POOL(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) POOL() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.POOL(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) SOURCECHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "SOURCE_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) SOURCECHAINID() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.SOURCECHAINID(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) SOURCECHAINID() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.SOURCECHAINID(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) TOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) TOKEN() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.TOKEN(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) TOKEN() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.TOKEN(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GenerateMerkleRoot(opts *bind.CallOpts, proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "generateMerkleRoot", proof, leaf, index)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GenerateMerkleRoot(proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error) {
	return _SingleTokenOffRampHelper.Contract.GenerateMerkleRoot(&_SingleTokenOffRampHelper.CallOpts, proof, leaf, index)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GenerateMerkleRoot(proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error) {
	return _SingleTokenOffRampHelper.Contract.GenerateMerkleRoot(&_SingleTokenOffRampHelper.CallOpts, proof, leaf, index)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetAFN() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.GetAFN(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetAFN() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.GetAFN(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetExecuted(opts *bind.CallOpts, sequenceNumber *big.Int) (bool, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getExecuted", sequenceNumber)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetExecuted(sequenceNumber *big.Int) (bool, error) {
	return _SingleTokenOffRampHelper.Contract.GetExecuted(&_SingleTokenOffRampHelper.CallOpts, sequenceNumber)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetExecuted(sequenceNumber *big.Int) (bool, error) {
	return _SingleTokenOffRampHelper.Contract.GetExecuted(&_SingleTokenOffRampHelper.CallOpts, sequenceNumber)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetExecutionDelaySeconds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getExecutionDelaySeconds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetExecutionDelaySeconds() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetExecutionDelaySeconds(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetExecutionDelaySeconds() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetExecutionDelaySeconds(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetLastReport(opts *bind.CallOpts) (CCIPRelayReport, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getLastReport")

	if err != nil {
		return *new(CCIPRelayReport), err
	}

	out0 := *abi.ConvertType(out[0], new(CCIPRelayReport)).(*CCIPRelayReport)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetLastReport() (CCIPRelayReport, error) {
	return _SingleTokenOffRampHelper.Contract.GetLastReport(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetLastReport() (CCIPRelayReport, error) {
	return _SingleTokenOffRampHelper.Contract.GetLastReport(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetMaxSecondsWithoutAFNHeartbeat(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getMaxSecondsWithoutAFNHeartbeat")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetMaxSecondsWithoutAFNHeartbeat() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetMaxSecondsWithoutAFNHeartbeat() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetMerkleRoot(&_SingleTokenOffRampHelper.CallOpts, root)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetMerkleRoot(&_SingleTokenOffRampHelper.CallOpts, root)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetTokenBucket(opts *bind.CallOpts) (TokenLimitsTokenBucket, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getTokenBucket")

	if err != nil {
		return *new(TokenLimitsTokenBucket), err
	}

	out0 := *abi.ConvertType(out[0], new(TokenLimitsTokenBucket)).(*TokenLimitsTokenBucket)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetTokenBucket() (TokenLimitsTokenBucket, error) {
	return _SingleTokenOffRampHelper.Contract.GetTokenBucket(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetTokenBucket() (TokenLimitsTokenBucket, error) {
	return _SingleTokenOffRampHelper.Contract.GetTokenBucket(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _SingleTokenOffRampHelper.Contract.LatestConfigDetails(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _SingleTokenOffRampHelper.Contract.LatestConfigDetails(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Owner() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.Owner(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) Owner() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.Owner(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Paused() (bool, error) {
	return _SingleTokenOffRampHelper.Contract.Paused(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) Paused() (bool, error) {
	return _SingleTokenOffRampHelper.Contract.Paused(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Transmitters() ([]common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.Transmitters(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) Transmitters() ([]common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.Transmitters(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) TypeAndVersion() (string, error) {
	return _SingleTokenOffRampHelper.Contract.TypeAndVersion(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) TypeAndVersion() (string, error) {
	return _SingleTokenOffRampHelper.Contract.TypeAndVersion(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "acceptOwnership")
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) AcceptOwnership() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.AcceptOwnership(&_SingleTokenOffRampHelper.TransactOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.AcceptOwnership(&_SingleTokenOffRampHelper.TransactOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) ConfigureTokenBucket(opts *bind.TransactOpts, rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "configureTokenBucket", rate, capacity, full)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) ConfigureTokenBucket(rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.ConfigureTokenBucket(&_SingleTokenOffRampHelper.TransactOpts, rate, capacity, full)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) ConfigureTokenBucket(rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.ConfigureTokenBucket(&_SingleTokenOffRampHelper.TransactOpts, rate, capacity, full)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) ExecuteTransaction(opts *bind.TransactOpts, proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "executeTransaction", proof, message, index)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) ExecuteTransaction(proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.ExecuteTransaction(&_SingleTokenOffRampHelper.TransactOpts, proof, message, index)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) ExecuteTransaction(proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.ExecuteTransaction(&_SingleTokenOffRampHelper.TransactOpts, proof, message, index)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "pause")
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Pause() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Pause(&_SingleTokenOffRampHelper.TransactOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) Pause() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Pause(&_SingleTokenOffRampHelper.TransactOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) Report(opts *bind.TransactOpts, merkle []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "report", merkle)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Report(merkle []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Report(&_SingleTokenOffRampHelper.TransactOpts, merkle)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) Report(merkle []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Report(&_SingleTokenOffRampHelper.TransactOpts, merkle)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "setAFN", afn)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetAFN(&_SingleTokenOffRampHelper.TransactOpts, afn)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetAFN(&_SingleTokenOffRampHelper.TransactOpts, afn)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "setConfig", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetConfig(&_SingleTokenOffRampHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetConfig(&_SingleTokenOffRampHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) SetExecutionDelaySeconds(opts *bind.TransactOpts, executionDelaySeconds *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "setExecutionDelaySeconds", executionDelaySeconds)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) SetExecutionDelaySeconds(executionDelaySeconds *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetExecutionDelaySeconds(&_SingleTokenOffRampHelper.TransactOpts, executionDelaySeconds)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) SetExecutionDelaySeconds(executionDelaySeconds *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetExecutionDelaySeconds(&_SingleTokenOffRampHelper.TransactOpts, executionDelaySeconds)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) SetMaxSecondsWithoutAFNHeartbeat(opts *bind.TransactOpts, newTime *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "setMaxSecondsWithoutAFNHeartbeat", newTime)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) SetMaxSecondsWithoutAFNHeartbeat(newTime *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRampHelper.TransactOpts, newTime)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) SetMaxSecondsWithoutAFNHeartbeat(newTime *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRampHelper.TransactOpts, newTime)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "transferOwnership", to)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.TransferOwnership(&_SingleTokenOffRampHelper.TransactOpts, to)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.TransferOwnership(&_SingleTokenOffRampHelper.TransactOpts, to)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Transmit(&_SingleTokenOffRampHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Transmit(&_SingleTokenOffRampHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "unpause")
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Unpause() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Unpause(&_SingleTokenOffRampHelper.TransactOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) Unpause() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Unpause(&_SingleTokenOffRampHelper.TransactOpts)
}

type SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator struct {
	Event *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet struct {
	OldTime *big.Int
	NewTime *big.Int
	Raw     types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterAFNMaxHeartbeatTimeSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "AFNMaxHeartbeatTimeSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator{contract: _SingleTokenOffRampHelper.contract, event: "AFNMaxHeartbeatTimeSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchAFNMaxHeartbeatTimeSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "AFNMaxHeartbeatTimeSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "AFNMaxHeartbeatTimeSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseAFNMaxHeartbeatTimeSet(log types.Log) (*SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet, error) {
	event := new(SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "AFNMaxHeartbeatTimeSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperAFNSetIterator struct {
	Event *SingleTokenOffRampHelperAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperAFNSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterAFNSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperAFNSetIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperAFNSetIterator{contract: _SingleTokenOffRampHelper.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperAFNSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperAFNSet)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseAFNSet(log types.Log) (*SingleTokenOffRampHelperAFNSet, error) {
	event := new(SingleTokenOffRampHelperAFNSet)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperConfigSetIterator struct {
	Event *SingleTokenOffRampHelperConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperConfigSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	EncodedConfigVersion      uint64
	Encoded                   []byte
	Raw                       types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterConfigSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperConfigSetIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperConfigSetIterator{contract: _SingleTokenOffRampHelper.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperConfigSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperConfigSet)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseConfigSet(log types.Log) (*SingleTokenOffRampHelperConfigSet, error) {
	event := new(SingleTokenOffRampHelperConfigSet)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperCrossChainMessageExecutedIterator struct {
	Event *SingleTokenOffRampHelperCrossChainMessageExecuted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperCrossChainMessageExecutedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperCrossChainMessageExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperCrossChainMessageExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperCrossChainMessageExecutedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperCrossChainMessageExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperCrossChainMessageExecuted struct {
	SequenceNumber *big.Int
	Raw            types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterCrossChainMessageExecuted(opts *bind.FilterOpts, sequenceNumber []*big.Int) (*SingleTokenOffRampHelperCrossChainMessageExecutedIterator, error) {

	var sequenceNumberRule []interface{}
	for _, sequenceNumberItem := range sequenceNumber {
		sequenceNumberRule = append(sequenceNumberRule, sequenceNumberItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "CrossChainMessageExecuted", sequenceNumberRule)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperCrossChainMessageExecutedIterator{contract: _SingleTokenOffRampHelper.contract, event: "CrossChainMessageExecuted", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchCrossChainMessageExecuted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperCrossChainMessageExecuted, sequenceNumber []*big.Int) (event.Subscription, error) {

	var sequenceNumberRule []interface{}
	for _, sequenceNumberItem := range sequenceNumber {
		sequenceNumberRule = append(sequenceNumberRule, sequenceNumberItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "CrossChainMessageExecuted", sequenceNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperCrossChainMessageExecuted)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "CrossChainMessageExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseCrossChainMessageExecuted(log types.Log) (*SingleTokenOffRampHelperCrossChainMessageExecuted, error) {
	event := new(SingleTokenOffRampHelperCrossChainMessageExecuted)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "CrossChainMessageExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperExecutionDelaySecondsSetIterator struct {
	Event *SingleTokenOffRampHelperExecutionDelaySecondsSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperExecutionDelaySecondsSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperExecutionDelaySecondsSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperExecutionDelaySecondsSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperExecutionDelaySecondsSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperExecutionDelaySecondsSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperExecutionDelaySecondsSet struct {
	Delay *big.Int
	Raw   types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterExecutionDelaySecondsSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperExecutionDelaySecondsSetIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "ExecutionDelaySecondsSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperExecutionDelaySecondsSetIterator{contract: _SingleTokenOffRampHelper.contract, event: "ExecutionDelaySecondsSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchExecutionDelaySecondsSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperExecutionDelaySecondsSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "ExecutionDelaySecondsSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperExecutionDelaySecondsSet)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ExecutionDelaySecondsSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseExecutionDelaySecondsSet(log types.Log) (*SingleTokenOffRampHelperExecutionDelaySecondsSet, error) {
	event := new(SingleTokenOffRampHelperExecutionDelaySecondsSet)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ExecutionDelaySecondsSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperNewTokenBucketConstructedIterator struct {
	Event *SingleTokenOffRampHelperNewTokenBucketConstructed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperNewTokenBucketConstructedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperNewTokenBucketConstructed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperNewTokenBucketConstructed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperNewTokenBucketConstructedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperNewTokenBucketConstructedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperNewTokenBucketConstructed struct {
	Rate     *big.Int
	Capacity *big.Int
	Full     bool
	Raw      types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterNewTokenBucketConstructed(opts *bind.FilterOpts) (*SingleTokenOffRampHelperNewTokenBucketConstructedIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "NewTokenBucketConstructed")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperNewTokenBucketConstructedIterator{contract: _SingleTokenOffRampHelper.contract, event: "NewTokenBucketConstructed", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchNewTokenBucketConstructed(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperNewTokenBucketConstructed) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "NewTokenBucketConstructed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperNewTokenBucketConstructed)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "NewTokenBucketConstructed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseNewTokenBucketConstructed(log types.Log) (*SingleTokenOffRampHelperNewTokenBucketConstructed, error) {
	event := new(SingleTokenOffRampHelperNewTokenBucketConstructed)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "NewTokenBucketConstructed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperOwnershipTransferRequestedIterator struct {
	Event *SingleTokenOffRampHelperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampHelperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperOwnershipTransferRequestedIterator{contract: _SingleTokenOffRampHelper.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperOwnershipTransferRequested)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseOwnershipTransferRequested(log types.Log) (*SingleTokenOffRampHelperOwnershipTransferRequested, error) {
	event := new(SingleTokenOffRampHelperOwnershipTransferRequested)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperOwnershipTransferredIterator struct {
	Event *SingleTokenOffRampHelperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampHelperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperOwnershipTransferredIterator{contract: _SingleTokenOffRampHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperOwnershipTransferred)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseOwnershipTransferred(log types.Log) (*SingleTokenOffRampHelperOwnershipTransferred, error) {
	event := new(SingleTokenOffRampHelperOwnershipTransferred)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperPausedIterator struct {
	Event *SingleTokenOffRampHelperPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperPausedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterPaused(opts *bind.FilterOpts) (*SingleTokenOffRampHelperPausedIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperPausedIterator{contract: _SingleTokenOffRampHelper.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperPaused) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperPaused)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParsePaused(log types.Log) (*SingleTokenOffRampHelperPaused, error) {
	event := new(SingleTokenOffRampHelperPaused)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperReportAcceptedIterator struct {
	Event *SingleTokenOffRampHelperReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperReportAccepted struct {
	Report CCIPRelayReport
	Raw    types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*SingleTokenOffRampHelperReportAcceptedIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperReportAcceptedIterator{contract: _SingleTokenOffRampHelper.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperReportAccepted) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperReportAccepted)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseReportAccepted(log types.Log) (*SingleTokenOffRampHelperReportAccepted, error) {
	event := new(SingleTokenOffRampHelperReportAccepted)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperTransmitedIterator struct {
	Event *SingleTokenOffRampHelperTransmited

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperTransmitedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperTransmited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperTransmited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperTransmitedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperTransmitedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperTransmited struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterTransmited(opts *bind.FilterOpts) (*SingleTokenOffRampHelperTransmitedIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "Transmited")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperTransmitedIterator{contract: _SingleTokenOffRampHelper.contract, event: "Transmited", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchTransmited(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperTransmited) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "Transmited")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperTransmited)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Transmited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseTransmited(log types.Log) (*SingleTokenOffRampHelperTransmited, error) {
	event := new(SingleTokenOffRampHelperTransmited)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Transmited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperUnpausedIterator struct {
	Event *SingleTokenOffRampHelperUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperUnpausedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterUnpaused(opts *bind.FilterOpts) (*SingleTokenOffRampHelperUnpausedIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperUnpausedIterator{contract: _SingleTokenOffRampHelper.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperUnpaused) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperUnpaused)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseUnpaused(log types.Log) (*SingleTokenOffRampHelperUnpaused, error) {
	event := new(SingleTokenOffRampHelperUnpaused)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelper) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _SingleTokenOffRampHelper.abi.Events["AFNMaxHeartbeatTimeSet"].ID:
		return _SingleTokenOffRampHelper.ParseAFNMaxHeartbeatTimeSet(log)
	case _SingleTokenOffRampHelper.abi.Events["AFNSet"].ID:
		return _SingleTokenOffRampHelper.ParseAFNSet(log)
	case _SingleTokenOffRampHelper.abi.Events["ConfigSet"].ID:
		return _SingleTokenOffRampHelper.ParseConfigSet(log)
	case _SingleTokenOffRampHelper.abi.Events["CrossChainMessageExecuted"].ID:
		return _SingleTokenOffRampHelper.ParseCrossChainMessageExecuted(log)
	case _SingleTokenOffRampHelper.abi.Events["ExecutionDelaySecondsSet"].ID:
		return _SingleTokenOffRampHelper.ParseExecutionDelaySecondsSet(log)
	case _SingleTokenOffRampHelper.abi.Events["NewTokenBucketConstructed"].ID:
		return _SingleTokenOffRampHelper.ParseNewTokenBucketConstructed(log)
	case _SingleTokenOffRampHelper.abi.Events["OwnershipTransferRequested"].ID:
		return _SingleTokenOffRampHelper.ParseOwnershipTransferRequested(log)
	case _SingleTokenOffRampHelper.abi.Events["OwnershipTransferred"].ID:
		return _SingleTokenOffRampHelper.ParseOwnershipTransferred(log)
	case _SingleTokenOffRampHelper.abi.Events["Paused"].ID:
		return _SingleTokenOffRampHelper.ParsePaused(log)
	case _SingleTokenOffRampHelper.abi.Events["ReportAccepted"].ID:
		return _SingleTokenOffRampHelper.ParseReportAccepted(log)
	case _SingleTokenOffRampHelper.abi.Events["Transmited"].ID:
		return _SingleTokenOffRampHelper.ParseTransmited(log)
	case _SingleTokenOffRampHelper.abi.Events["Unpaused"].ID:
		return _SingleTokenOffRampHelper.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet) Topic() common.Hash {
	return common.HexToHash("0x72e72b3dfd44fb4d803f52b2d895c7347b912da657d0f77599a0afc26956c251")
}

func (SingleTokenOffRampHelperAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (SingleTokenOffRampHelperConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (SingleTokenOffRampHelperCrossChainMessageExecuted) Topic() common.Hash {
	return common.HexToHash("0xc51bf0f6d90b467e0849da0ad18a4d9144a4b78b9f83202e1c65cd68f72d4a38")
}

func (SingleTokenOffRampHelperExecutionDelaySecondsSet) Topic() common.Hash {
	return common.HexToHash("0xfbb92e09fd0b7bcabafe655657e745c10bcd9812c1e32e205e477a3c5ff74fc0")
}

func (SingleTokenOffRampHelperNewTokenBucketConstructed) Topic() common.Hash {
	return common.HexToHash("0xfaf3310019e551542b5c6014c1ae13e2a8d3943d7611d779c4df9b36c111924f")
}

func (SingleTokenOffRampHelperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (SingleTokenOffRampHelperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (SingleTokenOffRampHelperPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (SingleTokenOffRampHelperReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x07d7bce06be2a7b0230e4dd0d72523c0407e82419ab1d947c5ddaf59ca36484e")
}

func (SingleTokenOffRampHelperTransmited) Topic() common.Hash {
	return common.HexToHash("0xd78f2a94a6a9ba96eb1197c7833ce19ec0fef80881049b0bd8ced9ee533739e3")
}

func (SingleTokenOffRampHelperUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelper) Address() common.Address {
	return _SingleTokenOffRampHelper.address
}

type SingleTokenOffRampHelperInterface interface {
	CHAINID(opts *bind.CallOpts) (*big.Int, error)

	POOL(opts *bind.CallOpts) (common.Address, error)

	SOURCECHAINID(opts *bind.CallOpts) (*big.Int, error)

	TOKEN(opts *bind.CallOpts) (common.Address, error)

	GenerateMerkleRoot(opts *bind.CallOpts, proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error)

	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetExecuted(opts *bind.CallOpts, sequenceNumber *big.Int) (bool, error)

	GetExecutionDelaySeconds(opts *bind.CallOpts) (*big.Int, error)

	GetLastReport(opts *bind.CallOpts) (CCIPRelayReport, error)

	GetMaxSecondsWithoutAFNHeartbeat(opts *bind.CallOpts) (*big.Int, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	GetTokenBucket(opts *bind.CallOpts) (TokenLimitsTokenBucket, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ConfigureTokenBucket(opts *bind.TransactOpts, rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error)

	ExecuteTransaction(opts *bind.TransactOpts, proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	Report(opts *bind.TransactOpts, merkle []byte) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	SetExecutionDelaySeconds(opts *bind.TransactOpts, executionDelaySeconds *big.Int) (*types.Transaction, error)

	SetMaxSecondsWithoutAFNHeartbeat(opts *bind.TransactOpts, newTime *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterAFNMaxHeartbeatTimeSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator, error)

	WatchAFNMaxHeartbeatTimeSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet) (event.Subscription, error)

	ParseAFNMaxHeartbeatTimeSet(log types.Log) (*SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet, error)

	FilterAFNSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*SingleTokenOffRampHelperAFNSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*SingleTokenOffRampHelperConfigSet, error)

	FilterCrossChainMessageExecuted(opts *bind.FilterOpts, sequenceNumber []*big.Int) (*SingleTokenOffRampHelperCrossChainMessageExecutedIterator, error)

	WatchCrossChainMessageExecuted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperCrossChainMessageExecuted, sequenceNumber []*big.Int) (event.Subscription, error)

	ParseCrossChainMessageExecuted(log types.Log) (*SingleTokenOffRampHelperCrossChainMessageExecuted, error)

	FilterExecutionDelaySecondsSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperExecutionDelaySecondsSetIterator, error)

	WatchExecutionDelaySecondsSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperExecutionDelaySecondsSet) (event.Subscription, error)

	ParseExecutionDelaySecondsSet(log types.Log) (*SingleTokenOffRampHelperExecutionDelaySecondsSet, error)

	FilterNewTokenBucketConstructed(opts *bind.FilterOpts) (*SingleTokenOffRampHelperNewTokenBucketConstructedIterator, error)

	WatchNewTokenBucketConstructed(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperNewTokenBucketConstructed) (event.Subscription, error)

	ParseNewTokenBucketConstructed(log types.Log) (*SingleTokenOffRampHelperNewTokenBucketConstructed, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampHelperOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*SingleTokenOffRampHelperOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampHelperOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*SingleTokenOffRampHelperOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*SingleTokenOffRampHelperPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*SingleTokenOffRampHelperPaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*SingleTokenOffRampHelperReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*SingleTokenOffRampHelperReportAccepted, error)

	FilterTransmited(opts *bind.FilterOpts) (*SingleTokenOffRampHelperTransmitedIterator, error)

	WatchTransmited(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperTransmited) (event.Subscription, error)

	ParseTransmited(log types.Log) (*SingleTokenOffRampHelperTransmited, error)

	FilterUnpaused(opts *bind.FilterOpts) (*SingleTokenOffRampHelperUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*SingleTokenOffRampHelperUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

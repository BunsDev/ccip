// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package blob_verifier_helper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type BlobVerifierInterfaceBlobVerifierConfig struct {
	OnRamps          []common.Address
	MinSeqNrByOnRamp []uint64
}

type CCIPInterval struct {
	Min uint64
	Max uint64
}

type CCIPRelayReport struct {
	OnRamps     []common.Address
	Intervals   []CCIPInterval
	MerkleRoots [][32]byte
	RootOfRoots [32]byte
}

var BlobVerifierHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAFNSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadHealthConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfiguration\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval\",\"name\":\"interval\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"InvalidRelayReport\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"UnsupportedOnRamp\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"indexed\":false,\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"BlobVerifierConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_sourceChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAFNHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"isBlessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rp\",\"type\":\"bytes\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootToReset\",\"type\":\"bytes32[]\"}],\"name\":\"resetUnblessedRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"innerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"innerProofFlagBits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"outerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"outerProofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

var BlobVerifierHelperABI = BlobVerifierHelperMetaData.ABI

var BlobVerifierHelperBin = BlobVerifierHelperMetaData.Bin

func DeployBlobVerifierHelper(auth *bind.TransactOpts, backend bind.ContractBackend, chainId *big.Int, sourceChainId *big.Int, afn common.Address, config BlobVerifierInterfaceBlobVerifierConfig) (common.Address, *types.Transaction, *BlobVerifierHelper, error) {
	parsed, err := BlobVerifierHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BlobVerifierHelperBin), backend, chainId, sourceChainId, afn, config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BlobVerifierHelper{BlobVerifierHelperCaller: BlobVerifierHelperCaller{contract: contract}, BlobVerifierHelperTransactor: BlobVerifierHelperTransactor{contract: contract}, BlobVerifierHelperFilterer: BlobVerifierHelperFilterer{contract: contract}}, nil
}

type BlobVerifierHelper struct {
	address common.Address
	abi     abi.ABI
	BlobVerifierHelperCaller
	BlobVerifierHelperTransactor
	BlobVerifierHelperFilterer
}

type BlobVerifierHelperCaller struct {
	contract *bind.BoundContract
}

type BlobVerifierHelperTransactor struct {
	contract *bind.BoundContract
}

type BlobVerifierHelperFilterer struct {
	contract *bind.BoundContract
}

type BlobVerifierHelperSession struct {
	Contract     *BlobVerifierHelper
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type BlobVerifierHelperCallerSession struct {
	Contract *BlobVerifierHelperCaller
	CallOpts bind.CallOpts
}

type BlobVerifierHelperTransactorSession struct {
	Contract     *BlobVerifierHelperTransactor
	TransactOpts bind.TransactOpts
}

type BlobVerifierHelperRaw struct {
	Contract *BlobVerifierHelper
}

type BlobVerifierHelperCallerRaw struct {
	Contract *BlobVerifierHelperCaller
}

type BlobVerifierHelperTransactorRaw struct {
	Contract *BlobVerifierHelperTransactor
}

func NewBlobVerifierHelper(address common.Address, backend bind.ContractBackend) (*BlobVerifierHelper, error) {
	abi, err := abi.JSON(strings.NewReader(BlobVerifierHelperABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindBlobVerifierHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelper{address: address, abi: abi, BlobVerifierHelperCaller: BlobVerifierHelperCaller{contract: contract}, BlobVerifierHelperTransactor: BlobVerifierHelperTransactor{contract: contract}, BlobVerifierHelperFilterer: BlobVerifierHelperFilterer{contract: contract}}, nil
}

func NewBlobVerifierHelperCaller(address common.Address, caller bind.ContractCaller) (*BlobVerifierHelperCaller, error) {
	contract, err := bindBlobVerifierHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperCaller{contract: contract}, nil
}

func NewBlobVerifierHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*BlobVerifierHelperTransactor, error) {
	contract, err := bindBlobVerifierHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperTransactor{contract: contract}, nil
}

func NewBlobVerifierHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*BlobVerifierHelperFilterer, error) {
	contract, err := bindBlobVerifierHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperFilterer{contract: contract}, nil
}

func bindBlobVerifierHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BlobVerifierHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlobVerifierHelper.Contract.BlobVerifierHelperCaller.contract.Call(opts, result, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.BlobVerifierHelperTransactor.contract.Transfer(opts)
}

func (_BlobVerifierHelper *BlobVerifierHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.BlobVerifierHelperTransactor.contract.Transact(opts, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlobVerifierHelper.Contract.contract.Call(opts, result, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.contract.Transfer(opts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.contract.Transact(opts, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetAFN() (common.Address, error) {
	return _BlobVerifierHelper.Contract.GetAFN(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetAFN() (common.Address, error) {
	return _BlobVerifierHelper.Contract.GetAFN(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetConfig(opts *bind.CallOpts) (BlobVerifierInterfaceBlobVerifierConfig, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getConfig")

	if err != nil {
		return *new(BlobVerifierInterfaceBlobVerifierConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(BlobVerifierInterfaceBlobVerifierConfig)).(*BlobVerifierInterfaceBlobVerifierConfig)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetConfig() (BlobVerifierInterfaceBlobVerifierConfig, error) {
	return _BlobVerifierHelper.Contract.GetConfig(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetConfig() (BlobVerifierInterfaceBlobVerifierConfig, error) {
	return _BlobVerifierHelper.Contract.GetConfig(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getExpectedNextSequenceNumber", onRamp)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _BlobVerifierHelper.Contract.GetExpectedNextSequenceNumber(&_BlobVerifierHelper.CallOpts, onRamp)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _BlobVerifierHelper.Contract.GetExpectedNextSequenceNumber(&_BlobVerifierHelper.CallOpts, onRamp)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.GetMerkleRoot(&_BlobVerifierHelper.CallOpts, root)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.GetMerkleRoot(&_BlobVerifierHelper.CallOpts, root)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) IChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "i_chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) IChainId() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.IChainId(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) IChainId() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.IChainId(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) ISourceChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "i_sourceChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) ISourceChainId() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.ISourceChainId(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) ISourceChainId() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.ISourceChainId(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) IsAFNHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "isAFNHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) IsAFNHealthy() (bool, error) {
	return _BlobVerifierHelper.Contract.IsAFNHealthy(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) IsAFNHealthy() (bool, error) {
	return _BlobVerifierHelper.Contract.IsAFNHealthy(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "isBlessed", root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) IsBlessed(root [32]byte) (bool, error) {
	return _BlobVerifierHelper.Contract.IsBlessed(&_BlobVerifierHelper.CallOpts, root)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) IsBlessed(root [32]byte) (bool, error) {
	return _BlobVerifierHelper.Contract.IsBlessed(&_BlobVerifierHelper.CallOpts, root)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDetails(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDetails(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDigestAndEpoch(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDigestAndEpoch(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "merkleRoot", leaves, proofs, proofFlagBits)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _BlobVerifierHelper.Contract.MerkleRoot(&_BlobVerifierHelper.CallOpts, leaves, proofs, proofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _BlobVerifierHelper.Contract.MerkleRoot(&_BlobVerifierHelper.CallOpts, leaves, proofs, proofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Owner() (common.Address, error) {
	return _BlobVerifierHelper.Contract.Owner(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Owner() (common.Address, error) {
	return _BlobVerifierHelper.Contract.Owner(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Paused() (bool, error) {
	return _BlobVerifierHelper.Contract.Paused(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Paused() (bool, error) {
	return _BlobVerifierHelper.Contract.Paused(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Transmitters() ([]common.Address, error) {
	return _BlobVerifierHelper.Contract.Transmitters(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Transmitters() ([]common.Address, error) {
	return _BlobVerifierHelper.Contract.Transmitters(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) TypeAndVersion() (string, error) {
	return _BlobVerifierHelper.Contract.TypeAndVersion(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) TypeAndVersion() (string, error) {
	return _BlobVerifierHelper.Contract.TypeAndVersion(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "verify", hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.Verify(&_BlobVerifierHelper.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.Verify(&_BlobVerifierHelper.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "acceptOwnership")
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) AcceptOwnership() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.AcceptOwnership(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.AcceptOwnership(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "pause")
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Pause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Pause(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Pause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Pause(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Report(opts *bind.TransactOpts, rp []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "report", rp)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Report(rp []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Report(&_BlobVerifierHelper.TransactOpts, rp)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Report(rp []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Report(&_BlobVerifierHelper.TransactOpts, rp)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "resetUnblessedRoots", rootToReset)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.ResetUnblessedRoots(&_BlobVerifierHelper.TransactOpts, rootToReset)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.ResetUnblessedRoots(&_BlobVerifierHelper.TransactOpts, rootToReset)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "setAFN", afn)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetAFN(&_BlobVerifierHelper.TransactOpts, afn)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetAFN(&_BlobVerifierHelper.TransactOpts, afn)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) SetConfig(opts *bind.TransactOpts, config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "setConfig", config)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SetConfig(config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig(&_BlobVerifierHelper.TransactOpts, config)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) SetConfig(config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig(&_BlobVerifierHelper.TransactOpts, config)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) SetConfig0(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "setConfig0", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SetConfig0(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig0(&_BlobVerifierHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) SetConfig0(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig0(&_BlobVerifierHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "transferOwnership", to)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.TransferOwnership(&_BlobVerifierHelper.TransactOpts, to)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.TransferOwnership(&_BlobVerifierHelper.TransactOpts, to)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Transmit(&_BlobVerifierHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Transmit(&_BlobVerifierHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "unpause")
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Unpause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Unpause(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Unpause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Unpause(&_BlobVerifierHelper.TransactOpts)
}

type BlobVerifierHelperAFNSetIterator struct {
	Event *BlobVerifierHelperAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperAFNSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterAFNSet(opts *bind.FilterOpts) (*BlobVerifierHelperAFNSetIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperAFNSetIterator{contract: _BlobVerifierHelper.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperAFNSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperAFNSet)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseAFNSet(log types.Log) (*BlobVerifierHelperAFNSet, error) {
	event := new(BlobVerifierHelperAFNSet)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperBlobVerifierConfigSetIterator struct {
	Event *BlobVerifierHelperBlobVerifierConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperBlobVerifierConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperBlobVerifierConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperBlobVerifierConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperBlobVerifierConfigSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperBlobVerifierConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperBlobVerifierConfigSet struct {
	Config BlobVerifierInterfaceBlobVerifierConfig
	Raw    types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterBlobVerifierConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperBlobVerifierConfigSetIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "BlobVerifierConfigSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperBlobVerifierConfigSetIterator{contract: _BlobVerifierHelper.contract, event: "BlobVerifierConfigSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchBlobVerifierConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperBlobVerifierConfigSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "BlobVerifierConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperBlobVerifierConfigSet)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "BlobVerifierConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseBlobVerifierConfigSet(log types.Log) (*BlobVerifierHelperBlobVerifierConfigSet, error) {
	event := new(BlobVerifierHelperBlobVerifierConfigSet)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "BlobVerifierConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperConfigSetIterator struct {
	Event *BlobVerifierHelperConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperConfigSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperConfigSetIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperConfigSetIterator{contract: _BlobVerifierHelper.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperConfigSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperConfigSet)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseConfigSet(log types.Log) (*BlobVerifierHelperConfigSet, error) {
	event := new(BlobVerifierHelperConfigSet)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperOwnershipTransferRequestedIterator struct {
	Event *BlobVerifierHelperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperOwnershipTransferRequestedIterator{contract: _BlobVerifierHelper.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperOwnershipTransferRequested)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseOwnershipTransferRequested(log types.Log) (*BlobVerifierHelperOwnershipTransferRequested, error) {
	event := new(BlobVerifierHelperOwnershipTransferRequested)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperOwnershipTransferredIterator struct {
	Event *BlobVerifierHelperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperOwnershipTransferredIterator{contract: _BlobVerifierHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperOwnershipTransferred)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseOwnershipTransferred(log types.Log) (*BlobVerifierHelperOwnershipTransferred, error) {
	event := new(BlobVerifierHelperOwnershipTransferred)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperPausedIterator struct {
	Event *BlobVerifierHelperPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperPausedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterPaused(opts *bind.FilterOpts) (*BlobVerifierHelperPausedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperPausedIterator{contract: _BlobVerifierHelper.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperPaused) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperPaused)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParsePaused(log types.Log) (*BlobVerifierHelperPaused, error) {
	event := new(BlobVerifierHelperPaused)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperReportAcceptedIterator struct {
	Event *BlobVerifierHelperReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperReportAccepted struct {
	Report CCIPRelayReport
	Raw    types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*BlobVerifierHelperReportAcceptedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperReportAcceptedIterator{contract: _BlobVerifierHelper.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperReportAccepted) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperReportAccepted)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseReportAccepted(log types.Log) (*BlobVerifierHelperReportAccepted, error) {
	event := new(BlobVerifierHelperReportAccepted)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperTransmittedIterator struct {
	Event *BlobVerifierHelperTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperTransmittedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterTransmitted(opts *bind.FilterOpts) (*BlobVerifierHelperTransmittedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperTransmittedIterator{contract: _BlobVerifierHelper.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperTransmitted) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperTransmitted)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseTransmitted(log types.Log) (*BlobVerifierHelperTransmitted, error) {
	event := new(BlobVerifierHelperTransmitted)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperUnpausedIterator struct {
	Event *BlobVerifierHelperUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperUnpausedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BlobVerifierHelperUnpausedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperUnpausedIterator{contract: _BlobVerifierHelper.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperUnpaused) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperUnpaused)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseUnpaused(log types.Log) (*BlobVerifierHelperUnpaused, error) {
	event := new(BlobVerifierHelperUnpaused)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_BlobVerifierHelper *BlobVerifierHelper) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _BlobVerifierHelper.abi.Events["AFNSet"].ID:
		return _BlobVerifierHelper.ParseAFNSet(log)
	case _BlobVerifierHelper.abi.Events["BlobVerifierConfigSet"].ID:
		return _BlobVerifierHelper.ParseBlobVerifierConfigSet(log)
	case _BlobVerifierHelper.abi.Events["ConfigSet"].ID:
		return _BlobVerifierHelper.ParseConfigSet(log)
	case _BlobVerifierHelper.abi.Events["OwnershipTransferRequested"].ID:
		return _BlobVerifierHelper.ParseOwnershipTransferRequested(log)
	case _BlobVerifierHelper.abi.Events["OwnershipTransferred"].ID:
		return _BlobVerifierHelper.ParseOwnershipTransferred(log)
	case _BlobVerifierHelper.abi.Events["Paused"].ID:
		return _BlobVerifierHelper.ParsePaused(log)
	case _BlobVerifierHelper.abi.Events["ReportAccepted"].ID:
		return _BlobVerifierHelper.ParseReportAccepted(log)
	case _BlobVerifierHelper.abi.Events["Transmitted"].ID:
		return _BlobVerifierHelper.ParseTransmitted(log)
	case _BlobVerifierHelper.abi.Events["Unpaused"].ID:
		return _BlobVerifierHelper.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (BlobVerifierHelperAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (BlobVerifierHelperBlobVerifierConfigSet) Topic() common.Hash {
	return common.HexToHash("0x6a58c52cba3b1b32bf483778bd30d3930b0930f34aa7e416643023a4f8f7130a")
}

func (BlobVerifierHelperConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (BlobVerifierHelperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (BlobVerifierHelperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (BlobVerifierHelperPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (BlobVerifierHelperReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef")
}

func (BlobVerifierHelperTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (BlobVerifierHelperUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_BlobVerifierHelper *BlobVerifierHelper) Address() common.Address {
	return _BlobVerifierHelper.address
}

type BlobVerifierHelperInterface interface {
	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetConfig(opts *bind.CallOpts) (BlobVerifierInterfaceBlobVerifierConfig, error)

	GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	IChainId(opts *bind.CallOpts) (*big.Int, error)

	ISourceChainId(opts *bind.CallOpts) (*big.Int, error)

	IsAFNHealthy(opts *bind.CallOpts) (bool, error)

	IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	Report(opts *bind.TransactOpts, rp []byte) (*types.Transaction, error)

	ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error)

	SetConfig0(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterAFNSet(opts *bind.FilterOpts) (*BlobVerifierHelperAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*BlobVerifierHelperAFNSet, error)

	FilterBlobVerifierConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperBlobVerifierConfigSetIterator, error)

	WatchBlobVerifierConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperBlobVerifierConfigSet) (event.Subscription, error)

	ParseBlobVerifierConfigSet(log types.Log) (*BlobVerifierHelperBlobVerifierConfigSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*BlobVerifierHelperConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*BlobVerifierHelperOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*BlobVerifierHelperOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*BlobVerifierHelperPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*BlobVerifierHelperPaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*BlobVerifierHelperReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*BlobVerifierHelperReportAccepted, error)

	FilterTransmitted(opts *bind.FilterOpts) (*BlobVerifierHelperTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*BlobVerifierHelperTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*BlobVerifierHelperUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*BlobVerifierHelperUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

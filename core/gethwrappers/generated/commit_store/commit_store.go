// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package commit_store

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type ICommitStoreCommitReport struct {
	PriceUpdates InternalPriceUpdates
	Interval     ICommitStoreInterval
	MerkleRoot   [32]byte
}

type ICommitStoreDynamicConfig struct {
	PriceRegistry common.Address
	Afn           common.Address
}

type ICommitStoreInterval struct {
	Min uint64
	Max uint64
}

type ICommitStoreStaticConfig struct {
	ChainId       uint64
	SourceChainId uint64
	OnRamp        common.Address
}

type InternalPriceUpdates struct {
	TokenPriceUpdates []InternalTokenPriceUpdate
	DestChainId       uint64
	UsdPerUnitGas     *big.Int
}

type InternalTokenPriceUpdate struct {
	SourceToken common.Address
	UsdPerToken *big.Int
}

var CommitStoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"internalType\":\"structICommitStore.StaticConfig\",\"name\":\"staticConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afn\",\"type\":\"address\"}],\"internalType\":\"structICommitStore.DynamicConfig\",\"name\":\"dynamicConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAFNSignal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ConfigDigestMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCommitStoreConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structICommitStore.Interval\",\"name\":\"interval\",\"type\":\"tuple\"}],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedTransmitter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNumberOfSignatures\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afn\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structICommitStore.DynamicConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"DynamicConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"usdPerToken\",\"type\":\"uint128\"}],\"internalType\":\"structInternal.TokenPriceUpdate[]\",\"name\":\"tokenPriceUpdates\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"destChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"usdPerUnitGas\",\"type\":\"uint128\"}],\"internalType\":\"structInternal.PriceUpdates\",\"name\":\"priceUpdates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structICommitStore.Interval\",\"name\":\"interval\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structICommitStore.CommitReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structICommitStore.StaticConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"StaticConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDynamicConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afn\",\"type\":\"address\"}],\"internalType\":\"structICommitStore.DynamicConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"internalType\":\"structICommitStore.StaticConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAFNHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"isBlessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootToReset\",\"type\":\"bytes32[]\"}],\"name\":\"resetUnblessedRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afn\",\"type\":\"address\"}],\"internalType\":\"structICommitStore.DynamicConfig\",\"name\":\"dynamicConfig\",\"type\":\"tuple\"}],\"name\":\"setDynamicConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"minSeqNr\",\"type\":\"uint64\"}],\"name\":\"setMinSeqNr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setOCR2Config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e0604052600b80546001600160401b03191660011790553480156200002457600080fd5b506040516200349e3803806200349e8339810160408190526200004791620003ac565b33806000816200009e5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000d157620000d181620001da565b50506001805460ff60a01b191690555080516001600160a01b0316158062000104575060408201516001600160a01b0316155b8062000118575081516001600160401b0316155b806200012f575060208201516001600160401b0316155b156200014e57604051631fc5f15f60e11b815260040160405180910390fd5b81516001600160401b0390811660805260208084018051831660a052604080860180516001600160a01b0390811660c0528251885187168152935190951693830193909352915190921682820152517f84e45d35b9716f438102df99609b94769e723efb1aa8efefc23f03f74636dc079181900360600190a1620001d28162000285565b505062000487565b336001600160a01b03821603620002345760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000095565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60208101516001600160a01b03161580620002a8575080516001600160a01b0316155b15620002c757604051631fc5f15f60e11b815260040160405180910390fd5b8051600880546001600160a01b03199081166001600160a01b03938416908117909255602080850180516009805490941690861617909255604080519384529151909316928201929092527f437ab4d204b228a666e183638a005a86a5813dba72e1d299ff89c505cc52ac0b910160405180910390a150565b604080519081016001600160401b03811182821017156200037157634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160401b03811681146200038f57600080fd5b919050565b80516001600160a01b03811681146200038f57600080fd5b60008082840360a0811215620003c157600080fd5b6060811215620003d057600080fd5b604051606081016001600160401b03811182821017156200040157634e487b7160e01b600052604160045260246000fd5b6040526200040f8562000377565b81526200041f6020860162000377565b6020820152620004326040860162000394565b6040820152809350506040605f19820112156200044e57600080fd5b506200045962000340565b620004676060850162000394565b8152620004776080850162000394565b6020820152809150509250929050565b60805160a05160c051612fe7620004b7600039600061021f015260006101ef015260006101bf0152612fe76000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806379ba5097116100e3578063ad7a22f81161008c578063f2fde38b11610066578063f2fde38b146104e8578063f47a8690146104fb578063ff888fb11461050e57600080fd5b8063ad7a22f8146104a2578063afcb95d7146104b5578063b1dc65a4146104d557600080fd5b8063869b7f62116100bd578063869b7f62146104475780638da5cb5b1461045a578063a7206cd61461048257600080fd5b806379ba50971461040757806381ff70481461040f5780638456cb591461043f57600080fd5b806332048875116101455780635c975abb1161011f5780635c975abb14610376578063666cab8d146103995780637437ff9f146103ae57600080fd5b8063320488751461033f5780633f4ba83a146103525780634120fccd1461035a57600080fd5b8063147809b311610176578063147809b3146102c9578063181f5a77146102e15780631ef381741461032a57600080fd5b806306285c691461019257806307761f3d146102a8575b600080fd5b61025c604080516060810182526000808252602082018190529181019190915260405180606001604052807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815250905090565b60408051825167ffffffffffffffff9081168252602080850151909116908201529181015173ffffffffffffffffffffffffffffffffffffffff16908201526060015b60405180910390f35b6102bb6102b6366004612382565b610521565b60405190815260200161029f565b6102d16106f8565b604051901515815260200161029f565b61031d6040518060400160405280601181526020017f436f6d6d697453746f726520312e302e3000000000000000000000000000000081525081565b60405161029f919061245a565b61033d6103383660046125b8565b610792565b005b6102bb61034d3660046126d1565b610f10565b61033d610fd0565b600b5460405167ffffffffffffffff909116815260200161029f565b60015474010000000000000000000000000000000000000000900460ff166102d1565b6103a1610fe2565b60405161029f9190612796565b60408051808201825260008082526020918201528151808301835260085473ffffffffffffffffffffffffffffffffffffffff90811680835260095482169284019283528451908152915116918101919091520161029f565b61033d611051565b6004546002546040805163ffffffff8085168252640100000000909404909316602084015282015260600161029f565b61033d61114e565b61033d6104553660046127a9565b61115e565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161029f565b6102bb610490366004612808565b6000908152600a602052604090205490565b61033d6104b0366004612821565b611172565b60408051600181526000602082018190529181019190915260600161029f565b61033d6104e336600461283e565b6111b5565b61033d6104f6366004612923565b61173d565b61033d610509366004612940565b61174e565b6102d161051c366004612808565b6117a6565b6000808451905060006001855183010390508060000361055f578560008151811061054e5761054e612982565b6020026020010151925050506106f1565b61010081111561059b576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008167ffffffffffffffff8111156105b6576105b6612229565b6040519080825280602002602001820160405280156105df578160200160208202803683370190505b50905060008080805b858110156106ca576106a56001828b901c16600114610625578a5160018401938c91811061061857610618612982565b6020026020010151610663565b87851061064357855160018501948791811061061857610618612982565b8b5160018601958d91811061065a5761065a612982565b60200260200101515b88861061068e57865160018601958891811061068157610681612982565b6020026020010151611869565b8c5160018701968e91811061068157610681612982565b8582815181106106b7576106b7612982565b60209081029190910101526001016105e8565b508360018603815181106106e0576106e0612982565b602002602001015196505050505050505b9392505050565b600954604080517f46f8e6d7000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916346f8e6d79160048083019260209291908290030181865afa158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c91906129b1565b15905090565b855185518560ff16601f83111561080a576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e6572730000000000000000000000000000000060448201526064015b60405180910390fd5b80600003610874576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610801565b818314610902576040517f89a61989000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e000000000000000000000000000000000000000000000000000000006064820152608401610801565b61090d816003612a02565b8311610975576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610801565b61097d6118e4565b60065460005b81811015610a795760056000600683815481106109a2576109a2612982565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016905560078054600592919084908110610a1257610a12612982565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169055610a7281612a3f565b9050610983565b50895160005b81811015610db85760008c8281518110610a9b57610a9b612982565b6020026020010151905060006002811115610ab857610ab8612a77565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff166002811115610af757610af7612a77565b14610b5e576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610801565b6040805180820190915260ff83168152602081016001905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115610c0e57610c0e612a77565b021790555090505060008c8381518110610c2a57610c2a612982565b6020026020010151905060006002811115610c4757610c47612a77565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff166002811115610c8657610c86612a77565b14610ced576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610801565b6040805180820190915260ff84168152602081016002905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115610d9d57610d9d612a77565b0217905550905050505080610db190612a3f565b9050610a7f565b508a51610dcc9060069060208e019061216b565b508951610de09060079060208d019061216b565b506003805460ff838116610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909216908c161717905560048054610e66914691309190600090610e389063ffffffff16612aa6565b91906101000a81548163ffffffff021916908363ffffffff160217905563ffffffff168e8e8e8e8e8e611965565b600260000181905550600060048054906101000a900463ffffffff169050436004806101000a81548163ffffffff021916908363ffffffff1602179055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0581600260000154600460009054906101000a900463ffffffff168f8f8f8f8f8f604051610efa99989796959493929190612ac9565b60405180910390a1505050505050505050505050565b600080610f8287878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a925089918291850190849080828437600092019190915250889250610521915050565b6000818152600a60205260409020549091501580610fa65750610fa4816117a6565b155b15610fb5576000915050610fc7565b6000908152600a602052604090205490505b95945050505050565b610fd86118e4565b610fe0611a10565b565b6060600780548060200260200160405190810160405280929190818152602001828054801561104757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161101c575b5050505050905090565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610801565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6111566118e4565b610fe0611b09565b6111666118e4565b61116f81611bf5565b50565b61117a6118e4565b600b80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92909216919091179055565b6111f487878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d0692505050565b6040805160608101825260025480825260035460ff8082166020850152610100909104169282019290925289359182146112675780516040517f93df584c000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052604401610801565b6040805183815260208c81013560081c63ffffffff16908201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16002816020015182604001516112c29190612b5f565b6112cc9190612b84565b6112d7906001612b5f565b60ff168614611312576040517f71253a2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85841461134b576040517fa75d88af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526005602090815260408083208151808301909252805460ff8082168452929391929184019161010090910416600281111561138e5761138e612a77565b600281111561139f5761139f612a77565b90525090506002816020015160028111156113bc576113bc612a77565b14801561140357506007816000015160ff16815481106113de576113de612982565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b611439576040517fda0f08e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000611447856020612a02565b611452886020612a02565b61145e8b610144612bcd565b6114689190612bcd565b6114729190612bcd565b90503681146114b6576040517f8e1192e100000000000000000000000000000000000000000000000000000000815260048101829052366024820152604401610801565b50600089896040516114c9929190612be5565b6040519081900381206114e0918d90602001612bf5565b6040516020818303038152906040528051906020012090506115006121f5565b8760005b8181101561172d57600060018589846020811061152357611523612982565b61153091901a601b612b5f565b8e8e8681811061154257611542612982565b905060200201358d8d8781811061155b5761155b612982565b9050602002013560405160008152602001604052604051611598949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa1580156115ba573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff8116600090815260056020908152848220848601909552845460ff808216865293975091955092939284019161010090910416600281111561163d5761163d612a77565b600281111561164e5761164e612a77565b905250905060018160200151600281111561166b5761166b612a77565b146116a2576040517fca31867a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051859060ff16601f81106116b9576116b9612982565b6020020151156116f5576040517ff67bc7c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600185826000015160ff16601f811061171057611710612982565b9115156020909202015250611726905081612a3f565b9050611504565b5050505050505050505050505050565b6117456118e4565b61116f81612076565b6117566118e4565b60005b818110156117a157600a600084848481811061177757611777612982565b905060200201358152602001908152602001600020600090558061179a90612a3f565b9050611759565b505050565b6009546040805130602080830191909152818301859052825180830384018152606083019384905280519101207fff888fb100000000000000000000000000000000000000000000000000000000909252606481019190915260009173ffffffffffffffffffffffffffffffffffffffff169063ff888fb190608401602060405180830381865afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186391906129b1565b92915050565b60008183106118ab57604080516001602080830191909152818301859052606080830187905283518084039091018152608090920190925280519101206106f1565b604080516001602080830191909152818301869052606080830186905283518084039091018152608090920190925280519101206106f1565b60005473ffffffffffffffffffffffffffffffffffffffff163314610fe0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610801565b6000808a8a8a8a8a8a8a8a8a60405160200161198999989796959493929190612c11565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b60015474010000000000000000000000000000000000000000900460ff16611a94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610801565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60015474010000000000000000000000000000000000000000900460ff1615611b8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610801565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611adf3390565b602081015173ffffffffffffffffffffffffffffffffffffffff161580611c315750805173ffffffffffffffffffffffffffffffffffffffff16155b15611c68576040517f3f8be2be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051600880547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff938416908117909255602080850180516009805490941690861617909255604080519384529151909316928201929092527f437ab4d204b228a666e183638a005a86a5813dba72e1d299ff89c505cc52ac0b910160405180910390a150565b60015474010000000000000000000000000000000000000000900460ff1615611d8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610801565b600954604080517f46f8e6d7000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216916346f8e6d7916004808201926020929091908290030181865afa158015611dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1f91906129b1565b15611e55576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081806020019051810190611e6b9190612d13565b80515151909150151580611e8d575080516020015167ffffffffffffffff1615155b15611f275760085481516040517f3c03ec3c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691633c03ec3c91611ee891600401612f1a565b600060405180830381600087803b158015611f0257600080fd5b505af1158015611f16573d6000803e3d6000fd5b505050506040810151611f27575050565b602081015151600b5467ffffffffffffffff9081169116141580611f62575060208082015190810151905167ffffffffffffffff9182169116115b15611f9f5780602001516040517fbb1ae18d0000000000000000000000000000000000000000000000000000000081526004016108019190612f2d565b6040810151611fda576040517f504570e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808201510151611fed906001612f52565b600b80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff929092169190911790556040818101516000908152600a602052819020429055517f3cbd5cf9fd597d6a1acd16b35fb034bd3f9d1061cdd5a7b2c75962a0cde76c6e9061206a908390612f7e565b60405180910390a15050565b3373ffffffffffffffffffffffffffffffffffffffff8216036120f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610801565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b8280548282559060005260206000209081019282156121e5579160200282015b828111156121e557825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061218b565b506121f1929150612214565b5090565b604051806103e00160405280601f906020820280368337509192915050565b5b808211156121f15760008155600101612215565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561227b5761227b612229565b60405290565b6040516060810167ffffffffffffffff8111828210171561227b5761227b612229565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156122eb576122eb612229565b604052919050565b600067ffffffffffffffff82111561230d5761230d612229565b5060051b60200190565b600082601f83011261232857600080fd5b8135602061233d612338836122f3565b6122a4565b82815260059290921b8401810191818101908684111561235c57600080fd5b8286015b848110156123775780358352918301918301612360565b509695505050505050565b60008060006060848603121561239757600080fd5b833567ffffffffffffffff808211156123af57600080fd5b6123bb87838801612317565b945060208601359150808211156123d157600080fd5b506123de86828701612317565b925050604084013590509250925092565b6000815180845260005b81811015612415576020818501810151868301820152016123f9565b81811115612427576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106f160208301846123ef565b73ffffffffffffffffffffffffffffffffffffffff8116811461116f57600080fd5b600082601f8301126124a057600080fd5b813560206124b0612338836122f3565b82815260059290921b840181019181810190868411156124cf57600080fd5b8286015b848110156123775780356124e68161246d565b83529183019183016124d3565b803560ff8116811461250457600080fd5b919050565b600082601f83011261251a57600080fd5b813567ffffffffffffffff81111561253457612534612229565b61256560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016122a4565b81815284602083860101111561257a57600080fd5b816020850160208301376000918101602001919091529392505050565b67ffffffffffffffff8116811461116f57600080fd5b803561250481612597565b60008060008060008060c087890312156125d157600080fd5b863567ffffffffffffffff808211156125e957600080fd5b6125f58a838b0161248f565b9750602089013591508082111561260b57600080fd5b6126178a838b0161248f565b965061262560408a016124f3565b9550606089013591508082111561263b57600080fd5b6126478a838b01612509565b945061265560808a016125ad565b935060a089013591508082111561266b57600080fd5b5061267889828a01612509565b9150509295509295509295565b60008083601f84011261269757600080fd5b50813567ffffffffffffffff8111156126af57600080fd5b6020830191508360208260051b85010111156126ca57600080fd5b9250929050565b6000806000806000606086880312156126e957600080fd5b853567ffffffffffffffff8082111561270157600080fd5b61270d89838a01612685565b9097509550602088013591508082111561272657600080fd5b5061273388828901612685565b96999598509660400135949350505050565b600081518084526020808501945080840160005b8381101561278b57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612759565b509495945050505050565b6020815260006106f16020830184612745565b6000604082840312156127bb57600080fd5b6040516040810181811067ffffffffffffffff821117156127de576127de612229565b60405282356127ec8161246d565b815260208301356127fc8161246d565b60208201529392505050565b60006020828403121561281a57600080fd5b5035919050565b60006020828403121561283357600080fd5b81356106f181612597565b60008060008060008060008060e0898b03121561285a57600080fd5b606089018a81111561286b57600080fd5b8998503567ffffffffffffffff8082111561288557600080fd5b818b0191508b601f83011261289957600080fd5b8135818111156128a857600080fd5b8c60208285010111156128ba57600080fd5b6020830199508098505060808b01359150808211156128d857600080fd5b6128e48c838d01612685565b909750955060a08b01359150808211156128fd57600080fd5b5061290a8b828c01612685565b999c989b50969995989497949560c00135949350505050565b60006020828403121561293557600080fd5b81356106f18161246d565b6000806020838503121561295357600080fd5b823567ffffffffffffffff81111561296a57600080fd5b61297685828601612685565b90969095509350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156129c357600080fd5b815180151581146106f157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612a3a57612a3a6129d3565b500290565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a7057612a706129d3565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600063ffffffff808316818103612abf57612abf6129d3565b6001019392505050565b600061012063ffffffff808d1684528b6020850152808b16604085015250806060840152612af98184018a612745565b90508281036080840152612b0d8189612745565b905060ff871660a084015282810360c0840152612b2a81876123ef565b905067ffffffffffffffff851660e0840152828103610100840152612b4f81856123ef565b9c9b505050505050505050505050565b600060ff821660ff84168060ff03821115612b7c57612b7c6129d3565b019392505050565b600060ff831680612bbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b60008219821115612be057612be06129d3565b500190565b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b166040850152816060850152612c588285018b612745565b91508382036080850152612c6c828a612745565b915060ff881660a085015283820360c0850152612c8982886123ef565b90861660e08501528381036101008501529050612b4f81856123ef565b80516fffffffffffffffffffffffffffffffff8116811461250457600080fd5b805161250481612597565b600060408284031215612ce357600080fd5b612ceb612258565b90508151612cf881612597565b81526020820151612d0881612597565b602082015292915050565b60006020808385031215612d2657600080fd5b825167ffffffffffffffff80821115612d3e57600080fd5b9084019060808287031215612d5257600080fd5b612d5a612281565b825182811115612d6957600080fd5b830160608189031215612d7b57600080fd5b612d83612281565b815184811115612d9257600080fd5b82019350601f84018913612da557600080fd5b8351612db3612338826122f3565b81815260069190911b8501870190878101908b831115612dd257600080fd5b958801955b82871015612e26576040878d031215612df05760008081fd5b612df8612258565b8751612e038161246d565b8152612e10888b01612ca6565b818b015282526040969096019590880190612dd7565b835250612e369050828701612cc6565b86820152612e4660408301612ca6565b6040820152825250612e5a87848601612cd1565b93810193909352506060015160408201529392505050565b805160608084528151908401819052600091602091908201906080860190845b81811015612ee1578351805173ffffffffffffffffffffffffffffffffffffffff1684528501516fffffffffffffffffffffffffffffffff168584015292840192604090920191600101612e92565b505067ffffffffffffffff83860151168387015260408501519250610fc760408701846fffffffffffffffffffffffffffffffff169052565b6020815260006106f16020830184612e72565b604081016118638284805167ffffffffffffffff908116835260209182015116910152565b600067ffffffffffffffff808316818516808303821115612f7557612f756129d3565b01949350505050565b602081526000825160806020840152612f9a60a0840182612e72565b90506020840151612fc56040850182805167ffffffffffffffff908116835260209182015116910152565b5060408401516080840152809150509291505056fea164736f6c634300080f000a",
}

var CommitStoreABI = CommitStoreMetaData.ABI

var CommitStoreBin = CommitStoreMetaData.Bin

func DeployCommitStore(auth *bind.TransactOpts, backend bind.ContractBackend, staticConfig ICommitStoreStaticConfig, dynamicConfig ICommitStoreDynamicConfig) (common.Address, *types.Transaction, *CommitStore, error) {
	parsed, err := CommitStoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommitStoreBin), backend, staticConfig, dynamicConfig)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CommitStore{CommitStoreCaller: CommitStoreCaller{contract: contract}, CommitStoreTransactor: CommitStoreTransactor{contract: contract}, CommitStoreFilterer: CommitStoreFilterer{contract: contract}}, nil
}

type CommitStore struct {
	address common.Address
	abi     abi.ABI
	CommitStoreCaller
	CommitStoreTransactor
	CommitStoreFilterer
}

type CommitStoreCaller struct {
	contract *bind.BoundContract
}

type CommitStoreTransactor struct {
	contract *bind.BoundContract
}

type CommitStoreFilterer struct {
	contract *bind.BoundContract
}

type CommitStoreSession struct {
	Contract     *CommitStore
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CommitStoreCallerSession struct {
	Contract *CommitStoreCaller
	CallOpts bind.CallOpts
}

type CommitStoreTransactorSession struct {
	Contract     *CommitStoreTransactor
	TransactOpts bind.TransactOpts
}

type CommitStoreRaw struct {
	Contract *CommitStore
}

type CommitStoreCallerRaw struct {
	Contract *CommitStoreCaller
}

type CommitStoreTransactorRaw struct {
	Contract *CommitStoreTransactor
}

func NewCommitStore(address common.Address, backend bind.ContractBackend) (*CommitStore, error) {
	abi, err := abi.JSON(strings.NewReader(CommitStoreABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCommitStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CommitStore{address: address, abi: abi, CommitStoreCaller: CommitStoreCaller{contract: contract}, CommitStoreTransactor: CommitStoreTransactor{contract: contract}, CommitStoreFilterer: CommitStoreFilterer{contract: contract}}, nil
}

func NewCommitStoreCaller(address common.Address, caller bind.ContractCaller) (*CommitStoreCaller, error) {
	contract, err := bindCommitStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommitStoreCaller{contract: contract}, nil
}

func NewCommitStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*CommitStoreTransactor, error) {
	contract, err := bindCommitStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommitStoreTransactor{contract: contract}, nil
}

func NewCommitStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*CommitStoreFilterer, error) {
	contract, err := bindCommitStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommitStoreFilterer{contract: contract}, nil
}

func bindCommitStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CommitStoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_CommitStore *CommitStoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitStore.Contract.CommitStoreCaller.contract.Call(opts, result, method, params...)
}

func (_CommitStore *CommitStoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.Contract.CommitStoreTransactor.contract.Transfer(opts)
}

func (_CommitStore *CommitStoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitStore.Contract.CommitStoreTransactor.contract.Transact(opts, method, params...)
}

func (_CommitStore *CommitStoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitStore.Contract.contract.Call(opts, result, method, params...)
}

func (_CommitStore *CommitStoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.Contract.contract.Transfer(opts)
}

func (_CommitStore *CommitStoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitStore.Contract.contract.Transact(opts, method, params...)
}

func (_CommitStore *CommitStoreCaller) GetDynamicConfig(opts *bind.CallOpts) (ICommitStoreDynamicConfig, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getDynamicConfig")

	if err != nil {
		return *new(ICommitStoreDynamicConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(ICommitStoreDynamicConfig)).(*ICommitStoreDynamicConfig)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetDynamicConfig() (ICommitStoreDynamicConfig, error) {
	return _CommitStore.Contract.GetDynamicConfig(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) GetDynamicConfig() (ICommitStoreDynamicConfig, error) {
	return _CommitStore.Contract.GetDynamicConfig(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) GetExpectedNextSequenceNumber(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getExpectedNextSequenceNumber")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetExpectedNextSequenceNumber() (uint64, error) {
	return _CommitStore.Contract.GetExpectedNextSequenceNumber(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) GetExpectedNextSequenceNumber() (uint64, error) {
	return _CommitStore.Contract.GetExpectedNextSequenceNumber(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _CommitStore.Contract.GetMerkleRoot(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _CommitStore.Contract.GetMerkleRoot(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCaller) GetStaticConfig(opts *bind.CallOpts) (ICommitStoreStaticConfig, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getStaticConfig")

	if err != nil {
		return *new(ICommitStoreStaticConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(ICommitStoreStaticConfig)).(*ICommitStoreStaticConfig)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetStaticConfig() (ICommitStoreStaticConfig, error) {
	return _CommitStore.Contract.GetStaticConfig(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) GetStaticConfig() (ICommitStoreStaticConfig, error) {
	return _CommitStore.Contract.GetStaticConfig(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) GetTransmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getTransmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetTransmitters() ([]common.Address, error) {
	return _CommitStore.Contract.GetTransmitters(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) GetTransmitters() ([]common.Address, error) {
	return _CommitStore.Contract.GetTransmitters(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) IsAFNHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "isAFNHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStore *CommitStoreSession) IsAFNHealthy() (bool, error) {
	return _CommitStore.Contract.IsAFNHealthy(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) IsAFNHealthy() (bool, error) {
	return _CommitStore.Contract.IsAFNHealthy(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "isBlessed", root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStore *CommitStoreSession) IsBlessed(root [32]byte) (bool, error) {
	return _CommitStore.Contract.IsBlessed(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCallerSession) IsBlessed(root [32]byte) (bool, error) {
	return _CommitStore.Contract.IsBlessed(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_CommitStore *CommitStoreSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _CommitStore.Contract.LatestConfigDetails(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _CommitStore.Contract.LatestConfigDetails(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_CommitStore *CommitStoreSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _CommitStore.Contract.LatestConfigDigestAndEpoch(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _CommitStore.Contract.LatestConfigDigestAndEpoch(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "merkleRoot", leaves, proofs, proofFlagBits)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_CommitStore *CommitStoreSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _CommitStore.Contract.MerkleRoot(&_CommitStore.CallOpts, leaves, proofs, proofFlagBits)
}

func (_CommitStore *CommitStoreCallerSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _CommitStore.Contract.MerkleRoot(&_CommitStore.CallOpts, leaves, proofs, proofFlagBits)
}

func (_CommitStore *CommitStoreCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CommitStore *CommitStoreSession) Owner() (common.Address, error) {
	return _CommitStore.Contract.Owner(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) Owner() (common.Address, error) {
	return _CommitStore.Contract.Owner(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStore *CommitStoreSession) Paused() (bool, error) {
	return _CommitStore.Contract.Paused(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) Paused() (bool, error) {
	return _CommitStore.Contract.Paused(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CommitStore *CommitStoreSession) TypeAndVersion() (string, error) {
	return _CommitStore.Contract.TypeAndVersion(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) TypeAndVersion() (string, error) {
	return _CommitStore.Contract.TypeAndVersion(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "verify", hashedLeaves, proofs, proofFlagBits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStore *CommitStoreSession) Verify(hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	return _CommitStore.Contract.Verify(&_CommitStore.CallOpts, hashedLeaves, proofs, proofFlagBits)
}

func (_CommitStore *CommitStoreCallerSession) Verify(hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	return _CommitStore.Contract.Verify(&_CommitStore.CallOpts, hashedLeaves, proofs, proofFlagBits)
}

func (_CommitStore *CommitStoreTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "acceptOwnership")
}

func (_CommitStore *CommitStoreSession) AcceptOwnership() (*types.Transaction, error) {
	return _CommitStore.Contract.AcceptOwnership(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CommitStore.Contract.AcceptOwnership(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "pause")
}

func (_CommitStore *CommitStoreSession) Pause() (*types.Transaction, error) {
	return _CommitStore.Contract.Pause(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactorSession) Pause() (*types.Transaction, error) {
	return _CommitStore.Contract.Pause(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactor) ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "resetUnblessedRoots", rootToReset)
}

func (_CommitStore *CommitStoreSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.ResetUnblessedRoots(&_CommitStore.TransactOpts, rootToReset)
}

func (_CommitStore *CommitStoreTransactorSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.ResetUnblessedRoots(&_CommitStore.TransactOpts, rootToReset)
}

func (_CommitStore *CommitStoreTransactor) SetDynamicConfig(opts *bind.TransactOpts, dynamicConfig ICommitStoreDynamicConfig) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "setDynamicConfig", dynamicConfig)
}

func (_CommitStore *CommitStoreSession) SetDynamicConfig(dynamicConfig ICommitStoreDynamicConfig) (*types.Transaction, error) {
	return _CommitStore.Contract.SetDynamicConfig(&_CommitStore.TransactOpts, dynamicConfig)
}

func (_CommitStore *CommitStoreTransactorSession) SetDynamicConfig(dynamicConfig ICommitStoreDynamicConfig) (*types.Transaction, error) {
	return _CommitStore.Contract.SetDynamicConfig(&_CommitStore.TransactOpts, dynamicConfig)
}

func (_CommitStore *CommitStoreTransactor) SetMinSeqNr(opts *bind.TransactOpts, minSeqNr uint64) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "setMinSeqNr", minSeqNr)
}

func (_CommitStore *CommitStoreSession) SetMinSeqNr(minSeqNr uint64) (*types.Transaction, error) {
	return _CommitStore.Contract.SetMinSeqNr(&_CommitStore.TransactOpts, minSeqNr)
}

func (_CommitStore *CommitStoreTransactorSession) SetMinSeqNr(minSeqNr uint64) (*types.Transaction, error) {
	return _CommitStore.Contract.SetMinSeqNr(&_CommitStore.TransactOpts, minSeqNr)
}

func (_CommitStore *CommitStoreTransactor) SetOCR2Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "setOCR2Config", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_CommitStore *CommitStoreSession) SetOCR2Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStore.Contract.SetOCR2Config(&_CommitStore.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_CommitStore *CommitStoreTransactorSession) SetOCR2Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStore.Contract.SetOCR2Config(&_CommitStore.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_CommitStore *CommitStoreTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "transferOwnership", to)
}

func (_CommitStore *CommitStoreSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CommitStore.Contract.TransferOwnership(&_CommitStore.TransactOpts, to)
}

func (_CommitStore *CommitStoreTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CommitStore.Contract.TransferOwnership(&_CommitStore.TransactOpts, to)
}

func (_CommitStore *CommitStoreTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_CommitStore *CommitStoreSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.Transmit(&_CommitStore.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_CommitStore *CommitStoreTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.Transmit(&_CommitStore.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_CommitStore *CommitStoreTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "unpause")
}

func (_CommitStore *CommitStoreSession) Unpause() (*types.Transaction, error) {
	return _CommitStore.Contract.Unpause(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactorSession) Unpause() (*types.Transaction, error) {
	return _CommitStore.Contract.Unpause(&_CommitStore.TransactOpts)
}

type CommitStoreConfigSetIterator struct {
	Event *CommitStoreConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreConfigSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterConfigSet(opts *bind.FilterOpts) (*CommitStoreConfigSetIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreConfigSetIterator{contract: _CommitStore.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreConfigSet) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreConfigSet)
				if err := _CommitStore.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseConfigSet(log types.Log) (*CommitStoreConfigSet, error) {
	event := new(CommitStoreConfigSet)
	if err := _CommitStore.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreDynamicConfigSetIterator struct {
	Event *CommitStoreDynamicConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreDynamicConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreDynamicConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreDynamicConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreDynamicConfigSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreDynamicConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreDynamicConfigSet struct {
	Arg0 ICommitStoreDynamicConfig
	Raw  types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterDynamicConfigSet(opts *bind.FilterOpts) (*CommitStoreDynamicConfigSetIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "DynamicConfigSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreDynamicConfigSetIterator{contract: _CommitStore.contract, event: "DynamicConfigSet", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchDynamicConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreDynamicConfigSet) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "DynamicConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreDynamicConfigSet)
				if err := _CommitStore.contract.UnpackLog(event, "DynamicConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseDynamicConfigSet(log types.Log) (*CommitStoreDynamicConfigSet, error) {
	event := new(CommitStoreDynamicConfigSet)
	if err := _CommitStore.contract.UnpackLog(event, "DynamicConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreOwnershipTransferRequestedIterator struct {
	Event *CommitStoreOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CommitStoreOwnershipTransferRequestedIterator{contract: _CommitStore.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreOwnershipTransferRequested)
				if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseOwnershipTransferRequested(log types.Log) (*CommitStoreOwnershipTransferRequested, error) {
	event := new(CommitStoreOwnershipTransferRequested)
	if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreOwnershipTransferredIterator struct {
	Event *CommitStoreOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CommitStoreOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CommitStoreOwnershipTransferredIterator{contract: _CommitStore.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreOwnershipTransferred)
				if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseOwnershipTransferred(log types.Log) (*CommitStoreOwnershipTransferred, error) {
	event := new(CommitStoreOwnershipTransferred)
	if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStorePausedIterator struct {
	Event *CommitStorePaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStorePausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStorePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStorePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStorePausedIterator) Error() error {
	return it.fail
}

func (it *CommitStorePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStorePaused struct {
	Account common.Address
	Raw     types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterPaused(opts *bind.FilterOpts) (*CommitStorePausedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &CommitStorePausedIterator{contract: _CommitStore.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *CommitStorePaused) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStorePaused)
				if err := _CommitStore.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParsePaused(log types.Log) (*CommitStorePaused, error) {
	event := new(CommitStorePaused)
	if err := _CommitStore.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreReportAcceptedIterator struct {
	Event *CommitStoreReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreReportAccepted struct {
	Report ICommitStoreCommitReport
	Raw    types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*CommitStoreReportAcceptedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &CommitStoreReportAcceptedIterator{contract: _CommitStore.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *CommitStoreReportAccepted) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreReportAccepted)
				if err := _CommitStore.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseReportAccepted(log types.Log) (*CommitStoreReportAccepted, error) {
	event := new(CommitStoreReportAccepted)
	if err := _CommitStore.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreStaticConfigSetIterator struct {
	Event *CommitStoreStaticConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreStaticConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreStaticConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreStaticConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreStaticConfigSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreStaticConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreStaticConfigSet struct {
	Arg0 ICommitStoreStaticConfig
	Raw  types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterStaticConfigSet(opts *bind.FilterOpts) (*CommitStoreStaticConfigSetIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "StaticConfigSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreStaticConfigSetIterator{contract: _CommitStore.contract, event: "StaticConfigSet", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchStaticConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreStaticConfigSet) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "StaticConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreStaticConfigSet)
				if err := _CommitStore.contract.UnpackLog(event, "StaticConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseStaticConfigSet(log types.Log) (*CommitStoreStaticConfigSet, error) {
	event := new(CommitStoreStaticConfigSet)
	if err := _CommitStore.contract.UnpackLog(event, "StaticConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreTransmittedIterator struct {
	Event *CommitStoreTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreTransmittedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterTransmitted(opts *bind.FilterOpts) (*CommitStoreTransmittedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &CommitStoreTransmittedIterator{contract: _CommitStore.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *CommitStoreTransmitted) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreTransmitted)
				if err := _CommitStore.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseTransmitted(log types.Log) (*CommitStoreTransmitted, error) {
	event := new(CommitStoreTransmitted)
	if err := _CommitStore.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreUnpausedIterator struct {
	Event *CommitStoreUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreUnpausedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterUnpaused(opts *bind.FilterOpts) (*CommitStoreUnpausedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &CommitStoreUnpausedIterator{contract: _CommitStore.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CommitStoreUnpaused) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreUnpaused)
				if err := _CommitStore.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseUnpaused(log types.Log) (*CommitStoreUnpaused, error) {
	event := new(CommitStoreUnpaused)
	if err := _CommitStore.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_CommitStore *CommitStore) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CommitStore.abi.Events["ConfigSet"].ID:
		return _CommitStore.ParseConfigSet(log)
	case _CommitStore.abi.Events["DynamicConfigSet"].ID:
		return _CommitStore.ParseDynamicConfigSet(log)
	case _CommitStore.abi.Events["OwnershipTransferRequested"].ID:
		return _CommitStore.ParseOwnershipTransferRequested(log)
	case _CommitStore.abi.Events["OwnershipTransferred"].ID:
		return _CommitStore.ParseOwnershipTransferred(log)
	case _CommitStore.abi.Events["Paused"].ID:
		return _CommitStore.ParsePaused(log)
	case _CommitStore.abi.Events["ReportAccepted"].ID:
		return _CommitStore.ParseReportAccepted(log)
	case _CommitStore.abi.Events["StaticConfigSet"].ID:
		return _CommitStore.ParseStaticConfigSet(log)
	case _CommitStore.abi.Events["Transmitted"].ID:
		return _CommitStore.ParseTransmitted(log)
	case _CommitStore.abi.Events["Unpaused"].ID:
		return _CommitStore.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CommitStoreConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (CommitStoreDynamicConfigSet) Topic() common.Hash {
	return common.HexToHash("0x437ab4d204b228a666e183638a005a86a5813dba72e1d299ff89c505cc52ac0b")
}

func (CommitStoreOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CommitStoreOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (CommitStorePaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (CommitStoreReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x3cbd5cf9fd597d6a1acd16b35fb034bd3f9d1061cdd5a7b2c75962a0cde76c6e")
}

func (CommitStoreStaticConfigSet) Topic() common.Hash {
	return common.HexToHash("0x84e45d35b9716f438102df99609b94769e723efb1aa8efefc23f03f74636dc07")
}

func (CommitStoreTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (CommitStoreUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_CommitStore *CommitStore) Address() common.Address {
	return _CommitStore.address
}

type CommitStoreInterface interface {
	GetDynamicConfig(opts *bind.CallOpts) (ICommitStoreDynamicConfig, error)

	GetExpectedNextSequenceNumber(opts *bind.CallOpts) (uint64, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	GetStaticConfig(opts *bind.CallOpts) (ICommitStoreStaticConfig, error)

	GetTransmitters(opts *bind.CallOpts) ([]common.Address, error)

	IsAFNHealthy(opts *bind.CallOpts) (bool, error)

	IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error)

	SetDynamicConfig(opts *bind.TransactOpts, dynamicConfig ICommitStoreDynamicConfig) (*types.Transaction, error)

	SetMinSeqNr(opts *bind.TransactOpts, minSeqNr uint64) (*types.Transaction, error)

	SetOCR2Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*CommitStoreConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*CommitStoreConfigSet, error)

	FilterDynamicConfigSet(opts *bind.FilterOpts) (*CommitStoreDynamicConfigSetIterator, error)

	WatchDynamicConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreDynamicConfigSet) (event.Subscription, error)

	ParseDynamicConfigSet(log types.Log) (*CommitStoreDynamicConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CommitStoreOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CommitStoreOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*CommitStorePausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *CommitStorePaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*CommitStorePaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*CommitStoreReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *CommitStoreReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*CommitStoreReportAccepted, error)

	FilterStaticConfigSet(opts *bind.FilterOpts) (*CommitStoreStaticConfigSetIterator, error)

	WatchStaticConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreStaticConfigSet) (event.Subscription, error)

	ParseStaticConfigSet(log types.Log) (*CommitStoreStaticConfigSet, error)

	FilterTransmitted(opts *bind.FilterOpts) (*CommitStoreTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *CommitStoreTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*CommitStoreTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*CommitStoreUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CommitStoreUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*CommitStoreUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package commit_store_helper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type CCIPInterval struct {
	Min uint64
	Max uint64
}

type CCIPRelayReport struct {
	OnRamps     []common.Address
	Intervals   []CCIPInterval
	MerkleRoots [][32]byte
	RootOfRoots [32]byte
}

type CommitStoreInterfaceCommitStoreConfig struct {
	OnRamps          []common.Address
	MinSeqNrByOnRamp []uint64
}

var CommitStoreHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structCommitStoreInterface.CommitStoreConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAFNSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadHealthConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfiguration\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval\",\"name\":\"interval\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"InvalidRelayReport\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"UnsupportedOnRamp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"indexed\":false,\"internalType\":\"structCommitStoreInterface.CommitStoreConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"CommitStoreConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structCommitStoreInterface.CommitStoreConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_sourceChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAFNHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"isBlessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rp\",\"type\":\"bytes\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootToReset\",\"type\":\"bytes32[]\"}],\"name\":\"resetUnblessedRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structCommitStoreInterface.CommitStoreConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"innerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"innerProofFlagBits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"outerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"outerProofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b50604051620040b6380380620040b683398101604081905262000034916200058a565b6000805460ff19168155849084908490849060019083903390819081620000a25760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0380851661010002610100600160a81b031990921691909117909155811615620000dc57620000dc8162000266565b5050506001600160a01b0381166200010757604051630958ef9b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055151560805260a084905260c0839052805180518291600a916200015291839160209091019062000317565b5060208281015180516200016d926001850192019062000381565b5050600b54600a54149050620001965760405163c52a9bd360e01b815260040160405180910390fd5b60005b600a548110156200025757600b805482908110620001bb57620001bb620006b2565b90600052602060002090600491828204019190066008029054906101000a90046001600160401b0316600c6000600a6000018481548110620002015762000201620006b2565b6000918252602080832091909101546001600160a01b03168352820192909252604001902080546001600160401b0319166001600160401b03929092169190911790556200024f81620006c8565b905062000199565b505050505050505050620006f0565b336001600160a01b03821603620002c05760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000099565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b8280548282559060005260206000209081019282156200036f579160200282015b828111156200036f57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000338565b506200037d92915062000436565b5090565b828054828255906000526020600020906003016004900481019282156200036f5791602002820160005b83821115620003f757835183826101000a8154816001600160401b0302191690836001600160401b031602179055509260200192600801602081600701049283019260010302620003ab565b80156200042c5782816101000a8154906001600160401b030219169055600801602081600701049283019260010302620003f7565b50506200037d9291505b5b808211156200037d576000815560010162000437565b6001600160a01b03811681146200046357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715620004a157620004a162000466565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004d257620004d262000466565b604052919050565b60006001600160401b03821115620004f657620004f662000466565b5060051b60200190565b600082601f8301126200051257600080fd5b815160206200052b6200052583620004da565b620004a7565b82815260059290921b840181019181810190868411156200054b57600080fd5b8286015b848110156200057f5780516001600160401b0381168114620005715760008081fd5b83529183019183016200054f565b509695505050505050565b60008060008060808587031215620005a157600080fd5b8451935060208086015193506040860151620005bd816200044d565b60608701519093506001600160401b0380821115620005db57600080fd5b908701906040828a031215620005f057600080fd5b620005fa6200047c565b8251828111156200060a57600080fd5b8301601f81018b136200061c57600080fd5b80516200062d6200052582620004da565b81815260059190911b8201860190868101908d8311156200064d57600080fd5b928701925b828410156200067857835162000668816200044d565b8252928701929087019062000652565b845250505082840151828111156200068f57600080fd5b6200069d8b82860162000500565b85830152508094505050505092959194509250565b634e487b7160e01b600052603260045260246000fd5b600060018201620006e957634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c0516139966200072060003960006101de015260006102ba01526000610cde01526139966000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80638456cb59116100ee578063c1131d8e11610097578063e71e65ce11610071578063e71e65ce14610461578063f2fde38b14610474578063f47a869014610487578063ff888fb11461049a57600080fd5b8063c1131d8e146103e0578063c3f909d414610439578063e3d0e7121461044e57600080fd5b8063afcb95d7116100c8578063afcb95d71461039a578063b1dc65a4146103ba578063b5767166146103cd57600080fd5b80638456cb591461034f5780638da5cb5b14610357578063a7206cd61461037a57600080fd5b806328094b591161015b57806379ba50971161013557806379ba5097146102ef57806381411834146102f757806381ff70481461030c57806383ec5cf61461033c57600080fd5b806328094b59146102b55780633f4ba83a146102dc5780635c975abb146102e457600080fd5b8063147809b31161018c578063147809b314610215578063181f5a771461022d5780632222dd421461027657600080fd5b806307761f3d146101b35780630f733bca146101d9578063108ee5fc14610200575b600080fd5b6101c66101c1366004612888565b6104ad565b6040519081526020015b60405180910390f35b6101c67f000000000000000000000000000000000000000000000000000000000000000081565b61021361020e366004612917565b610684565b005b61021d61075f565b60405190151581526020016101d0565b6102696040518060400160405280601181526020017f436f6d6d697453746f726520312e302e3000000000000000000000000000000081525081565b6040516101d09190612981565b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d0565b6101c67f000000000000000000000000000000000000000000000000000000000000000081565b6102136107f9565b60005460ff1661021d565b61021361080b565b6102ff610918565b6040516101d091906129e5565b6005546003546040805163ffffffff808516825264010000000090940490931660208401528201526060016101d0565b61021361034a3660046129f8565b610987565b610213610bab565b600054610100900473ffffffffffffffffffffffffffffffffffffffff16610290565b6101c6610388366004612a33565b60009081526009602052604090205490565b6040805160018152600060208201819052918101919091526060016101d0565b6102136103c8366004612a98565b610bbb565b6102136103db366004612bed565b6111a8565b6104206103ee366004612917565b73ffffffffffffffffffffffffffffffffffffffff166000908152600c602052604090205467ffffffffffffffff1690565b60405167ffffffffffffffff90911681526020016101d0565b6104416111b7565b6040516101d09190612c2a565b61021361045c366004612d2c565b6112cf565b6101c661046f366004612df9565b611cb2565b610213610482366004612917565b611df9565b610213610495366004612ea4565b611e0a565b61021d6104a8366004612a33565b611e62565b600080845190506000600185518301039050806000036104eb57856000815181106104da576104da612ee6565b60200260200101519250505061067d565b610100811115610527576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008167ffffffffffffffff8111156105425761054261274d565b60405190808252806020026020018201604052801561056b578160200160208202803683370190505b50905060008080805b85811015610656576106316001828b901c166001146105b1578a5160018401938c9181106105a4576105a4612ee6565b60200260200101516105ef565b8785106105cf5785516001850194879181106105a4576105a4612ee6565b8b5160018601958d9181106105e6576105e6612ee6565b60200260200101515b88861061061a57865160018601958891811061060d5761060d612ee6565b6020026020010151611f25565b8c5160018701968e91811061060d5761060d612ee6565b85828151811061064357610643612ee6565b6020908102919091010152600101610574565b5083600186038151811061066c5761066c612ee6565b602002602001015196505050505050505b9392505050565b61068c611fa0565b73ffffffffffffffffffffffffffffffffffffffff81166106d9576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28910160405180910390a15050565b600254604080517f46f8e6d7000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916346f8e6d79160048083019260209291908290030181865afa1580156107cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f39190612f15565b15905090565b610801611fa0565b61080961200c565b565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108775760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054336101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8416178455600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560405173ffffffffffffffffffffffffffffffffffffffff919093041692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6060600880548060200260200160405190810160405280929190818152602001828054801561097d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610952575b5050505050905090565b61098f611fa0565b600061099b8280612f37565b91506109ac90506020830183612f37565b9050811415806109ba575080155b156109f1576040517fc52a9bd300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a5460005b81811015610a8057600c6000600a6000018381548110610a1957610a19612ee6565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000169055610a7981612fce565b90506109f7565b5082600a610a8e8282613163565b90505060005b82811015610b6e57610aa96020850185612f37565b82818110610ab957610ab9612ee6565b9050602002016020810190610ace9190613244565b600c6000610adc8780612f37565b85818110610aec57610aec612ee6565b9050602002016020810190610b019190612917565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92909216919091179055610b6781612fce565b9050610a94565b507fd877a6c59b30961c28d263c0104d975d2ddf1f185e20d5a6adb144d7bc9f16e283604051610b9e91906132c8565b60405180910390a1505050565b610bb3611fa0565b6108096120d3565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c013591610c1191849163ffffffff851691908e908e908190840183828082843760009201919091525061217992505050565b6040805183815262ffffff600884901c1660208201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16040805160608101825260035480825260045460ff80821660208501526101009091041692820192909252908314610ccc5760405162461bcd60e51b815260206004820152601560248201527f636f6e666967446967657374206d69736d617463680000000000000000000000604482015260640161086e565b610cda8b8b8b8b8b8b61252c565b60007f000000000000000000000000000000000000000000000000000000000000000015610d3757600282602001518360400151610d189190613382565b610d2291906133a7565b610d2d906001613382565b60ff169050610d4d565b6020820151610d47906001613382565b60ff1690505b888114610d9c5760405162461bcd60e51b815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e617475726573000000000000604482015260640161086e565b888714610deb5760405162461bcd60e51b815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e0000604482015260640161086e565b3360009081526006602090815260408083208151808301909252805460ff80821684529293919291840191610100909104166002811115610e2e57610e2e6133f0565b6002811115610e3f57610e3f6133f0565b9052509050600281602001516002811115610e5c57610e5c6133f0565b148015610ea357506008816000015160ff1681548110610e7e57610e7e612ee6565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b610eef5760405162461bcd60e51b815260206004820152601860248201527f756e617574686f72697a6564207472616e736d69747465720000000000000000604482015260640161086e565b505050505060008888604051610f0692919061341f565b604051908190038120610f1d918c9060200161342f565b604051602081830303815290604052805190602001209050610f3d61272e565b604080518082019091526000808252602082015260005b88811015611186576000600185888460208110610f7357610f73612ee6565b610f8091901a601b613382565b8d8d86818110610f9257610f92612ee6565b905060200201358c8c87818110610fab57610fab612ee6565b9050602002013560405160008152602001604052604051610fe8949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa15801561100a573d6000803e3d6000fd5b505060408051601f1981015173ffffffffffffffffffffffffffffffffffffffff811660009081526006602090815290849020838501909452835460ff8082168552929650929450840191610100900416600281111561106c5761106c6133f0565b600281111561107d5761107d6133f0565b905250925060018360200151600281111561109a5761109a6133f0565b146110e75760405162461bcd60e51b815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e0000604482015260640161086e565b8251849060ff16601f81106110fe576110fe612ee6565b6020020151156111505760405162461bcd60e51b815260206004820152601460248201527f6e6f6e2d756e69717565207369676e6174757265000000000000000000000000604482015260640161086e565b600184846000015160ff16601f811061116b5761116b612ee6565b911515602090920201525061117f81612fce565b9050610f54565b5050505063ffffffff811061119d5761119d61344b565b505050505050505050565b6111b460008083612179565b50565b604080518082019091526060808252602082015260408051600a80546060602082028401810185529383018181529293919284929091849184018282801561123557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161120a575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156112c157602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161127c5790505b505050505081525050905090565b855185518560ff16601f831115611342576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e65727300000000000000000000000000000000604482015260640161086e565b806000036113ac576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f7369746976650000000000000000000000000000604482015260640161086e565b81831461143a576040517f89a61989000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e00000000000000000000000000000000000000000000000000000000606482015260840161086e565b611445816003613006565b83116114ad576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f20686967680000000000000000604482015260640161086e565b6114b5611fa0565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b600754156116a85760075460009061150d9060019061347a565b905060006007828154811061152457611524612ee6565b60009182526020822001546008805473ffffffffffffffffffffffffffffffffffffffff9092169350908490811061155e5761155e612ee6565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff85811684526006909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000908116909155929091168084529220805490911690556007805491925090806115de576115de613491565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055600880548061164757611647613491565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055506114f3915050565b60005b815151811015611b0d57600060066000846000015184815181106116d1576116d1612ee6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff16600281111561171b5761171b6133f0565b14611782576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e65722061646472657373000000000000000000604482015260640161086e565b6040805180820190915260ff821681526001602082015282518051600691600091859081106117b3576117b3612ee6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611854576118546133f0565b0217905550600091506118649050565b600660008460200151848151811061187e5761187e612ee6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff1660028111156118c8576118c86133f0565b1461192f576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d6974746572206164647265737300000000604482015260640161086e565b6040805180820190915260ff82168152602081016002815250600660008460200151848151811061196257611962612ee6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611a0357611a036133f0565b021790555050825180516007925083908110611a2157611a21612ee6565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921790915582015180516008919083908110611a9d57611a9d612ee6565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055611b0681612fce565b90506116ab565b506040810151600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600580547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff438116820292831785559083048116936001939092600092611b9f9286929082169116176134c0565b92506101000a81548163ffffffff021916908363ffffffff160217905550611bfe4630600560009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a001516125c0565b6003819055825180516004805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560055460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0598611c9d988b98919763ffffffff9092169690959194919391926134e8565b60405180910390a15050505050505050505050565b60408051600180825281830190925260009182919060208083019080368337019050509050611d468a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508b92506104ad915050565b81600081518110611d5957611d59612ee6565b6020026020010181815250506000611da6828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506104ad915050565b6000818152600960205260409020549091501580611dca5750611dc881611e62565b155b15611dda57600092505050611ded565b6000908152600960205260409020549150505b98975050505050505050565b611e01611fa0565b6111b48161264d565b611e12611fa0565b60005b81811015611e5d5760096000848484818110611e3357611e33612ee6565b9050602002013581526020019081526020016000206000905580611e5690612fce565b9050611e15565b505050565b6002546040805130602080830191909152818301859052825180830384018152606083019384905280519101207fff888fb100000000000000000000000000000000000000000000000000000000909252606481019190915260009173ffffffffffffffffffffffffffffffffffffffff169063ff888fb190608401602060405180830381865afa158015611efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1f9190612f15565b92915050565b6000818310611f67576040805160016020808301919091528183018590526060808301879052835180840390910181526080909201909252805191012061067d565b6040805160016020808301919091528183018690526060808301869052835180840390910181526080909201909252805191012061067d565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1633146108095760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161086e565b60005460ff1661205e5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161086e565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005460ff16156121265760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161086e565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120a93390565b60005460ff16156121cc5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161086e565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166346f8e6d76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225d9190612f15565b15612293576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818060200190518101906122a9919061366a565b80515160208201515191925090811415806122c957508160400151518114155b1561230257816040517fa13dc2f800000000000000000000000000000000000000000000000000000000815260040161086e91906137b8565b60005b818110156124d65760008360000151828151811061232557612325612ee6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff81166000908152600c909252604082205490925067ffffffffffffffff16908190036123b6576040517fb4fbc1e600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015260240161086e565b6000856020015184815181106123ce576123ce612ee6565b60200260200101519050806000015167ffffffffffffffff168267ffffffffffffffff1614158061241a5750806020015167ffffffffffffffff16816000015167ffffffffffffffff16115b156124555780836040517f3389cbd500000000000000000000000000000000000000000000000000000000815260040161086e929190613871565b60208101516124659060016138b9565b73ffffffffffffffffffffffffffffffffffffffff939093166000908152600c6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff90941693909317909255506124cf905081612fce565b9050612305565b50606082015160009081526009602052604090819020429055517f0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef9061251d9084906137b8565b60405180910390a15050505050565b6000612539826020613006565b612544856020613006565b612550886101446138dc565b61255a91906138dc565b61256491906138dc565b61256f9060006138dc565b90503681146125b3576040517f8e1192e10000000000000000000000000000000000000000000000000000000081526004810182905236602482015260440161086e565b50505050505050565b5050565b6000808a8a8a8a8a8a8a8a8a6040516020016125e4999897969594939291906138f4565b60408051601f1981840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff8216036126b25760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161086e565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b604051806103e00160405280601f906020820280368337509192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561279f5761279f61274d565b60405290565b6040516080810167ffffffffffffffff8111828210171561279f5761279f61274d565b604051601f8201601f1916810167ffffffffffffffff811182821017156127f1576127f161274d565b604052919050565b600067ffffffffffffffff8211156128135761281361274d565b5060051b60200190565b600082601f83011261282e57600080fd5b8135602061284361283e836127f9565b6127c8565b82815260059290921b8401810191818101908684111561286257600080fd5b8286015b8481101561287d5780358352918301918301612866565b509695505050505050565b60008060006060848603121561289d57600080fd5b833567ffffffffffffffff808211156128b557600080fd5b6128c18783880161281d565b945060208601359150808211156128d757600080fd5b506128e48682870161281d565b925050604084013590509250925092565b73ffffffffffffffffffffffffffffffffffffffff811681146111b457600080fd5b60006020828403121561292957600080fd5b813561067d816128f5565b6000815180845260005b8181101561295a5760208185018101518683018201520161293e565b8181111561296c576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061067d6020830184612934565b600081518084526020808501945080840160005b838110156129da57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016129a8565b509495945050505050565b60208152600061067d6020830184612994565b600060208284031215612a0a57600080fd5b813567ffffffffffffffff811115612a2157600080fd5b82016040818503121561067d57600080fd5b600060208284031215612a4557600080fd5b5035919050565b60008083601f840112612a5e57600080fd5b50813567ffffffffffffffff811115612a7657600080fd5b6020830191508360208260051b8501011115612a9157600080fd5b9250929050565b60008060008060008060008060e0898b031215612ab457600080fd5b606089018a811115612ac557600080fd5b8998503567ffffffffffffffff80821115612adf57600080fd5b818b0191508b601f830112612af357600080fd5b813581811115612b0257600080fd5b8c6020828501011115612b1457600080fd5b6020830199508098505060808b0135915080821115612b3257600080fd5b612b3e8c838d01612a4c565b909750955060a08b0135915080821115612b5757600080fd5b50612b648b828c01612a4c565b999c989b50969995989497949560c00135949350505050565b600082601f830112612b8e57600080fd5b813567ffffffffffffffff811115612ba857612ba861274d565b612bbb6020601f19601f840116016127c8565b818152846020838601011115612bd057600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612bff57600080fd5b813567ffffffffffffffff811115612c1657600080fd5b612c2284828501612b7d565b949350505050565b600060208083528351604082850152612c466060850182612994565b85830151858203601f19016040870152805180835290840192506000918401905b8083101561287d57835167ffffffffffffffff168252928401926001929092019190840190612c67565b600082601f830112612ca257600080fd5b81356020612cb261283e836127f9565b82815260059290921b84018101918181019086841115612cd157600080fd5b8286015b8481101561287d578035612ce8816128f5565b8352918301918301612cd5565b803560ff81168114612d0657600080fd5b919050565b67ffffffffffffffff811681146111b457600080fd5b8035612d0681612d0b565b60008060008060008060c08789031215612d4557600080fd5b863567ffffffffffffffff80821115612d5d57600080fd5b612d698a838b01612c91565b97506020890135915080821115612d7f57600080fd5b612d8b8a838b01612c91565b9650612d9960408a01612cf5565b95506060890135915080821115612daf57600080fd5b612dbb8a838b01612b7d565b9450612dc960808a01612d21565b935060a0890135915080821115612ddf57600080fd5b50612dec89828a01612b7d565b9150509295509295509295565b60008060008060008060008060a0898b031215612e1557600080fd5b883567ffffffffffffffff80821115612e2d57600080fd5b612e398c838d01612a4c565b909a50985060208b0135915080821115612e5257600080fd5b612e5e8c838d01612a4c565b909850965060408b0135955060608b0135915080821115612e7e57600080fd5b50612e8b8b828c01612a4c565b999c989b50969995989497949560800135949350505050565b60008060208385031215612eb757600080fd5b823567ffffffffffffffff811115612ece57600080fd5b612eda85828601612a4c565b90969095509350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612f2757600080fd5b8151801515811461067d57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612f6c57600080fd5b83018035915067ffffffffffffffff821115612f8757600080fd5b6020019150600581901b3603821315612a9157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612fff57612fff612f9f565b5060010190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561303e5761303e612f9f565b500290565b5b818110156125bc5760008155600101613044565b60008135611f1f81612d0b565b6801000000000000000083111561307e5761307e61274d565b8054838255808410156130f5578160005260206000206003850160021c810160188660031b1680156130df577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083018054828460200360031b1c16815550505b506130f26003840160021c830182613043565b50505b506000818152602081208391805b868110156125b35761313b61311785613058565b845467ffffffffffffffff600386901b81811b801990931693909116901b16178455565b602084019350600882019150601882111561315b57600091506001830192505b600101613103565b61316d8283612f37565b680100000000000000008111156131865761318661274d565b8254818455808210156131ac578360005260206000206131aa828201848301613043565b505b508260005260208060002060005b8381101561321d5784356131cd816128f5565b82547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9190911617825593820193600191820191016131ba565b505061322b81860186612f37565b935091505061323e828260018601613065565b50505050565b60006020828403121561325657600080fd5b813561067d81612d0b565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261329657600080fd5b830160208101925035905067ffffffffffffffff8111156132b657600080fd5b8060051b3603821315612a9157600080fd5b60006020808352606083016132dd8586613261565b6040868501529182905290600090608086015b8183101561332d578335613303816128f5565b73ffffffffffffffffffffffffffffffffffffffff168152928401926001929092019184016132f0565b61333985890189613261565b888303601f190160408a0152808352945092508401905060005b8381101561287d57823561336681612d0b565b67ffffffffffffffff1682529184019190840190600101613353565b600060ff821660ff84168060ff0382111561339f5761339f612f9f565b019392505050565b600060ff8316806133e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60008282101561348c5761348c612f9f565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600063ffffffff8083168185168083038211156134df576134df612f9f565b01949350505050565b600061012063ffffffff808d1684528b6020850152808b166040850152508060608401526135188184018a612994565b9050828103608084015261352c8189612994565b905060ff871660a084015282810360c08401526135498187612934565b905067ffffffffffffffff851660e084015282810361010084015261356e8185612934565b9c9b505050505050505050505050565b600082601f83011261358f57600080fd5b8151602061359f61283e836127f9565b82815260069290921b840181019181810190868411156135be57600080fd5b8286015b8481101561287d57604081890312156135db5760008081fd5b6135e361277c565b81516135ee81612d0b565b8152818501516135fd81612d0b565b818601528352918301916040016135c2565b600082601f83011261362057600080fd5b8151602061363061283e836127f9565b82815260059290921b8401810191818101908684111561364f57600080fd5b8286015b8481101561287d5780518352918301918301613653565b6000602080838503121561367d57600080fd5b825167ffffffffffffffff8082111561369557600080fd5b90840190608082870312156136a957600080fd5b6136b16127a5565b8251828111156136c057600080fd5b8301601f810188136136d157600080fd5b80516136df61283e826127f9565b81815260059190911b8201860190868101908a8311156136fe57600080fd5b928701925b82841015613725578351613716816128f5565b82529287019290870190613703565b8452505050828401518281111561373b57600080fd5b6137478882860161357e565b8583015250604083015193508184111561376057600080fd5b61376c8785850161360f565b6040820152606083015160608201528094505050505092915050565b600081518084526020808501945080840160005b838110156129da5781518752958201959082019060010161379c565b6000602080835283516080828501526137d460a0850182612994565b905081850151601f19604081878503018188015283835180865286860191508685019550600094505b8085101561383b57613827828751805167ffffffffffffffff908116835260209182015116910152565b9486019460019490940193908201906137fd565b50818901519550828882030160608901526138568187613788565b95505050505050606084015160808401528091505092915050565b606081016138968285805167ffffffffffffffff908116835260209182015116910152565b73ffffffffffffffffffffffffffffffffffffffff831660408301529392505050565b600067ffffffffffffffff8083168185168083038211156134df576134df612f9f565b600082198211156138ef576138ef612f9f565b500190565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b16604085015281606085015261393b8285018b612994565b9150838203608085015261394f828a612994565b915060ff881660a085015283820360c085015261396c8288612934565b90861660e0850152838103610100850152905061356e818561293456fea164736f6c634300080f000a",
}

var CommitStoreHelperABI = CommitStoreHelperMetaData.ABI

var CommitStoreHelperBin = CommitStoreHelperMetaData.Bin

func DeployCommitStoreHelper(auth *bind.TransactOpts, backend bind.ContractBackend, chainId *big.Int, sourceChainId *big.Int, afn common.Address, config CommitStoreInterfaceCommitStoreConfig) (common.Address, *types.Transaction, *CommitStoreHelper, error) {
	parsed, err := CommitStoreHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommitStoreHelperBin), backend, chainId, sourceChainId, afn, config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CommitStoreHelper{CommitStoreHelperCaller: CommitStoreHelperCaller{contract: contract}, CommitStoreHelperTransactor: CommitStoreHelperTransactor{contract: contract}, CommitStoreHelperFilterer: CommitStoreHelperFilterer{contract: contract}}, nil
}

type CommitStoreHelper struct {
	address common.Address
	abi     abi.ABI
	CommitStoreHelperCaller
	CommitStoreHelperTransactor
	CommitStoreHelperFilterer
}

type CommitStoreHelperCaller struct {
	contract *bind.BoundContract
}

type CommitStoreHelperTransactor struct {
	contract *bind.BoundContract
}

type CommitStoreHelperFilterer struct {
	contract *bind.BoundContract
}

type CommitStoreHelperSession struct {
	Contract     *CommitStoreHelper
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CommitStoreHelperCallerSession struct {
	Contract *CommitStoreHelperCaller
	CallOpts bind.CallOpts
}

type CommitStoreHelperTransactorSession struct {
	Contract     *CommitStoreHelperTransactor
	TransactOpts bind.TransactOpts
}

type CommitStoreHelperRaw struct {
	Contract *CommitStoreHelper
}

type CommitStoreHelperCallerRaw struct {
	Contract *CommitStoreHelperCaller
}

type CommitStoreHelperTransactorRaw struct {
	Contract *CommitStoreHelperTransactor
}

func NewCommitStoreHelper(address common.Address, backend bind.ContractBackend) (*CommitStoreHelper, error) {
	abi, err := abi.JSON(strings.NewReader(CommitStoreHelperABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCommitStoreHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelper{address: address, abi: abi, CommitStoreHelperCaller: CommitStoreHelperCaller{contract: contract}, CommitStoreHelperTransactor: CommitStoreHelperTransactor{contract: contract}, CommitStoreHelperFilterer: CommitStoreHelperFilterer{contract: contract}}, nil
}

func NewCommitStoreHelperCaller(address common.Address, caller bind.ContractCaller) (*CommitStoreHelperCaller, error) {
	contract, err := bindCommitStoreHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperCaller{contract: contract}, nil
}

func NewCommitStoreHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*CommitStoreHelperTransactor, error) {
	contract, err := bindCommitStoreHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperTransactor{contract: contract}, nil
}

func NewCommitStoreHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*CommitStoreHelperFilterer, error) {
	contract, err := bindCommitStoreHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperFilterer{contract: contract}, nil
}

func bindCommitStoreHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CommitStoreHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_CommitStoreHelper *CommitStoreHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitStoreHelper.Contract.CommitStoreHelperCaller.contract.Call(opts, result, method, params...)
}

func (_CommitStoreHelper *CommitStoreHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.CommitStoreHelperTransactor.contract.Transfer(opts)
}

func (_CommitStoreHelper *CommitStoreHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.CommitStoreHelperTransactor.contract.Transact(opts, method, params...)
}

func (_CommitStoreHelper *CommitStoreHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitStoreHelper.Contract.contract.Call(opts, result, method, params...)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.contract.Transfer(opts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.contract.Transact(opts, method, params...)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) GetAFN() (common.Address, error) {
	return _CommitStoreHelper.Contract.GetAFN(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) GetAFN() (common.Address, error) {
	return _CommitStoreHelper.Contract.GetAFN(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) GetConfig(opts *bind.CallOpts) (CommitStoreInterfaceCommitStoreConfig, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "getConfig")

	if err != nil {
		return *new(CommitStoreInterfaceCommitStoreConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(CommitStoreInterfaceCommitStoreConfig)).(*CommitStoreInterfaceCommitStoreConfig)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) GetConfig() (CommitStoreInterfaceCommitStoreConfig, error) {
	return _CommitStoreHelper.Contract.GetConfig(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) GetConfig() (CommitStoreInterfaceCommitStoreConfig, error) {
	return _CommitStoreHelper.Contract.GetConfig(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "getExpectedNextSequenceNumber", onRamp)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _CommitStoreHelper.Contract.GetExpectedNextSequenceNumber(&_CommitStoreHelper.CallOpts, onRamp)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _CommitStoreHelper.Contract.GetExpectedNextSequenceNumber(&_CommitStoreHelper.CallOpts, onRamp)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _CommitStoreHelper.Contract.GetMerkleRoot(&_CommitStoreHelper.CallOpts, root)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _CommitStoreHelper.Contract.GetMerkleRoot(&_CommitStoreHelper.CallOpts, root)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) IChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "i_chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) IChainId() (*big.Int, error) {
	return _CommitStoreHelper.Contract.IChainId(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) IChainId() (*big.Int, error) {
	return _CommitStoreHelper.Contract.IChainId(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) ISourceChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "i_sourceChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) ISourceChainId() (*big.Int, error) {
	return _CommitStoreHelper.Contract.ISourceChainId(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) ISourceChainId() (*big.Int, error) {
	return _CommitStoreHelper.Contract.ISourceChainId(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) IsAFNHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "isAFNHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) IsAFNHealthy() (bool, error) {
	return _CommitStoreHelper.Contract.IsAFNHealthy(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) IsAFNHealthy() (bool, error) {
	return _CommitStoreHelper.Contract.IsAFNHealthy(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "isBlessed", root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) IsBlessed(root [32]byte) (bool, error) {
	return _CommitStoreHelper.Contract.IsBlessed(&_CommitStoreHelper.CallOpts, root)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) IsBlessed(root [32]byte) (bool, error) {
	return _CommitStoreHelper.Contract.IsBlessed(&_CommitStoreHelper.CallOpts, root)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _CommitStoreHelper.Contract.LatestConfigDetails(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _CommitStoreHelper.Contract.LatestConfigDetails(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _CommitStoreHelper.Contract.LatestConfigDigestAndEpoch(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _CommitStoreHelper.Contract.LatestConfigDigestAndEpoch(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "merkleRoot", leaves, proofs, proofFlagBits)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _CommitStoreHelper.Contract.MerkleRoot(&_CommitStoreHelper.CallOpts, leaves, proofs, proofFlagBits)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _CommitStoreHelper.Contract.MerkleRoot(&_CommitStoreHelper.CallOpts, leaves, proofs, proofFlagBits)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) Owner() (common.Address, error) {
	return _CommitStoreHelper.Contract.Owner(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) Owner() (common.Address, error) {
	return _CommitStoreHelper.Contract.Owner(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) Paused() (bool, error) {
	return _CommitStoreHelper.Contract.Paused(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) Paused() (bool, error) {
	return _CommitStoreHelper.Contract.Paused(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) Transmitters() ([]common.Address, error) {
	return _CommitStoreHelper.Contract.Transmitters(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) Transmitters() ([]common.Address, error) {
	return _CommitStoreHelper.Contract.Transmitters(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) TypeAndVersion() (string, error) {
	return _CommitStoreHelper.Contract.TypeAndVersion(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) TypeAndVersion() (string, error) {
	return _CommitStoreHelper.Contract.TypeAndVersion(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "verify", hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _CommitStoreHelper.Contract.Verify(&_CommitStoreHelper.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _CommitStoreHelper.Contract.Verify(&_CommitStoreHelper.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "acceptOwnership")
}

func (_CommitStoreHelper *CommitStoreHelperSession) AcceptOwnership() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.AcceptOwnership(&_CommitStoreHelper.TransactOpts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.AcceptOwnership(&_CommitStoreHelper.TransactOpts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "pause")
}

func (_CommitStoreHelper *CommitStoreHelperSession) Pause() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Pause(&_CommitStoreHelper.TransactOpts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) Pause() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Pause(&_CommitStoreHelper.TransactOpts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) Report(opts *bind.TransactOpts, rp []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "report", rp)
}

func (_CommitStoreHelper *CommitStoreHelperSession) Report(rp []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Report(&_CommitStoreHelper.TransactOpts, rp)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) Report(rp []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Report(&_CommitStoreHelper.TransactOpts, rp)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "resetUnblessedRoots", rootToReset)
}

func (_CommitStoreHelper *CommitStoreHelperSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.ResetUnblessedRoots(&_CommitStoreHelper.TransactOpts, rootToReset)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.ResetUnblessedRoots(&_CommitStoreHelper.TransactOpts, rootToReset)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "setAFN", afn)
}

func (_CommitStoreHelper *CommitStoreHelperSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetAFN(&_CommitStoreHelper.TransactOpts, afn)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetAFN(&_CommitStoreHelper.TransactOpts, afn)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) SetConfig(opts *bind.TransactOpts, config CommitStoreInterfaceCommitStoreConfig) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "setConfig", config)
}

func (_CommitStoreHelper *CommitStoreHelperSession) SetConfig(config CommitStoreInterfaceCommitStoreConfig) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetConfig(&_CommitStoreHelper.TransactOpts, config)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) SetConfig(config CommitStoreInterfaceCommitStoreConfig) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetConfig(&_CommitStoreHelper.TransactOpts, config)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) SetConfig0(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "setConfig0", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_CommitStoreHelper *CommitStoreHelperSession) SetConfig0(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetConfig0(&_CommitStoreHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) SetConfig0(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetConfig0(&_CommitStoreHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "transferOwnership", to)
}

func (_CommitStoreHelper *CommitStoreHelperSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.TransferOwnership(&_CommitStoreHelper.TransactOpts, to)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.TransferOwnership(&_CommitStoreHelper.TransactOpts, to)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_CommitStoreHelper *CommitStoreHelperSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Transmit(&_CommitStoreHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Transmit(&_CommitStoreHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "unpause")
}

func (_CommitStoreHelper *CommitStoreHelperSession) Unpause() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Unpause(&_CommitStoreHelper.TransactOpts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) Unpause() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Unpause(&_CommitStoreHelper.TransactOpts)
}

type CommitStoreHelperAFNSetIterator struct {
	Event *CommitStoreHelperAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperAFNSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterAFNSet(opts *bind.FilterOpts) (*CommitStoreHelperAFNSetIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperAFNSetIterator{contract: _CommitStoreHelper.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperAFNSet) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperAFNSet)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseAFNSet(log types.Log) (*CommitStoreHelperAFNSet, error) {
	event := new(CommitStoreHelperAFNSet)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperCommitStoreConfigSetIterator struct {
	Event *CommitStoreHelperCommitStoreConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperCommitStoreConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperCommitStoreConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperCommitStoreConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperCommitStoreConfigSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperCommitStoreConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperCommitStoreConfigSet struct {
	Config CommitStoreInterfaceCommitStoreConfig
	Raw    types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterCommitStoreConfigSet(opts *bind.FilterOpts) (*CommitStoreHelperCommitStoreConfigSetIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "CommitStoreConfigSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperCommitStoreConfigSetIterator{contract: _CommitStoreHelper.contract, event: "CommitStoreConfigSet", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchCommitStoreConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperCommitStoreConfigSet) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "CommitStoreConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperCommitStoreConfigSet)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "CommitStoreConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseCommitStoreConfigSet(log types.Log) (*CommitStoreHelperCommitStoreConfigSet, error) {
	event := new(CommitStoreHelperCommitStoreConfigSet)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "CommitStoreConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperConfigSetIterator struct {
	Event *CommitStoreHelperConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperConfigSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterConfigSet(opts *bind.FilterOpts) (*CommitStoreHelperConfigSetIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperConfigSetIterator{contract: _CommitStoreHelper.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperConfigSet) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperConfigSet)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseConfigSet(log types.Log) (*CommitStoreHelperConfigSet, error) {
	event := new(CommitStoreHelperConfigSet)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperOwnershipTransferRequestedIterator struct {
	Event *CommitStoreHelperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreHelperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperOwnershipTransferRequestedIterator{contract: _CommitStoreHelper.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperOwnershipTransferRequested)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseOwnershipTransferRequested(log types.Log) (*CommitStoreHelperOwnershipTransferRequested, error) {
	event := new(CommitStoreHelperOwnershipTransferRequested)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperOwnershipTransferredIterator struct {
	Event *CommitStoreHelperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreHelperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperOwnershipTransferredIterator{contract: _CommitStoreHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperOwnershipTransferred)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseOwnershipTransferred(log types.Log) (*CommitStoreHelperOwnershipTransferred, error) {
	event := new(CommitStoreHelperOwnershipTransferred)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperPausedIterator struct {
	Event *CommitStoreHelperPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperPausedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterPaused(opts *bind.FilterOpts) (*CommitStoreHelperPausedIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperPausedIterator{contract: _CommitStoreHelper.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperPaused) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperPaused)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParsePaused(log types.Log) (*CommitStoreHelperPaused, error) {
	event := new(CommitStoreHelperPaused)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperReportAcceptedIterator struct {
	Event *CommitStoreHelperReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperReportAccepted struct {
	Report CCIPRelayReport
	Raw    types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*CommitStoreHelperReportAcceptedIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperReportAcceptedIterator{contract: _CommitStoreHelper.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperReportAccepted) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperReportAccepted)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseReportAccepted(log types.Log) (*CommitStoreHelperReportAccepted, error) {
	event := new(CommitStoreHelperReportAccepted)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperTransmittedIterator struct {
	Event *CommitStoreHelperTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperTransmittedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterTransmitted(opts *bind.FilterOpts) (*CommitStoreHelperTransmittedIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperTransmittedIterator{contract: _CommitStoreHelper.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperTransmitted) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperTransmitted)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseTransmitted(log types.Log) (*CommitStoreHelperTransmitted, error) {
	event := new(CommitStoreHelperTransmitted)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperUnpausedIterator struct {
	Event *CommitStoreHelperUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperUnpausedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterUnpaused(opts *bind.FilterOpts) (*CommitStoreHelperUnpausedIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperUnpausedIterator{contract: _CommitStoreHelper.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperUnpaused) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperUnpaused)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseUnpaused(log types.Log) (*CommitStoreHelperUnpaused, error) {
	event := new(CommitStoreHelperUnpaused)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_CommitStoreHelper *CommitStoreHelper) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CommitStoreHelper.abi.Events["AFNSet"].ID:
		return _CommitStoreHelper.ParseAFNSet(log)
	case _CommitStoreHelper.abi.Events["CommitStoreConfigSet"].ID:
		return _CommitStoreHelper.ParseCommitStoreConfigSet(log)
	case _CommitStoreHelper.abi.Events["ConfigSet"].ID:
		return _CommitStoreHelper.ParseConfigSet(log)
	case _CommitStoreHelper.abi.Events["OwnershipTransferRequested"].ID:
		return _CommitStoreHelper.ParseOwnershipTransferRequested(log)
	case _CommitStoreHelper.abi.Events["OwnershipTransferred"].ID:
		return _CommitStoreHelper.ParseOwnershipTransferred(log)
	case _CommitStoreHelper.abi.Events["Paused"].ID:
		return _CommitStoreHelper.ParsePaused(log)
	case _CommitStoreHelper.abi.Events["ReportAccepted"].ID:
		return _CommitStoreHelper.ParseReportAccepted(log)
	case _CommitStoreHelper.abi.Events["Transmitted"].ID:
		return _CommitStoreHelper.ParseTransmitted(log)
	case _CommitStoreHelper.abi.Events["Unpaused"].ID:
		return _CommitStoreHelper.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CommitStoreHelperAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (CommitStoreHelperCommitStoreConfigSet) Topic() common.Hash {
	return common.HexToHash("0xd877a6c59b30961c28d263c0104d975d2ddf1f185e20d5a6adb144d7bc9f16e2")
}

func (CommitStoreHelperConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (CommitStoreHelperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CommitStoreHelperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (CommitStoreHelperPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (CommitStoreHelperReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef")
}

func (CommitStoreHelperTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (CommitStoreHelperUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_CommitStoreHelper *CommitStoreHelper) Address() common.Address {
	return _CommitStoreHelper.address
}

type CommitStoreHelperInterface interface {
	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetConfig(opts *bind.CallOpts) (CommitStoreInterfaceCommitStoreConfig, error)

	GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	IChainId(opts *bind.CallOpts) (*big.Int, error)

	ISourceChainId(opts *bind.CallOpts) (*big.Int, error)

	IsAFNHealthy(opts *bind.CallOpts) (bool, error)

	IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	Report(opts *bind.TransactOpts, rp []byte) (*types.Transaction, error)

	ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, config CommitStoreInterfaceCommitStoreConfig) (*types.Transaction, error)

	SetConfig0(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterAFNSet(opts *bind.FilterOpts) (*CommitStoreHelperAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*CommitStoreHelperAFNSet, error)

	FilterCommitStoreConfigSet(opts *bind.FilterOpts) (*CommitStoreHelperCommitStoreConfigSetIterator, error)

	WatchCommitStoreConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperCommitStoreConfigSet) (event.Subscription, error)

	ParseCommitStoreConfigSet(log types.Log) (*CommitStoreHelperCommitStoreConfigSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*CommitStoreHelperConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*CommitStoreHelperConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreHelperOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CommitStoreHelperOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreHelperOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CommitStoreHelperOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*CommitStoreHelperPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*CommitStoreHelperPaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*CommitStoreHelperReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*CommitStoreHelperReportAccepted, error)

	FilterTransmitted(opts *bind.FilterOpts) (*CommitStoreHelperTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*CommitStoreHelperTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*CommitStoreHelperUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*CommitStoreHelperUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

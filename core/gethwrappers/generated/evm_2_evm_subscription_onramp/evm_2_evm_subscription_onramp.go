// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package evm_2_evm_subscription_onramp

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type AggregateRateLimiterInterfaceRateLimiterConfig struct {
	Rate     *big.Int
	Capacity *big.Int
}

type AggregateRateLimiterInterfaceTokenBucket struct {
	Rate        *big.Int
	Capacity    *big.Int
	Tokens      *big.Int
	LastUpdated *big.Int
}

type BaseOnRampInterfaceOnRampConfig struct {
	RelayingFeeJuels uint64
	MaxDataSize      uint64
	MaxTokensLength  uint64
}

type CCIPEVM2AnySubscriptionMessage struct {
	Receiver common.Address
	Data     []byte
	Tokens   []common.Address
	Amounts  []*big.Int
	GasLimit *big.Int
}

type CCIPEVM2EVMSubscriptionMessage struct {
	SourceChainId  *big.Int
	SequenceNumber uint64
	Sender         common.Address
	Receiver       common.Address
	Nonce          uint64
	Data           []byte
	Tokens         []common.Address
	Amounts        []*big.Int
	GasLimit       *big.Int
}

var EVM2EVMSubscriptionOnRampMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contractPoolInterface[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowlist\",\"type\":\"address[]\"},{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"relayingFeeJuels\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxDataSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTokensLength\",\"type\":\"uint64\"}],\"internalType\":\"structBaseOnRampInterface.OnRampConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"structAggregateRateLimiterInterface.RateLimiterConfig\",\"name\":\"rateLimiterConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"tokenLimitsAdmin\",\"type\":\"address\"},{\"internalType\":\"contractAny2EVMSubscriptionOnRampRouterInterface\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAFNSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadHealthConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BucketOverfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTokenAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenPoolConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualSize\",\"type\":\"uint256\"}],\"name\":\"MessageTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeCalledByRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPools\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCallableByAdminOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PriceNotFoundForToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefillRateTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterMustSetOriginalSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenPoolMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensAndPriceLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedNumberOfTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueExceedsAllowedThreshold\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AllowListEnabledSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowlist\",\"type\":\"address[]\"}],\"name\":\"AllowListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCCIP.EVM2EVMSubscriptionMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"CCIPSendRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"relayingFeeJuels\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxDataSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTokensLength\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"structBaseOnRampInterface.OnRampConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"OnRampConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractPoolInterface\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractPoolInterface\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"TokenPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensRemovedFromBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contractPoolInterface\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateCurrentTokenBucketState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"structAggregateRateLimiterInterface.TokenBucket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"internalType\":\"structCCIP.EVM2AnySubscriptionMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"originalSender\",\"type\":\"address\"}],\"name\":\"forwardFromRouter\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"relayingFeeJuels\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxDataSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTokensLength\",\"type\":\"uint64\"}],\"internalType\":\"structBaseOnRampInterface.OnRampConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"sourceToken\",\"type\":\"address\"}],\"name\":\"getDestinationToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDestinationTokens\",\"outputs\":[{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"sourceToken\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"contractPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contractIERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getPricesForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenLimitAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenPool\",\"outputs\":[{\"internalType\":\"contractPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_destinationChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAFNHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contractPoolInterface\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowlist\",\"type\":\"address[]\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAllowlistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"relayingFeeJuels\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxDataSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTokensLength\",\"type\":\"uint64\"}],\"internalType\":\"structBaseOnRampInterface.OnRampConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"structAggregateRateLimiterInterface.RateLimiterConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setRateLimiterConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setTokenLimitAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAccumulatedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b50604051620039f9380380620039f98339810160408190526200003491620006f0565b6000805460ff191681558a908a908a908a908a908a908a908a908a908a908390839088908b908b908a903390819081620000b55760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0380851661010002610100600160a81b031990921691909117909155811615620000ef57620000ef81620003ec565b5050506001600160a01b0381166200011a57604051630958ef9b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b039290921691909117905580518251146200015c5760405162d8548360e71b815260040160405180910390fd5b8151620001719060049060208501906200049d565b5060005b825181101562000253576000828281518110620001965762000196620007f8565b602002602001015190506040518060400160405280826001600160a01b03168152602001836001600160601b031681525060036000868581518110620001e057620001e0620007f8565b6020908102919091018101516001600160a01b03908116835282820193909352604091820160009081208551958301516001600160601b0316600160a01b0295851695909517909455939091168252600590925220805460ff191660011790556200024b816200080e565b905062000175565b5050815115905062000283576006805460ff191660011790558051620002819060079060208401906200049d565b505b60005b8151811015620002f057600160086000848481518110620002ab57620002ab620007f8565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055620002e8816200080e565b905062000286565b5050600980546001600160a01b039283166001600160a01b03199182161790915560408051608080820183528551808352602096870180518885018190529051848601819052426060909501859052600c92909255600d55600e55600f919091559d909d5260a09b909b528551601180549388015197909d01516001600160401b03908116600160801b02600160801b600160c01b031998821668010000000000000000026001600160801b031990951691909216179290921795909516179099555050601280549790911696909516959095179093555050601080546001600160401b031916905550620008369a5050505050505050505050565b336001600160a01b03821603620004465760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401620000ac565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b828054828255906000526020600020908101928215620004f5579160200282015b82811115620004f557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620004be565b506200050392915062000507565b5090565b5b8082111562000503576000815560010162000508565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200054a57600080fd5b50565b600082601f8301126200055f57600080fd5b815160206001600160401b03808311156200057e576200057e6200051e565b8260051b604051601f19603f83011681018181108482111715620005a657620005a66200051e565b604052938452858101830193838101925087851115620005c557600080fd5b83870191505b84821015620005f1578151620005e18162000534565b83529183019190830190620005cb565b979650505050505050565b8051620006098162000534565b919050565b80516001600160401b03811681146200060957600080fd5b6000606082840312156200063957600080fd5b604051606081016001600160401b03811182821017156200065e576200065e6200051e565b6040529050806200066f836200060e565b81526200067f602084016200060e565b602082015262000692604084016200060e565b60408201525092915050565b600060408284031215620006b157600080fd5b604080519081016001600160401b0381118282101715620006d657620006d66200051e565b604052825181526020928301519281019290925250919050565b6000806000806000806000806000806101a08b8d0312156200071157600080fd5b8a5160208c015160408d0151919b5099506001600160401b03808211156200073857600080fd5b620007468e838f016200054d565b995060608d01519150808211156200075d57600080fd5b6200076b8e838f016200054d565b985060808d01519150808211156200078257600080fd5b50620007918d828e016200054d565b965050620007a260a08c01620005fc565b9450620007b38c60c08d0162000626565b9350620007c58c6101208d016200069e565b9250620007d66101608c01620005fc565b9150620007e76101808c01620005fc565b90509295989b9194979a5092959850565b634e487b7160e01b600052603260045260246000fd5b6000600182016200082f57634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05161319662000863600039600061051a015260008181610351015261161a01526131966000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c8063744b92e211610160578063b0f479a1116100d8578063c5eff3d01161008c578063eb511dd411610071578063eb511dd414610650578063f2fde38b14610663578063f78faa321461067657600080fd5b8063c5eff3d014610628578063d7644ba21461063d57600080fd5b8063bbe4f6db116100bd578063bbe4f6db1461027c578063c0d7865514610573578063c3f909d41461058657600080fd5b8063b0f479a11461054f578063b4069b311461056057600080fd5b80638da5cb5b1161012f57806391872543116101145780639187254314610502578063a721719514610515578063ae990dce1461053c57600080fd5b80638da5cb5b146104b157806390c2339b146104c757600080fd5b8063744b92e21461048657806379ba5097146104995780638456cb59146104a157806389c06568146104a957600080fd5b80634352fa9f116101f357806359e96b5b116101c25780635c975abb116101a75780635c975abb14610453578063671dc3371461045e578063681fba161461047157600080fd5b806359e96b5b146104145780635b16ebb71461042757600080fd5b80634352fa9f146103bd5780634741062e146103d0578063552b818b146103f0578063599f64311461040357600080fd5b80632222dd421161024a57806339aa92641161022f57806339aa9264146103815780633f4ba83a146103945780634120fccd1461039c57600080fd5b80632222dd421461033b57806328094b591461034c57600080fd5b806304c2a34a1461027c578063108ee5fc146102c5578063147809b3146102da578063181f5a77146102f2575b600080fd5b6102a861028a36600461270f565b6001600160a01b039081166000908152600360205260409020541690565b6040516001600160a01b0390911681526020015b60405180910390f35b6102d86102d336600461270f565b610681565b005b6102e2610737565b60405190151581526020016102bc565b61032e6040518060400160405280601f81526020017f45564d3245564d537562736372697074696f6e4f6e52616d7020312e302e300081525081565b6040516102bc9190612788565b6002546001600160a01b03166102a8565b6103737f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016102bc565b6102d861038f36600461270f565b6107c4565b6102d86107fb565b6103a461080d565b60405167ffffffffffffffff90911681526020016102bc565b6102d86103cb366004612927565b61082d565b6103e36103de36600461298b565b610a82565b6040516102bc91906129fb565b6102d86103fe366004612a0e565b610b4a565b6009546001600160a01b03166102a8565b6102d8610422366004612a83565b610cd4565b6102e261043536600461270f565b6001600160a01b031660009081526005602052604090205460ff1690565b60005460ff166102e2565b6102d861046c366004612ac4565b610d38565b610479610d8a565b6040516102bc9190612b15565b6102d8610494366004612b28565b610e4f565b6102d8611187565b6102d861126f565b61047961127f565b60005461010090046001600160a01b03166102a8565b6104cf6112e1565b6040516102bc91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6102d8610510366004612b61565b611382565b6103737f000000000000000000000000000000000000000000000000000000000000000081565b6103a461054a366004612c20565b6114ae565b6012546001600160a01b03166102a8565b6102a861056e36600461270f565b61179a565b6102d861058136600461270f565b611888565b6105f56040805160608101825260008082526020820181905291810191909152506040805160608101825260115467ffffffffffffffff808216835268010000000000000000820481166020840152700100000000000000000000000000000000909104169181019190915290565b60408051825167ffffffffffffffff908116825260208085015182169083015292820151909216908201526060016102bc565b6106306118eb565b6040516102bc9190612d03565b6102d861064b366004612d5e565b61194b565b6102d861065e366004612b28565b611994565b6102d861067136600461270f565b611b77565b60065460ff166102e2565b610689611b8b565b6001600160a01b0381166106c9576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff1983168117909355604080519190921680825260208201939093527f2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28910160405180910390a15050565b600254604080517f46f8e6d700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916346f8e6d79160048083019260209291908290030181865afa15801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190612d7b565b15905090565b6107cc611b8b565b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610803611b8b565b61080b611bea565b565b6010546000906108289067ffffffffffffffff166001612dc7565b905090565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b03161415801561086a57506009546001600160a01b03163314155b156108a1576040517ff6cd562000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151815181146108dd576040517f3959163300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b5460005b8181101561093757600a6000600b838154811061090257610902612df3565b60009182526020808320909101546001600160a01b0316835282019290925260400181205561093081612e22565b90506108e3565b5060005b82811015610a6757600085828151811061095757610957612df3565b6020026020010151905060006001600160a01b0316816001600160a01b0316036109ad576040517fe622e04000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8482815181106109bf576109bf612df3565b6020026020010151600a6000836001600160a01b03166001600160a01b03168152602001908152602001600020819055507f4cd172fb90d81a44670b97a6e2a5a3b01417f33a809b634a5a1764e93d338e1f81868481518110610a2457610a24612df3565b6020026020010151604051610a4e9291906001600160a01b03929092168252602082015260400190565b60405180910390a150610a6081612e22565b905061093b565b508351610a7b90600b906020870190612617565b5050505050565b80516060908067ffffffffffffffff811115610aa057610aa06127ab565b604051908082528060200260200182016040528015610ac9578160200160208202803683370190505b50915060005b81811015610b4357600a6000858381518110610aed57610aed612df3565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110610b2857610b28612df3565b6020908102919091010152610b3c81612e22565b9050610acf565b5050919050565b610b52611b8b565b60006007805480602002602001604051908101604052809291908181526020018280548015610baa57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b8c575b5050505050905060005b8151811015610c1757600060086000848481518110610bd557610bd5612df3565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055610c1081612e22565b9050610bb4565b50610c2460078484612685565b5060005b82811015610c9557600160086000868685818110610c4857610c48612df3565b9050602002016020810190610c5d919061270f565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055610c8e81612e22565b9050610c28565b507ff8adc5fee247b62a85f63294cb46e4be61da815e4756bc57672a83b24faf0dda8383604051610cc7929190612e3c565b60405180910390a1505050565b610cdc611b8b565b610cf06001600160a01b0384168383611c86565b604080516001600160a01b038086168252841660208201529081018290527f5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa890606001610cc7565b610d40611b8b565b806011610d4d8282612e95565b9050507fcc6ce9e57c1de2adf58a81e94b96b43d77ea6973e3f08e6ea4fe83d62ae60e9e81604051610d7f9190612f83565b60405180910390a150565b60045460609067ffffffffffffffff811115610da857610da86127ab565b604051908082528060200260200182016040528015610dd1578160200160208202803683370190505b50905060005b600454811015610e4b57610e1160048281548110610df757610df7612df3565b6000918252602090912001546001600160a01b031661179a565b828281518110610e2357610e23612df3565b6001600160a01b0390921660209283029190910190910152610e4481612e22565b9050610dd7565b5090565b610e57611b8b565b6004546000819003610e95576040517f6987841e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03838116600090815260036020908152604091829020825180840190935254928316808352740100000000000000000000000000000000000000009093046bffffffffffffffffffffffff169082015290610f23576040517f9c8787c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001600160a01b031681600001516001600160a01b031614610f72576040517f6cc7b99800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006004610f81600185612fd6565b81548110610f9157610f91612df3565b9060005260206000200160009054906101000a90046001600160a01b03169050600482602001516bffffffffffffffffffffffff1681548110610fd657610fd6612df3565b6000918252602090912001546001600160a01b03166004610ff8600186612fd6565b8154811061100857611008612df3565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600483602001516bffffffffffffffffffffffff168154811061105c5761105c612df3565b6000918252602080832090910180546001600160a01b0394851673ffffffffffffffffffffffffffffffffffffffff199091161790558481015184841683526003909152604090912080546bffffffffffffffffffffffff90921674010000000000000000000000000000000000000000029190921617905560048054806110e6576110e6612fed565b600082815260208082206000199084018101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b038781168084526003835260408085208590559188168085526005845293829020805460ff191690558151908152918201929092527f987eb3c2f78454541205f72f34839b434c306c9eaf4922efd7c0c3060fdb2e4c910160405180910390a15050505050565b6001546001600160a01b031633146111e65760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054336101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff84161784556001805473ffffffffffffffffffffffffffffffffffffffff191690556040516001600160a01b03919093041692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b611277611b8b565b61080b611d0b565b606060048054806020026020016040519081016040528092919081815260200182805480156112d757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112b9575b5050505050905090565b61130c6040518060800160405280600081526020016000815260200160008152602001600081525090565b60408051608081018252600c548152600d546020820152600e5491810191909152600f546060820181905242906000906113469083612fd6565b602084015184519192506113729161135e908461301c565b856040015161136d919061303b565b611d93565b6040840152506060820152919050565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b0316141580156113bf57506009546001600160a01b03163314155b156113f6576040517ff6cd562000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805179ffffffffffffffffffffffffffffffffffffffffffffffffffff1161144a576040517f3d9cbdab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611454600c611da9565b6020810151600d8190558151600c55600e546114709190611d93565b600e55602081810151825160408051928352928201527f8e012bd57e8109fb3513158da3ff482a86a1e3ff4d5be099be0945772547322d9101610d7f565b6000805460ff16156115025760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016111dd565b600260009054906101000a90046001600160a01b03166001600160a01b03166346f8e6d76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115799190612d7b565b156115af576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6012546001600160a01b031633146115f3576040517f1c0a352900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61160c8360200151518460400151856060015185611e56565b6040805161012081019091527f0000000000000000000000000000000000000000000000000000000000000000815260108054600092916020830191849061165d9067ffffffffffffffff16613053565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905567ffffffffffffffff168152602001846001600160a01b0316815260200185600001516001600160a01b031681526020016013600087600001516001600160a01b03166001600160a01b03168152602001908152602001600020600081819054906101000a900467ffffffffffffffff166116fc90613053565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905567ffffffffffffffff168152602001856020015181526020018560400151815260200185606001518152602001856080015181525090507f73dfb9df8214728e699dbaaf6ba97aa125afaaba83a5d0de7903062e7c5b313981604051611787919061307a565b60405180910390a1602001519392505050565b6001600160a01b03808216600090815260036020526040812054909116806117ee576040517f9c8787c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038084166000908152600360209081526040918290205482517f21df0da700000000000000000000000000000000000000000000000000000000815292519316926321df0da79260048082019392918290030181865afa15801561185d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118819190613150565b9392505050565b611890611b8b565b6012805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fc6b438e6a8a59579ce6a4406cbd203b740e0d47b458aae6596339bcd40c40d1590602001610d7f565b606060078054806020026020016040519081016040528092919081815260200182805480156112d7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116112b9575050505050905090565b611953611b8b565b6006805460ff19168215159081179091556040519081527fccf4daf6ab6430389f26b970595dab82a5881ad454770907e415ede27c8df03290602001610d7f565b61199c611b8b565b6001600160a01b03821615806119b957506001600160a01b038116155b156119f0576040517f6c2a418000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03828116600090815260036020908152604091829020825180840190935254928316808352740100000000000000000000000000000000000000009093046bffffffffffffffffffffffff16908201529015611a7f576040517f3caf458500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03828116808352600480546bffffffffffffffffffffffff908116602080870191825288861660008181526003835260408082208a51955190961674010000000000000000000000000000000000000000029490981693909317909355835460018082019095557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805473ffffffffffffffffffffffffffffffffffffffff1916841790558482526005815290859020805460ff19169093179092558351908152908101919091527f95f865c2808f8b2a85eea2611db7843150ee7835ef1403f9755918a97d76933c9101610cc7565b611b7f611b8b565b611b8881612159565b50565b60005461010090046001600160a01b0316331461080b5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016111dd565b60005460ff16611c3c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016111dd565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611d06908490612215565b505050565b60005460ff1615611d5e5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016111dd565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c693390565b6000818310611da25781611881565b5090919050565b6001810154600282015442911480611dc45750808260030154145b15611dcd575050565b816001015482600201541115611e0f576040517f9725942a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826003015482611e219190612fd6565b60018401548454919250611e4891611e39908461301c565b856002015461136d919061303b565b600284015550600390910155565b6012546001600160a01b0316611e98576040517f179ce99f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116611ed8576040517fa4ec747900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60115468010000000000000000900467ffffffffffffffff16841115611f4c576011546040517f869337890000000000000000000000000000000000000000000000000000000081526801000000000000000090910467ffffffffffffffff166004820152602481018590526044016111dd565b8251601154700100000000000000000000000000000000900467ffffffffffffffff16811180611f7d575082518114155b15611fb4576040517f4c056b6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065460ff168015611fdf57506001600160a01b03821660009081526008602052604090205460ff16155b15612021576040517fd0d259760000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016111dd565b61202b84846122fa565b60005b8181101561215157600085828151811061204a5761204a612df3565b602002602001015190506000612078826001600160a01b039081166000908152600360205260409020541690565b90506001600160a01b0381166120c5576040517fbf16aab60000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016111dd565b806001600160a01b031663503c28588785815181106120e6576120e6612df3565b60200260200101516040518263ffffffff1660e01b815260040161210c91815260200190565b600060405180830381600087803b15801561212657600080fd5b505af115801561213a573d6000803e3d6000fd5b5050505050508061214a90612e22565b905061202e565b505050505050565b336001600160a01b038216036121b15760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016111dd565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600061226a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124889092919063ffffffff16565b805190915015611d0657808060200190518101906122889190612d7b565b611d065760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016111dd565b6000805b83518110156123f1576000600a600086848151811061231f5761231f612df3565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050806000036123ae5784828151811061236457612364612df3565b60200260200101516040517f9a655f7b0000000000000000000000000000000000000000000000000000000081526004016111dd91906001600160a01b0391909116815260200190565b8382815181106123c0576123c0612df3565b6020026020010151816123d3919061301c565b6123dd908461303b565b925050806123ea90612e22565b90506122fe565b508015611d0657612402600c611da9565b600e5481111561243e576040517f3bfa6f3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600c60020160008282546124539190612fd6565b90915550506040518181527fcecaabdf078137e9f3ffad598f679665628d62e269c3d929bd10fef8a22ba37890602001610cc7565b6060612497848460008561249f565b949350505050565b6060824710156125175760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016111dd565b843b6125655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016111dd565b600080866001600160a01b03168587604051612581919061316d565b60006040518083038185875af1925050503d80600081146125be576040519150601f19603f3d011682016040523d82523d6000602084013e6125c3565b606091505b50915091506125d38282866125de565b979650505050505050565b606083156125ed575081611881565b8251156125fd5782518084602001fd5b8160405162461bcd60e51b81526004016111dd9190612788565b828054828255906000526020600020908101928215612679579160200282015b82811115612679578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190612637565b50610e4b9291506126e5565b828054828255906000526020600020908101928215612679579160200282015b8281111561267957815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038435161782556020909201916001909101906126a5565b5b80821115610e4b57600081556001016126e6565b6001600160a01b0381168114611b8857600080fd5b60006020828403121561272157600080fd5b8135611881816126fa565b60005b8381101561274757818101518382015260200161272f565b83811115612756576000848401525b50505050565b6000815180845261277481602086016020860161272c565b601f01601f19169290920160200192915050565b602081526000611881602083018461275c565b80356127a6816126fa565b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156127fd576127fd6127ab565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561282c5761282c6127ab565b604052919050565b600067ffffffffffffffff82111561284e5761284e6127ab565b5060051b60200190565b600082601f83011261286957600080fd5b8135602061287e61287983612834565b612803565b82815260059290921b8401810191818101908684111561289d57600080fd5b8286015b848110156128c15780356128b4816126fa565b83529183019183016128a1565b509695505050505050565b600082601f8301126128dd57600080fd5b813560206128ed61287983612834565b82815260059290921b8401810191818101908684111561290c57600080fd5b8286015b848110156128c15780358352918301918301612910565b6000806040838503121561293a57600080fd5b823567ffffffffffffffff8082111561295257600080fd5b61295e86838701612858565b9350602085013591508082111561297457600080fd5b50612981858286016128cc565b9150509250929050565b60006020828403121561299d57600080fd5b813567ffffffffffffffff8111156129b457600080fd5b61249784828501612858565b600081518084526020808501945080840160005b838110156129f0578151875295820195908201906001016129d4565b509495945050505050565b60208152600061188160208301846129c0565b60008060208385031215612a2157600080fd5b823567ffffffffffffffff80821115612a3957600080fd5b818501915085601f830112612a4d57600080fd5b813581811115612a5c57600080fd5b8660208260051b8501011115612a7157600080fd5b60209290920196919550909350505050565b600080600060608486031215612a9857600080fd5b8335612aa3816126fa565b92506020840135612ab3816126fa565b929592945050506040919091013590565b600060608284031215612ad657600080fd5b50919050565b600081518084526020808501945080840160005b838110156129f05781516001600160a01b031687529582019590820190600101612af0565b6020815260006118816020830184612adc565b60008060408385031215612b3b57600080fd5b8235612b46816126fa565b91506020830135612b56816126fa565b809150509250929050565b600060408284031215612b7357600080fd5b6040516040810181811067ffffffffffffffff82111715612b9657612b966127ab565b604052823581526020928301359281019290925250919050565b600082601f830112612bc157600080fd5b813567ffffffffffffffff811115612bdb57612bdb6127ab565b612bee6020601f19601f84011601612803565b818152846020838601011115612c0357600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612c3357600080fd5b823567ffffffffffffffff80821115612c4b57600080fd5b9084019060a08287031215612c5f57600080fd5b612c676127da565b612c708361279b565b8152602083013582811115612c8457600080fd5b612c9088828601612bb0565b602083015250604083013582811115612ca857600080fd5b612cb488828601612858565b604083015250606083013582811115612ccc57600080fd5b612cd8888286016128cc565b60608301525060808301356080820152809450505050612cfa6020840161279b565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015612d445783516001600160a01b031683529284019291840191600101612d1f565b50909695505050505050565b8015158114611b8857600080fd5b600060208284031215612d7057600080fd5b813561188181612d50565b600060208284031215612d8d57600080fd5b815161188181612d50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff808316818516808303821115612dea57612dea612d98565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006000198203612e3557612e35612d98565b5060010190565b60208082528181018390526000908460408401835b868110156128c1578235612e64816126fa565b6001600160a01b031682529183019190830190600101612e51565b67ffffffffffffffff81168114611b8857600080fd5b8135612ea081612e7f565b67ffffffffffffffff811690508154817fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000082161783556020840135612ee481612e7f565b6fffffffffffffffff00000000000000008160401b16905080837fffffffffffffffffffffffffffffffff000000000000000000000000000000008416171784556040850135612f3381612e7f565b77ffffffffffffffff000000000000000000000000000000008160801b16847fffffffffffffffff0000000000000000000000000000000000000000000000008516178317178555505050505050565b606081018235612f9281612e7f565b67ffffffffffffffff9081168352602084013590612faf82612e7f565b9081166020840152604084013590612fc682612e7f565b8082166040850152505092915050565b600082821015612fe857612fe8612d98565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081600019048311821515161561303657613036612d98565b500290565b6000821982111561304e5761304e612d98565b500190565b600067ffffffffffffffff80831681810361307057613070612d98565b6001019392505050565b6020815281516020820152600060208301516130a2604084018267ffffffffffffffff169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b038116608084015250608083015167ffffffffffffffff811660a08401525060a08301516101208060c08501526130ff61014085018361275c565b915060c0850151601f19808685030160e087015261311d8483612adc565b935060e0870151915061010081878603018188015261313c85846129c0565b970151959092019490945250929392505050565b60006020828403121561316257600080fd5b8151611881816126fa565b6000825161317f81846020870161272c565b919091019291505056fea164736f6c634300080f000a",
}

var EVM2EVMSubscriptionOnRampABI = EVM2EVMSubscriptionOnRampMetaData.ABI

var EVM2EVMSubscriptionOnRampBin = EVM2EVMSubscriptionOnRampMetaData.Bin

func DeployEVM2EVMSubscriptionOnRamp(auth *bind.TransactOpts, backend bind.ContractBackend, chainId *big.Int, destinationChainId *big.Int, tokens []common.Address, pools []common.Address, allowlist []common.Address, afn common.Address, config BaseOnRampInterfaceOnRampConfig, rateLimiterConfig AggregateRateLimiterInterfaceRateLimiterConfig, tokenLimitsAdmin common.Address, router common.Address) (common.Address, *types.Transaction, *EVM2EVMSubscriptionOnRamp, error) {
	parsed, err := EVM2EVMSubscriptionOnRampMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EVM2EVMSubscriptionOnRampBin), backend, chainId, destinationChainId, tokens, pools, allowlist, afn, config, rateLimiterConfig, tokenLimitsAdmin, router)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EVM2EVMSubscriptionOnRamp{EVM2EVMSubscriptionOnRampCaller: EVM2EVMSubscriptionOnRampCaller{contract: contract}, EVM2EVMSubscriptionOnRampTransactor: EVM2EVMSubscriptionOnRampTransactor{contract: contract}, EVM2EVMSubscriptionOnRampFilterer: EVM2EVMSubscriptionOnRampFilterer{contract: contract}}, nil
}

type EVM2EVMSubscriptionOnRamp struct {
	address common.Address
	abi     abi.ABI
	EVM2EVMSubscriptionOnRampCaller
	EVM2EVMSubscriptionOnRampTransactor
	EVM2EVMSubscriptionOnRampFilterer
}

type EVM2EVMSubscriptionOnRampCaller struct {
	contract *bind.BoundContract
}

type EVM2EVMSubscriptionOnRampTransactor struct {
	contract *bind.BoundContract
}

type EVM2EVMSubscriptionOnRampFilterer struct {
	contract *bind.BoundContract
}

type EVM2EVMSubscriptionOnRampSession struct {
	Contract     *EVM2EVMSubscriptionOnRamp
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type EVM2EVMSubscriptionOnRampCallerSession struct {
	Contract *EVM2EVMSubscriptionOnRampCaller
	CallOpts bind.CallOpts
}

type EVM2EVMSubscriptionOnRampTransactorSession struct {
	Contract     *EVM2EVMSubscriptionOnRampTransactor
	TransactOpts bind.TransactOpts
}

type EVM2EVMSubscriptionOnRampRaw struct {
	Contract *EVM2EVMSubscriptionOnRamp
}

type EVM2EVMSubscriptionOnRampCallerRaw struct {
	Contract *EVM2EVMSubscriptionOnRampCaller
}

type EVM2EVMSubscriptionOnRampTransactorRaw struct {
	Contract *EVM2EVMSubscriptionOnRampTransactor
}

func NewEVM2EVMSubscriptionOnRamp(address common.Address, backend bind.ContractBackend) (*EVM2EVMSubscriptionOnRamp, error) {
	abi, err := abi.JSON(strings.NewReader(EVM2EVMSubscriptionOnRampABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindEVM2EVMSubscriptionOnRamp(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRamp{address: address, abi: abi, EVM2EVMSubscriptionOnRampCaller: EVM2EVMSubscriptionOnRampCaller{contract: contract}, EVM2EVMSubscriptionOnRampTransactor: EVM2EVMSubscriptionOnRampTransactor{contract: contract}, EVM2EVMSubscriptionOnRampFilterer: EVM2EVMSubscriptionOnRampFilterer{contract: contract}}, nil
}

func NewEVM2EVMSubscriptionOnRampCaller(address common.Address, caller bind.ContractCaller) (*EVM2EVMSubscriptionOnRampCaller, error) {
	contract, err := bindEVM2EVMSubscriptionOnRamp(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampCaller{contract: contract}, nil
}

func NewEVM2EVMSubscriptionOnRampTransactor(address common.Address, transactor bind.ContractTransactor) (*EVM2EVMSubscriptionOnRampTransactor, error) {
	contract, err := bindEVM2EVMSubscriptionOnRamp(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampTransactor{contract: contract}, nil
}

func NewEVM2EVMSubscriptionOnRampFilterer(address common.Address, filterer bind.ContractFilterer) (*EVM2EVMSubscriptionOnRampFilterer, error) {
	contract, err := bindEVM2EVMSubscriptionOnRamp(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampFilterer{contract: contract}, nil
}

func bindEVM2EVMSubscriptionOnRamp(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EVM2EVMSubscriptionOnRampABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EVM2EVMSubscriptionOnRamp.Contract.EVM2EVMSubscriptionOnRampCaller.contract.Call(opts, result, method, params...)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.EVM2EVMSubscriptionOnRampTransactor.contract.Transfer(opts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.EVM2EVMSubscriptionOnRampTransactor.contract.Transact(opts, method, params...)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EVM2EVMSubscriptionOnRamp.Contract.contract.Call(opts, result, method, params...)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.contract.Transfer(opts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.contract.Transact(opts, method, params...)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) CalculateCurrentTokenBucketState(opts *bind.CallOpts) (AggregateRateLimiterInterfaceTokenBucket, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "calculateCurrentTokenBucketState")

	if err != nil {
		return *new(AggregateRateLimiterInterfaceTokenBucket), err
	}

	out0 := *abi.ConvertType(out[0], new(AggregateRateLimiterInterfaceTokenBucket)).(*AggregateRateLimiterInterfaceTokenBucket)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) CalculateCurrentTokenBucketState() (AggregateRateLimiterInterfaceTokenBucket, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.CalculateCurrentTokenBucketState(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) CalculateCurrentTokenBucketState() (AggregateRateLimiterInterfaceTokenBucket, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.CalculateCurrentTokenBucketState(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetAFN() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAFN(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetAFN() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAFN(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetAllowlist(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getAllowlist")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetAllowlist() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAllowlist(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetAllowlist() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAllowlist(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetAllowlistEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getAllowlistEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetAllowlistEnabled() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAllowlistEnabled(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetAllowlistEnabled() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetAllowlistEnabled(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetConfig(opts *bind.CallOpts) (BaseOnRampInterfaceOnRampConfig, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getConfig")

	if err != nil {
		return *new(BaseOnRampInterfaceOnRampConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(BaseOnRampInterfaceOnRampConfig)).(*BaseOnRampInterfaceOnRampConfig)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetConfig() (BaseOnRampInterfaceOnRampConfig, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetConfig(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetConfig() (BaseOnRampInterfaceOnRampConfig, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetConfig(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetDestinationToken(opts *bind.CallOpts, sourceToken common.Address) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getDestinationToken", sourceToken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetDestinationToken(sourceToken common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetDestinationToken(&_EVM2EVMSubscriptionOnRamp.CallOpts, sourceToken)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetDestinationToken(sourceToken common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetDestinationToken(&_EVM2EVMSubscriptionOnRamp.CallOpts, sourceToken)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetDestinationTokens(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getDestinationTokens")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetDestinationTokens() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetDestinationTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetDestinationTokens() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetDestinationTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetExpectedNextSequenceNumber(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getExpectedNextSequenceNumber")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetExpectedNextSequenceNumber() (uint64, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetExpectedNextSequenceNumber(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetExpectedNextSequenceNumber() (uint64, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetExpectedNextSequenceNumber(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetPool(opts *bind.CallOpts, sourceToken common.Address) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getPool", sourceToken)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetPool(sourceToken common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPool(&_EVM2EVMSubscriptionOnRamp.CallOpts, sourceToken)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetPool(sourceToken common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPool(&_EVM2EVMSubscriptionOnRamp.CallOpts, sourceToken)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetPoolTokens(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getPoolTokens")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetPoolTokens() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPoolTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetPoolTokens() ([]common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPoolTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetPricesForTokens(opts *bind.CallOpts, tokens []common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getPricesForTokens", tokens)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetPricesForTokens(tokens []common.Address) ([]*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPricesForTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts, tokens)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetPricesForTokens(tokens []common.Address) ([]*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetPricesForTokens(&_EVM2EVMSubscriptionOnRamp.CallOpts, tokens)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetRouter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getRouter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetRouter() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetRouter(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetRouter() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetRouter(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetTokenLimitAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getTokenLimitAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetTokenLimitAdmin() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetTokenLimitAdmin(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetTokenLimitAdmin() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetTokenLimitAdmin(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) GetTokenPool(opts *bind.CallOpts, token common.Address) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "getTokenPool", token)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) GetTokenPool(token common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetTokenPool(&_EVM2EVMSubscriptionOnRamp.CallOpts, token)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) GetTokenPool(token common.Address) (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.GetTokenPool(&_EVM2EVMSubscriptionOnRamp.CallOpts, token)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) IChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "i_chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) IChainId() (*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IChainId(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) IChainId() (*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IChainId(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) IDestinationChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "i_destinationChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) IDestinationChainId() (*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IDestinationChainId(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) IDestinationChainId() (*big.Int, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IDestinationChainId(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) IsAFNHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "isAFNHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) IsAFNHealthy() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IsAFNHealthy(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) IsAFNHealthy() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IsAFNHealthy(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) IsPool(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "isPool", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) IsPool(addr common.Address) (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IsPool(&_EVM2EVMSubscriptionOnRamp.CallOpts, addr)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) IsPool(addr common.Address) (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.IsPool(&_EVM2EVMSubscriptionOnRamp.CallOpts, addr)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) Owner() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Owner(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) Owner() (common.Address, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Owner(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) Paused() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Paused(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) Paused() (bool, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Paused(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _EVM2EVMSubscriptionOnRamp.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) TypeAndVersion() (string, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.TypeAndVersion(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampCallerSession) TypeAndVersion() (string, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.TypeAndVersion(&_EVM2EVMSubscriptionOnRamp.CallOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "acceptOwnership")
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) AcceptOwnership() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.AcceptOwnership(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.AcceptOwnership(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) AddPool(opts *bind.TransactOpts, token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "addPool", token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) AddPool(token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.AddPool(&_EVM2EVMSubscriptionOnRamp.TransactOpts, token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) AddPool(token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.AddPool(&_EVM2EVMSubscriptionOnRamp.TransactOpts, token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) ForwardFromRouter(opts *bind.TransactOpts, message CCIPEVM2AnySubscriptionMessage, originalSender common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "forwardFromRouter", message, originalSender)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) ForwardFromRouter(message CCIPEVM2AnySubscriptionMessage, originalSender common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.ForwardFromRouter(&_EVM2EVMSubscriptionOnRamp.TransactOpts, message, originalSender)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) ForwardFromRouter(message CCIPEVM2AnySubscriptionMessage, originalSender common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.ForwardFromRouter(&_EVM2EVMSubscriptionOnRamp.TransactOpts, message, originalSender)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "pause")
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) Pause() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Pause(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) Pause() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Pause(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) RemovePool(opts *bind.TransactOpts, token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "removePool", token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) RemovePool(token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.RemovePool(&_EVM2EVMSubscriptionOnRamp.TransactOpts, token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) RemovePool(token common.Address, pool common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.RemovePool(&_EVM2EVMSubscriptionOnRamp.TransactOpts, token, pool)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setAFN", afn)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAFN(&_EVM2EVMSubscriptionOnRamp.TransactOpts, afn)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAFN(&_EVM2EVMSubscriptionOnRamp.TransactOpts, afn)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetAllowlist(opts *bind.TransactOpts, allowlist []common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setAllowlist", allowlist)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetAllowlist(allowlist []common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAllowlist(&_EVM2EVMSubscriptionOnRamp.TransactOpts, allowlist)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetAllowlist(allowlist []common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAllowlist(&_EVM2EVMSubscriptionOnRamp.TransactOpts, allowlist)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetAllowlistEnabled(opts *bind.TransactOpts, enabled bool) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setAllowlistEnabled", enabled)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetAllowlistEnabled(enabled bool) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAllowlistEnabled(&_EVM2EVMSubscriptionOnRamp.TransactOpts, enabled)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetAllowlistEnabled(enabled bool) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetAllowlistEnabled(&_EVM2EVMSubscriptionOnRamp.TransactOpts, enabled)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetConfig(opts *bind.TransactOpts, config BaseOnRampInterfaceOnRampConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setConfig", config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetConfig(config BaseOnRampInterfaceOnRampConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetConfig(&_EVM2EVMSubscriptionOnRamp.TransactOpts, config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetConfig(config BaseOnRampInterfaceOnRampConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetConfig(&_EVM2EVMSubscriptionOnRamp.TransactOpts, config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetPrices(opts *bind.TransactOpts, tokens []common.Address, prices []*big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setPrices", tokens, prices)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetPrices(tokens []common.Address, prices []*big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetPrices(&_EVM2EVMSubscriptionOnRamp.TransactOpts, tokens, prices)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetPrices(tokens []common.Address, prices []*big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetPrices(&_EVM2EVMSubscriptionOnRamp.TransactOpts, tokens, prices)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetRateLimiterConfig(opts *bind.TransactOpts, config AggregateRateLimiterInterfaceRateLimiterConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setRateLimiterConfig", config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetRateLimiterConfig(config AggregateRateLimiterInterfaceRateLimiterConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetRateLimiterConfig(&_EVM2EVMSubscriptionOnRamp.TransactOpts, config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetRateLimiterConfig(config AggregateRateLimiterInterfaceRateLimiterConfig) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetRateLimiterConfig(&_EVM2EVMSubscriptionOnRamp.TransactOpts, config)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetRouter(opts *bind.TransactOpts, router common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setRouter", router)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetRouter(router common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetRouter(&_EVM2EVMSubscriptionOnRamp.TransactOpts, router)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetRouter(router common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetRouter(&_EVM2EVMSubscriptionOnRamp.TransactOpts, router)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) SetTokenLimitAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "setTokenLimitAdmin", newAdmin)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) SetTokenLimitAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetTokenLimitAdmin(&_EVM2EVMSubscriptionOnRamp.TransactOpts, newAdmin)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) SetTokenLimitAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.SetTokenLimitAdmin(&_EVM2EVMSubscriptionOnRamp.TransactOpts, newAdmin)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "transferOwnership", to)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.TransferOwnership(&_EVM2EVMSubscriptionOnRamp.TransactOpts, to)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.TransferOwnership(&_EVM2EVMSubscriptionOnRamp.TransactOpts, to)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "unpause")
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) Unpause() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Unpause(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) Unpause() (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.Unpause(&_EVM2EVMSubscriptionOnRamp.TransactOpts)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactor) WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.contract.Transact(opts, "withdrawAccumulatedFees", feeToken, recipient, amount)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.WithdrawAccumulatedFees(&_EVM2EVMSubscriptionOnRamp.TransactOpts, feeToken, recipient, amount)
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampTransactorSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _EVM2EVMSubscriptionOnRamp.Contract.WithdrawAccumulatedFees(&_EVM2EVMSubscriptionOnRamp.TransactOpts, feeToken, recipient, amount)
}

type EVM2EVMSubscriptionOnRampAFNSetIterator struct {
	Event *EVM2EVMSubscriptionOnRampAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampAFNSetIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterAFNSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAFNSetIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampAFNSetIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAFNSet) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampAFNSet)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseAFNSet(log types.Log) (*EVM2EVMSubscriptionOnRampAFNSet, error) {
	event := new(EVM2EVMSubscriptionOnRampAFNSet)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator struct {
	Event *EVM2EVMSubscriptionOnRampAllowListEnabledSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampAllowListEnabledSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampAllowListEnabledSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampAllowListEnabledSet struct {
	Enabled bool
	Raw     types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterAllowListEnabledSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "AllowListEnabledSet")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "AllowListEnabledSet", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchAllowListEnabledSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAllowListEnabledSet) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "AllowListEnabledSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampAllowListEnabledSet)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AllowListEnabledSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseAllowListEnabledSet(log types.Log) (*EVM2EVMSubscriptionOnRampAllowListEnabledSet, error) {
	event := new(EVM2EVMSubscriptionOnRampAllowListEnabledSet)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AllowListEnabledSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampAllowListSetIterator struct {
	Event *EVM2EVMSubscriptionOnRampAllowListSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampAllowListSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampAllowListSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampAllowListSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampAllowListSetIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampAllowListSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampAllowListSet struct {
	Allowlist []common.Address
	Raw       types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterAllowListSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAllowListSetIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "AllowListSet")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampAllowListSetIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "AllowListSet", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchAllowListSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAllowListSet) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "AllowListSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampAllowListSet)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AllowListSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseAllowListSet(log types.Log) (*EVM2EVMSubscriptionOnRampAllowListSet, error) {
	event := new(EVM2EVMSubscriptionOnRampAllowListSet)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "AllowListSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator struct {
	Event *EVM2EVMSubscriptionOnRampCCIPSendRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampCCIPSendRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampCCIPSendRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampCCIPSendRequested struct {
	Message CCIPEVM2EVMSubscriptionMessage
	Raw     types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterCCIPSendRequested(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "CCIPSendRequested")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "CCIPSendRequested", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchCCIPSendRequested(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampCCIPSendRequested) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "CCIPSendRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampCCIPSendRequested)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "CCIPSendRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseCCIPSendRequested(log types.Log) (*EVM2EVMSubscriptionOnRampCCIPSendRequested, error) {
	event := new(EVM2EVMSubscriptionOnRampCCIPSendRequested)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "CCIPSendRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampConfigChangedIterator struct {
	Event *EVM2EVMSubscriptionOnRampConfigChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampConfigChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampConfigChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampConfigChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampConfigChangedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampConfigChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampConfigChanged struct {
	Capacity *big.Int
	Rate     *big.Int
	Raw      types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterConfigChanged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampConfigChangedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "ConfigChanged")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampConfigChangedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "ConfigChanged", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchConfigChanged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampConfigChanged) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "ConfigChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampConfigChanged)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "ConfigChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseConfigChanged(log types.Log) (*EVM2EVMSubscriptionOnRampConfigChanged, error) {
	event := new(EVM2EVMSubscriptionOnRampConfigChanged)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "ConfigChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampFeeChargedIterator struct {
	Event *EVM2EVMSubscriptionOnRampFeeCharged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampFeeChargedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampFeeCharged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampFeeCharged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampFeeChargedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampFeeChargedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampFeeCharged struct {
	From common.Address
	To   common.Address
	Fee  *big.Int
	Raw  types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterFeeCharged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampFeeChargedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "FeeCharged")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampFeeChargedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "FeeCharged", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchFeeCharged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampFeeCharged) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "FeeCharged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampFeeCharged)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "FeeCharged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseFeeCharged(log types.Log) (*EVM2EVMSubscriptionOnRampFeeCharged, error) {
	event := new(EVM2EVMSubscriptionOnRampFeeCharged)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "FeeCharged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampFeesWithdrawnIterator struct {
	Event *EVM2EVMSubscriptionOnRampFeesWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampFeesWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampFeesWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampFeesWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampFeesWithdrawnIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampFeesWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampFeesWithdrawn struct {
	FeeToken  common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterFeesWithdrawn(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampFeesWithdrawnIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampFeesWithdrawnIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "FeesWithdrawn", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampFeesWithdrawn) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampFeesWithdrawn)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseFeesWithdrawn(log types.Log) (*EVM2EVMSubscriptionOnRampFeesWithdrawn, error) {
	event := new(EVM2EVMSubscriptionOnRampFeesWithdrawn)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampOnRampConfigSetIterator struct {
	Event *EVM2EVMSubscriptionOnRampOnRampConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampOnRampConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampOnRampConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampOnRampConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampOnRampConfigSetIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampOnRampConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampOnRampConfigSet struct {
	Config BaseOnRampInterfaceOnRampConfig
	Raw    types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterOnRampConfigSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampOnRampConfigSetIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "OnRampConfigSet")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampOnRampConfigSetIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "OnRampConfigSet", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchOnRampConfigSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOnRampConfigSet) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "OnRampConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampOnRampConfigSet)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OnRampConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseOnRampConfigSet(log types.Log) (*EVM2EVMSubscriptionOnRampOnRampConfigSet, error) {
	event := new(EVM2EVMSubscriptionOnRampOnRampConfigSet)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OnRampConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator struct {
	Event *EVM2EVMSubscriptionOnRampOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampOwnershipTransferRequested)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseOwnershipTransferRequested(log types.Log) (*EVM2EVMSubscriptionOnRampOwnershipTransferRequested, error) {
	event := new(EVM2EVMSubscriptionOnRampOwnershipTransferRequested)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampOwnershipTransferredIterator struct {
	Event *EVM2EVMSubscriptionOnRampOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EVM2EVMSubscriptionOnRampOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampOwnershipTransferredIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampOwnershipTransferred)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseOwnershipTransferred(log types.Log) (*EVM2EVMSubscriptionOnRampOwnershipTransferred, error) {
	event := new(EVM2EVMSubscriptionOnRampOwnershipTransferred)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampPausedIterator struct {
	Event *EVM2EVMSubscriptionOnRampPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampPausedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterPaused(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPausedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampPausedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPaused) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampPaused)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParsePaused(log types.Log) (*EVM2EVMSubscriptionOnRampPaused, error) {
	event := new(EVM2EVMSubscriptionOnRampPaused)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampPoolAddedIterator struct {
	Event *EVM2EVMSubscriptionOnRampPoolAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampPoolAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampPoolAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampPoolAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampPoolAddedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampPoolAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampPoolAdded struct {
	Token common.Address
	Pool  common.Address
	Raw   types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterPoolAdded(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPoolAddedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "PoolAdded")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampPoolAddedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "PoolAdded", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchPoolAdded(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPoolAdded) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "PoolAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampPoolAdded)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "PoolAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParsePoolAdded(log types.Log) (*EVM2EVMSubscriptionOnRampPoolAdded, error) {
	event := new(EVM2EVMSubscriptionOnRampPoolAdded)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "PoolAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampPoolRemovedIterator struct {
	Event *EVM2EVMSubscriptionOnRampPoolRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampPoolRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampPoolRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampPoolRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampPoolRemovedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampPoolRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampPoolRemoved struct {
	Token common.Address
	Pool  common.Address
	Raw   types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterPoolRemoved(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPoolRemovedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "PoolRemoved")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampPoolRemovedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "PoolRemoved", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchPoolRemoved(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPoolRemoved) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "PoolRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampPoolRemoved)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "PoolRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParsePoolRemoved(log types.Log) (*EVM2EVMSubscriptionOnRampPoolRemoved, error) {
	event := new(EVM2EVMSubscriptionOnRampPoolRemoved)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "PoolRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampRouterSetIterator struct {
	Event *EVM2EVMSubscriptionOnRampRouterSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampRouterSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampRouterSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampRouterSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampRouterSetIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampRouterSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampRouterSet struct {
	Router common.Address
	Raw    types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterRouterSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampRouterSetIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "RouterSet")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampRouterSetIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "RouterSet", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchRouterSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampRouterSet) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "RouterSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampRouterSet)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "RouterSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseRouterSet(log types.Log) (*EVM2EVMSubscriptionOnRampRouterSet, error) {
	event := new(EVM2EVMSubscriptionOnRampRouterSet)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "RouterSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampTokenPriceChangedIterator struct {
	Event *EVM2EVMSubscriptionOnRampTokenPriceChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampTokenPriceChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampTokenPriceChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampTokenPriceChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampTokenPriceChangedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampTokenPriceChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampTokenPriceChanged struct {
	Token    common.Address
	NewPrice *big.Int
	Raw      types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterTokenPriceChanged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampTokenPriceChangedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "TokenPriceChanged")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampTokenPriceChangedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "TokenPriceChanged", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchTokenPriceChanged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampTokenPriceChanged) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "TokenPriceChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampTokenPriceChanged)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "TokenPriceChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseTokenPriceChanged(log types.Log) (*EVM2EVMSubscriptionOnRampTokenPriceChanged, error) {
	event := new(EVM2EVMSubscriptionOnRampTokenPriceChanged)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "TokenPriceChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator struct {
	Event *EVM2EVMSubscriptionOnRampTokensRemovedFromBucket

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampTokensRemovedFromBucket)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampTokensRemovedFromBucket)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampTokensRemovedFromBucket struct {
	Tokens *big.Int
	Raw    types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterTokensRemovedFromBucket(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "TokensRemovedFromBucket")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "TokensRemovedFromBucket", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchTokensRemovedFromBucket(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampTokensRemovedFromBucket) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "TokensRemovedFromBucket")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampTokensRemovedFromBucket)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "TokensRemovedFromBucket", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseTokensRemovedFromBucket(log types.Log) (*EVM2EVMSubscriptionOnRampTokensRemovedFromBucket, error) {
	event := new(EVM2EVMSubscriptionOnRampTokensRemovedFromBucket)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "TokensRemovedFromBucket", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type EVM2EVMSubscriptionOnRampUnpausedIterator struct {
	Event *EVM2EVMSubscriptionOnRampUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *EVM2EVMSubscriptionOnRampUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EVM2EVMSubscriptionOnRampUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(EVM2EVMSubscriptionOnRampUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *EVM2EVMSubscriptionOnRampUnpausedIterator) Error() error {
	return it.fail
}

func (it *EVM2EVMSubscriptionOnRampUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type EVM2EVMSubscriptionOnRampUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) FilterUnpaused(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampUnpausedIterator, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &EVM2EVMSubscriptionOnRampUnpausedIterator{contract: _EVM2EVMSubscriptionOnRamp.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampUnpaused) (event.Subscription, error) {

	logs, sub, err := _EVM2EVMSubscriptionOnRamp.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(EVM2EVMSubscriptionOnRampUnpaused)
				if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRampFilterer) ParseUnpaused(log types.Log) (*EVM2EVMSubscriptionOnRampUnpaused, error) {
	event := new(EVM2EVMSubscriptionOnRampUnpaused)
	if err := _EVM2EVMSubscriptionOnRamp.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRamp) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _EVM2EVMSubscriptionOnRamp.abi.Events["AFNSet"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseAFNSet(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["AllowListEnabledSet"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseAllowListEnabledSet(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["AllowListSet"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseAllowListSet(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["CCIPSendRequested"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseCCIPSendRequested(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["ConfigChanged"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseConfigChanged(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["FeeCharged"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseFeeCharged(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["FeesWithdrawn"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseFeesWithdrawn(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["OnRampConfigSet"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseOnRampConfigSet(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["OwnershipTransferRequested"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseOwnershipTransferRequested(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["OwnershipTransferred"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseOwnershipTransferred(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["Paused"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParsePaused(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["PoolAdded"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParsePoolAdded(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["PoolRemoved"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParsePoolRemoved(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["RouterSet"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseRouterSet(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["TokenPriceChanged"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseTokenPriceChanged(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["TokensRemovedFromBucket"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseTokensRemovedFromBucket(log)
	case _EVM2EVMSubscriptionOnRamp.abi.Events["Unpaused"].ID:
		return _EVM2EVMSubscriptionOnRamp.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (EVM2EVMSubscriptionOnRampAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (EVM2EVMSubscriptionOnRampAllowListEnabledSet) Topic() common.Hash {
	return common.HexToHash("0xccf4daf6ab6430389f26b970595dab82a5881ad454770907e415ede27c8df032")
}

func (EVM2EVMSubscriptionOnRampAllowListSet) Topic() common.Hash {
	return common.HexToHash("0xf8adc5fee247b62a85f63294cb46e4be61da815e4756bc57672a83b24faf0dda")
}

func (EVM2EVMSubscriptionOnRampCCIPSendRequested) Topic() common.Hash {
	return common.HexToHash("0x73dfb9df8214728e699dbaaf6ba97aa125afaaba83a5d0de7903062e7c5b3139")
}

func (EVM2EVMSubscriptionOnRampConfigChanged) Topic() common.Hash {
	return common.HexToHash("0x8e012bd57e8109fb3513158da3ff482a86a1e3ff4d5be099be0945772547322d")
}

func (EVM2EVMSubscriptionOnRampFeeCharged) Topic() common.Hash {
	return common.HexToHash("0x945458c62aa39df7a4d87d6c4dbaaab7de5d870c9a1fe40e2b7571d84f158a8d")
}

func (EVM2EVMSubscriptionOnRampFeesWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa8")
}

func (EVM2EVMSubscriptionOnRampOnRampConfigSet) Topic() common.Hash {
	return common.HexToHash("0xcc6ce9e57c1de2adf58a81e94b96b43d77ea6973e3f08e6ea4fe83d62ae60e9e")
}

func (EVM2EVMSubscriptionOnRampOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (EVM2EVMSubscriptionOnRampOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (EVM2EVMSubscriptionOnRampPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (EVM2EVMSubscriptionOnRampPoolAdded) Topic() common.Hash {
	return common.HexToHash("0x95f865c2808f8b2a85eea2611db7843150ee7835ef1403f9755918a97d76933c")
}

func (EVM2EVMSubscriptionOnRampPoolRemoved) Topic() common.Hash {
	return common.HexToHash("0x987eb3c2f78454541205f72f34839b434c306c9eaf4922efd7c0c3060fdb2e4c")
}

func (EVM2EVMSubscriptionOnRampRouterSet) Topic() common.Hash {
	return common.HexToHash("0xc6b438e6a8a59579ce6a4406cbd203b740e0d47b458aae6596339bcd40c40d15")
}

func (EVM2EVMSubscriptionOnRampTokenPriceChanged) Topic() common.Hash {
	return common.HexToHash("0x4cd172fb90d81a44670b97a6e2a5a3b01417f33a809b634a5a1764e93d338e1f")
}

func (EVM2EVMSubscriptionOnRampTokensRemovedFromBucket) Topic() common.Hash {
	return common.HexToHash("0xcecaabdf078137e9f3ffad598f679665628d62e269c3d929bd10fef8a22ba378")
}

func (EVM2EVMSubscriptionOnRampUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_EVM2EVMSubscriptionOnRamp *EVM2EVMSubscriptionOnRamp) Address() common.Address {
	return _EVM2EVMSubscriptionOnRamp.address
}

type EVM2EVMSubscriptionOnRampInterface interface {
	CalculateCurrentTokenBucketState(opts *bind.CallOpts) (AggregateRateLimiterInterfaceTokenBucket, error)

	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetAllowlist(opts *bind.CallOpts) ([]common.Address, error)

	GetAllowlistEnabled(opts *bind.CallOpts) (bool, error)

	GetConfig(opts *bind.CallOpts) (BaseOnRampInterfaceOnRampConfig, error)

	GetDestinationToken(opts *bind.CallOpts, sourceToken common.Address) (common.Address, error)

	GetDestinationTokens(opts *bind.CallOpts) ([]common.Address, error)

	GetExpectedNextSequenceNumber(opts *bind.CallOpts) (uint64, error)

	GetPool(opts *bind.CallOpts, sourceToken common.Address) (common.Address, error)

	GetPoolTokens(opts *bind.CallOpts) ([]common.Address, error)

	GetPricesForTokens(opts *bind.CallOpts, tokens []common.Address) ([]*big.Int, error)

	GetRouter(opts *bind.CallOpts) (common.Address, error)

	GetTokenLimitAdmin(opts *bind.CallOpts) (common.Address, error)

	GetTokenPool(opts *bind.CallOpts, token common.Address) (common.Address, error)

	IChainId(opts *bind.CallOpts) (*big.Int, error)

	IDestinationChainId(opts *bind.CallOpts) (*big.Int, error)

	IsAFNHealthy(opts *bind.CallOpts) (bool, error)

	IsPool(opts *bind.CallOpts, addr common.Address) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddPool(opts *bind.TransactOpts, token common.Address, pool common.Address) (*types.Transaction, error)

	ForwardFromRouter(opts *bind.TransactOpts, message CCIPEVM2AnySubscriptionMessage, originalSender common.Address) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	RemovePool(opts *bind.TransactOpts, token common.Address, pool common.Address) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetAllowlist(opts *bind.TransactOpts, allowlist []common.Address) (*types.Transaction, error)

	SetAllowlistEnabled(opts *bind.TransactOpts, enabled bool) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, config BaseOnRampInterfaceOnRampConfig) (*types.Transaction, error)

	SetPrices(opts *bind.TransactOpts, tokens []common.Address, prices []*big.Int) (*types.Transaction, error)

	SetRateLimiterConfig(opts *bind.TransactOpts, config AggregateRateLimiterInterfaceRateLimiterConfig) (*types.Transaction, error)

	SetRouter(opts *bind.TransactOpts, router common.Address) (*types.Transaction, error)

	SetTokenLimitAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	FilterAFNSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*EVM2EVMSubscriptionOnRampAFNSet, error)

	FilterAllowListEnabledSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAllowListEnabledSetIterator, error)

	WatchAllowListEnabledSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAllowListEnabledSet) (event.Subscription, error)

	ParseAllowListEnabledSet(log types.Log) (*EVM2EVMSubscriptionOnRampAllowListEnabledSet, error)

	FilterAllowListSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampAllowListSetIterator, error)

	WatchAllowListSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampAllowListSet) (event.Subscription, error)

	ParseAllowListSet(log types.Log) (*EVM2EVMSubscriptionOnRampAllowListSet, error)

	FilterCCIPSendRequested(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampCCIPSendRequestedIterator, error)

	WatchCCIPSendRequested(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampCCIPSendRequested) (event.Subscription, error)

	ParseCCIPSendRequested(log types.Log) (*EVM2EVMSubscriptionOnRampCCIPSendRequested, error)

	FilterConfigChanged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampConfigChangedIterator, error)

	WatchConfigChanged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampConfigChanged) (event.Subscription, error)

	ParseConfigChanged(log types.Log) (*EVM2EVMSubscriptionOnRampConfigChanged, error)

	FilterFeeCharged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampFeeChargedIterator, error)

	WatchFeeCharged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampFeeCharged) (event.Subscription, error)

	ParseFeeCharged(log types.Log) (*EVM2EVMSubscriptionOnRampFeeCharged, error)

	FilterFeesWithdrawn(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampFeesWithdrawnIterator, error)

	WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampFeesWithdrawn) (event.Subscription, error)

	ParseFeesWithdrawn(log types.Log) (*EVM2EVMSubscriptionOnRampFeesWithdrawn, error)

	FilterOnRampConfigSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampOnRampConfigSetIterator, error)

	WatchOnRampConfigSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOnRampConfigSet) (event.Subscription, error)

	ParseOnRampConfigSet(log types.Log) (*EVM2EVMSubscriptionOnRampOnRampConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EVM2EVMSubscriptionOnRampOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*EVM2EVMSubscriptionOnRampOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EVM2EVMSubscriptionOnRampOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*EVM2EVMSubscriptionOnRampOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*EVM2EVMSubscriptionOnRampPaused, error)

	FilterPoolAdded(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPoolAddedIterator, error)

	WatchPoolAdded(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPoolAdded) (event.Subscription, error)

	ParsePoolAdded(log types.Log) (*EVM2EVMSubscriptionOnRampPoolAdded, error)

	FilterPoolRemoved(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampPoolRemovedIterator, error)

	WatchPoolRemoved(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampPoolRemoved) (event.Subscription, error)

	ParsePoolRemoved(log types.Log) (*EVM2EVMSubscriptionOnRampPoolRemoved, error)

	FilterRouterSet(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampRouterSetIterator, error)

	WatchRouterSet(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampRouterSet) (event.Subscription, error)

	ParseRouterSet(log types.Log) (*EVM2EVMSubscriptionOnRampRouterSet, error)

	FilterTokenPriceChanged(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampTokenPriceChangedIterator, error)

	WatchTokenPriceChanged(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampTokenPriceChanged) (event.Subscription, error)

	ParseTokenPriceChanged(log types.Log) (*EVM2EVMSubscriptionOnRampTokenPriceChanged, error)

	FilterTokensRemovedFromBucket(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampTokensRemovedFromBucketIterator, error)

	WatchTokensRemovedFromBucket(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampTokensRemovedFromBucket) (event.Subscription, error)

	ParseTokensRemovedFromBucket(log types.Log) (*EVM2EVMSubscriptionOnRampTokensRemovedFromBucket, error)

	FilterUnpaused(opts *bind.FilterOpts) (*EVM2EVMSubscriptionOnRampUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *EVM2EVMSubscriptionOnRampUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*EVM2EVMSubscriptionOnRampUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

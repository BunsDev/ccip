// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrapped_token_pool

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type RateLimiterConfig struct {
	IsEnabled bool
	Rate      *big.Int
	Capacity  *big.Int
}

type RateLimiterTokenBucket struct {
	Capacity    *big.Int
	Tokens      *big.Int
	Rate        *big.Int
	LastUpdated *big.Int
	IsEnabled   bool
}

type TokenPoolRampUpdate struct {
	Ramp    common.Address
	Allowed bool
}

var WrappedTokenPoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint208\",\"name\":\"rate\",\"type\":\"uint208\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"structRateLimiter.Config\",\"name\":\"rateLimiterConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BucketOverfilled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"}],\"name\":\"ConsumingMoreThanMaxCapacity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermissionsError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"waitInSeconds\",\"type\":\"uint256\"}],\"name\":\"RateLimitReached\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"OffRampAllowanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"OnRampAllowanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ramp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"structTokenPool.RampUpdate[]\",\"name\":\"onRamps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ramp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"structTokenPool.RampUpdate[]\",\"name\":\"offRamps\",\"type\":\"tuple[]\"}],\"name\":\"applyRampUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRateLimiterState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint208\",\"name\":\"rate\",\"type\":\"uint208\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdated\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"structRateLimiter.TokenBucket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"isOffRamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"isOnRamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lockOrBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"releaseOrMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint208\",\"name\":\"rate\",\"type\":\"uint208\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"structRateLimiter.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setRateLimiterConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162002d3c38038062002d3c833981016040819052620000349162000388565b838383828230863380600081620000925760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c557620000c581620001dc565b50506001805460ff60a01b19169055506001600160a01b038216620000fd57604051634655efd160e11b815260040160405180910390fd5b6040805160a0810182528282018051808352905160208084018290528501516001600160d01b03169383018490524264ffffffffff1660608401819052945115156080938401819052600692909255600755600880547fff0000000000000000000000000000000000000000000000000000000000000016909317600160d01b909402939093176001600160f81b0316600160f81b9093029290921790556001600160a01b03919091169052600c620001b7838262000500565b50600d620001c6828262000500565b50505060ff1660a05250620005cc945050505050565b336001600160a01b03821603620002365760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000089565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715620002c257620002c262000287565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620002f357620002f362000287565b604052919050565b600082601f8301126200030d57600080fd5b81516001600160401b0381111562000329576200032962000287565b60206200033f601f8301601f19168201620002c8565b82815285828487010111156200035457600080fd5b60005b838110156200037457858101830151828201840152820162000357565b506000928101909101919091529392505050565b60008060008084860360c0811215620003a057600080fd5b85516001600160401b0380821115620003b857600080fd5b620003c689838a01620002fb565b96506020880151915080821115620003dd57600080fd5b50620003ec88828901620002fb565b945050604086015160ff811681146200040457600080fd5b92506060605f19820112156200041957600080fd5b50620004246200029d565b606086015180151581146200043857600080fd5b815260808601516001600160d01b03811681146200045557600080fd5b602082015260a095909501516040860152509194909350909190565b600181811c908216806200048657607f821691505b602082108103620004a757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004fb57600081815260208120601f850160051c81016020861015620004d65750805b601f850160051c820191505b81811015620004f757828155600101620004e2565b5050505b505050565b81516001600160401b038111156200051c576200051c62000287565b62000534816200052d845462000471565b84620004ad565b602080601f8311600181146200056c5760008415620005535750858301515b600019600386901b1c1916600185901b178555620004f7565b600085815260208120601f198616915b828110156200059d578886015182559484019460019091019084016200057c565b5085821015620005bc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05161274a620005f2600039600061029e0152600061022a015261274a6000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80636f32b872116100ee57806395d89b4111610097578063a9059cbb11610071578063a9059cbb1461042d578063af51911214610440578063dd62ed3e14610453578063f2fde38b1461049957600080fd5b806395d89b41146103ff5780639687544514610407578063a457c2d71461041a57600080fd5b80638456cb59116100c85780638456cb59146103c65780638627fad6146103ce5780638da5cb5b146103e157600080fd5b80636f32b8721461037557806370a082311461038857806379ba5097146103be57600080fd5b806323b872dd1161015b578063395093511161013557806339509351146102c85780633f4ba83a146102db578063546719cd146102e35780635c975abb1461035257600080fd5b806323b872dd1461026f5780633091aee714610282578063313ce5671461029757600080fd5b806318160ddd1161018c57806318160ddd146102035780631d7a74a01461021557806321df0da71461022857600080fd5b806301ffc9a7146101b357806306fdde03146101db578063095ea7b3146101f0575b600080fd5b6101c66101c1366004611fb1565b6104ac565b60405190151581526020015b60405180910390f35b6101e3610545565b6040516101d29190611ff3565b6101c66101fe366004612088565b6105d7565b600b545b6040519081526020016101d2565b6101c66102233660046120b2565b6105ed565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d2565b6101c661027d3660046120cd565b6105fa565b6102956102903660046121c0565b6106e5565b005b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101d2565b6101c66102d6366004612088565b6106fb565b610295610744565b6102eb610756565b6040516101d29190600060a082019050825182526020830151602083015279ffffffffffffffffffffffffffffffffffffffffffffffffffff604084015116604083015264ffffffffff606084015116606083015260808301511515608083015292915050565b60015474010000000000000000000000000000000000000000900460ff166101c6565b6101c66103833660046120b2565b610825565b6102076103963660046120b2565b73ffffffffffffffffffffffffffffffffffffffff1660009081526009602052604090205490565b610295610832565b61029561092f565b6102956103dc3660046122ee565b61093f565b60005473ffffffffffffffffffffffffffffffffffffffff1661024a565b6101e3610a6a565b6102956104153660046123c6565b610a79565b6101c6610428366004612088565b610b85565b6101c661043b366004612088565b610c5d565b61029561044e366004612516565b610c6a565b61020761046136600461257a565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600a6020908152604080832093909416825291909152205490565b6102956104a73660046120b2565b610e7a565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f317fa33400000000000000000000000000000000000000000000000000000000148061053f57507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b6060600c8054610554906125ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610580906125ad565b80156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b5050505050905090565b60006105e4338484610e8b565b50600192915050565b600061053f60048361103e565b6000610607848484611070565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600a60209081526040808320338452909152902054828110156106cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6106da8533858403610e8b565b506001949350505050565b6106ed611324565b6106f86006826113a5565b50565b336000818152600a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916105e491859061073f90869061262f565b610e8b565b61074c611324565b6107546114d6565b565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a0810182526006548152600754602082015260085479ffffffffffffffffffffffffffffffffffffffffffffffffffff8116928201929092527a010000000000000000000000000000000000000000000000000000820464ffffffffff1660608201527f010000000000000000000000000000000000000000000000000000000000000090910460ff1615156080820152610820906115cf565b905090565b600061053f60028361103e565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016106c4565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610937611324565b610754611672565b60015474010000000000000000000000000000000000000000900460ff16156109c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016106c4565b6109cd336105ed565b610a03576040517f5307f5ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a0c8361175e565b610a168484611769565b60405183815273ffffffffffffffffffffffffffffffffffffffff85169033907f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f09060200160405180910390a35050505050565b6060600d8054610554906125ad565b60015474010000000000000000000000000000000000000000900460ff1615610afe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016106c4565b610b0733610825565b610b3d576040517f5307f5ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b473085611889565b60405184815233907f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df79060200160405180910390a250505050505050565b336000908152600a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205482811015610c46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106c4565b610c533385858403610e8b565b5060019392505050565b60006105e4338484611070565b610c72611324565b60005b8251811015610d73576000838281518110610c9257610c92612642565b602002602001015190508060200151610cb8578051610cb390600290611a76565b610cc6565b8051610cc690600290611a98565b15610d62577fbceff8f229c6dfcbf8bdcfb18726b84b0fd249b4803deb3948ff34d904013662848381518110610cfe57610cfe612642565b602002602001015160000151858481518110610d1c57610d1c612642565b602002602001015160200151604051610d5992919073ffffffffffffffffffffffffffffffffffffffff9290921682521515602082015260400190565b60405180910390a15b50610d6c81612671565b9050610c75565b5060005b8151811015610e75576000828281518110610d9457610d94612642565b602002602001015190508060200151610dba578051610db590600490611a76565b610dc8565b8051610dc890600490611a98565b15610e64577fd8c3333ded377884ced3869cd0bcb9be54ea664076df1f5d39c4689120313648838381518110610e0057610e00612642565b602002602001015160000151848481518110610e1e57610e1e612642565b602002602001015160200151604051610e5b92919073ffffffffffffffffffffffffffffffffffffffff9290921682521515602082015260400190565b60405180910390a15b50610e6e81612671565b9050610d77565b505050565b610e82611324565b6106f881611aba565b73ffffffffffffffffffffffffffffffffffffffff8316610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106c4565b73ffffffffffffffffffffffffffffffffffffffff8216610fd0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106c4565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152600a602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205415155b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8316611113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106c4565b73ffffffffffffffffffffffffffffffffffffffff82166111b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106c4565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600960205260409020548181101561126c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106c4565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600960205260408082208585039055918516815290812080548492906112b090849061262f565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161131691815260200190565b60405180910390a350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016106c4565b6113ae82611baf565b8051600283018054604084015180865560208501517effffffffff00000000000000000000000000000000000000000000000000009092167f0100000000000000000000000000000000000000000000000000000000000000941515949094027fffffffffffff0000000000000000000000000000000000000000000000000000169390931779ffffffffffffffffffffffffffffffffffffffffffffffffffff90911617905560018301546114649190611d03565b60018301556040805182511515815260208084015179ffffffffffffffffffffffffffffffffffffffffffffffffffff169082015282820151918101919091527f44a2350342338075ac038f37b8d9e49e696e360492cb44cc6bc37fc117f19df8906060015b60405180910390a15050565b60015474010000000000000000000000000000000000000000900460ff1661155a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016106c4565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526000826060015164ffffffffff164261161391906126a9565b8351604085015191925061165b916116479079ffffffffffffffffffffffffffffffffffffffffffffffffffff16846126bc565b8560200151611656919061262f565b611d03565b6020840152505064ffffffffff4216606082015290565b60015474010000000000000000000000000000000000000000900460ff16156116f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016106c4565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115a53390565b6106f8600682611d19565b73ffffffffffffffffffffffffffffffffffffffff82166117e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106c4565b80600b60008282546117f8919061262f565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600960205260408120805483929061183290849061262f565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff821661192c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106c4565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260096020526040902054818110156119e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106c4565b73ffffffffffffffffffffffffffffffffffffffff831660009081526009602052604081208383039055600b8054849290611a1e9084906126a9565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60006110698373ffffffffffffffffffffffffffffffffffffffff8416611e6f565b60006110698373ffffffffffffffffffffffffffffffffffffffff8416611f62565b3373ffffffffffffffffffffffffffffffffffffffff821603611b39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016106c4565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b805460018201541480611beb5750600281015464ffffffffff7a0100000000000000000000000000000000000000000000000000009091041642145b15611bf35750565b805460018201541115611c32576040517f9725942a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002810154600090611c69907a010000000000000000000000000000000000000000000000000000900464ffffffffff16426126a9565b82546002840154919250611cac91611c9d9079ffffffffffffffffffffffffffffffffffffffffffffffffffff16846126bc565b8460010154611656919061262f565b60018301555060020180547fff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffffff167a0100000000000000000000000000000000000000000000000000004264ffffffffff1602179055565b6000818310611d125781611069565b5090919050565b60028201547f0100000000000000000000000000000000000000000000000000000000000000900460ff161580611d4e575080155b15611d57575050565b611d6082611baf565b8154811115611da85781546040517f48369c430000000000000000000000000000000000000000000000000000000081526004810191909152602481018290526044016106c4565b8082600101541015611e26576002820154600183015479ffffffffffffffffffffffffffffffffffffffffffffffffffff90911690611de790836126a9565b611df191906126d3565b6040517fdc96cefa0000000000000000000000000000000000000000000000000000000081526004016106c491815260200190565b80826001016000828254611e3a91906126a9565b90915550506040518181527f1871cdf8010e63f2eb8384381a68dfa7416dc571a5517e66e88b2d2d0c0a690a906020016114ca565b60008181526001830160205260408120548015611f58576000611e936001836126a9565b8554909150600090611ea7906001906126a9565b9050818114611f0c576000866000018281548110611ec757611ec7612642565b9060005260206000200154905080876000018481548110611eea57611eea612642565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611f1d57611f1d61270e565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061053f565b600091505061053f565b6000818152600183016020526040812054611fa95750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561053f565b50600061053f565b600060208284031215611fc357600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461106957600080fd5b600060208083528351808285015260005b8181101561202057858101830151858201604001528201612004565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461208357600080fd5b919050565b6000806040838503121561209b57600080fd5b6120a48361205f565b946020939093013593505050565b6000602082840312156120c457600080fd5b6110698261205f565b6000806000606084860312156120e257600080fd5b6120eb8461205f565b92506120f96020850161205f565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561215b5761215b612109565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156121a8576121a8612109565b604052919050565b8035801515811461208357600080fd5b6000606082840312156121d257600080fd5b6040516060810181811067ffffffffffffffff821117156121f5576121f5612109565b604052612201836121b0565b8152602083013579ffffffffffffffffffffffffffffffffffffffffffffffffffff8116811461223057600080fd5b60208201526040928301359281019290925250919050565b600082601f83011261225957600080fd5b813567ffffffffffffffff81111561227357612273612109565b6122a460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612161565b8181528460208386010111156122b957600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff8116811461208357600080fd5b600080600080600060a0868803121561230657600080fd5b853567ffffffffffffffff8082111561231e57600080fd5b61232a89838a01612248565b96506123386020890161205f565b95506040880135945061234d606089016122d6565b9350608088013591508082111561236357600080fd5b5061237088828901612248565b9150509295509295909350565b60008083601f84011261238f57600080fd5b50813567ffffffffffffffff8111156123a757600080fd5b6020830191508360208285010111156123bf57600080fd5b9250929050565b600080600080600080600060a0888a0312156123e157600080fd5b6123ea8861205f565b9650602088013567ffffffffffffffff8082111561240757600080fd5b6124138b838c0161237d565b909850965060408a0135955086915061242e60608b016122d6565b945060808a013591508082111561244457600080fd5b506124518a828b0161237d565b989b979a50959850939692959293505050565b600082601f83011261247557600080fd5b8135602067ffffffffffffffff82111561249157612491612109565b61249f818360051b01612161565b82815260069290921b840181019181810190868411156124be57600080fd5b8286015b8481101561250b57604081890312156124db5760008081fd5b6124e3612138565b6124ec8261205f565b81526124f98583016121b0565b818601528352918301916040016124c2565b509695505050505050565b6000806040838503121561252957600080fd5b823567ffffffffffffffff8082111561254157600080fd5b61254d86838701612464565b9350602085013591508082111561256357600080fd5b5061257085828601612464565b9150509250929050565b6000806040838503121561258d57600080fd5b6125968361205f565b91506125a46020840161205f565b90509250929050565b600181811c908216806125c157607f821691505b6020821081036125fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561053f5761053f612600565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036126a2576126a2612600565b5060010190565b8181038181111561053f5761053f612600565b808202811582820484141761053f5761053f612600565b600082612709577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c6343000813000a",
}

var WrappedTokenPoolABI = WrappedTokenPoolMetaData.ABI

var WrappedTokenPoolBin = WrappedTokenPoolMetaData.Bin

func DeployWrappedTokenPool(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, decimals uint8, rateLimiterConfig RateLimiterConfig) (common.Address, *types.Transaction, *WrappedTokenPool, error) {
	parsed, err := WrappedTokenPoolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(WrappedTokenPoolBin), backend, name, symbol, decimals, rateLimiterConfig)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WrappedTokenPool{WrappedTokenPoolCaller: WrappedTokenPoolCaller{contract: contract}, WrappedTokenPoolTransactor: WrappedTokenPoolTransactor{contract: contract}, WrappedTokenPoolFilterer: WrappedTokenPoolFilterer{contract: contract}}, nil
}

type WrappedTokenPool struct {
	address common.Address
	abi     abi.ABI
	WrappedTokenPoolCaller
	WrappedTokenPoolTransactor
	WrappedTokenPoolFilterer
}

type WrappedTokenPoolCaller struct {
	contract *bind.BoundContract
}

type WrappedTokenPoolTransactor struct {
	contract *bind.BoundContract
}

type WrappedTokenPoolFilterer struct {
	contract *bind.BoundContract
}

type WrappedTokenPoolSession struct {
	Contract     *WrappedTokenPool
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type WrappedTokenPoolCallerSession struct {
	Contract *WrappedTokenPoolCaller
	CallOpts bind.CallOpts
}

type WrappedTokenPoolTransactorSession struct {
	Contract     *WrappedTokenPoolTransactor
	TransactOpts bind.TransactOpts
}

type WrappedTokenPoolRaw struct {
	Contract *WrappedTokenPool
}

type WrappedTokenPoolCallerRaw struct {
	Contract *WrappedTokenPoolCaller
}

type WrappedTokenPoolTransactorRaw struct {
	Contract *WrappedTokenPoolTransactor
}

func NewWrappedTokenPool(address common.Address, backend bind.ContractBackend) (*WrappedTokenPool, error) {
	abi, err := abi.JSON(strings.NewReader(WrappedTokenPoolABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindWrappedTokenPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPool{address: address, abi: abi, WrappedTokenPoolCaller: WrappedTokenPoolCaller{contract: contract}, WrappedTokenPoolTransactor: WrappedTokenPoolTransactor{contract: contract}, WrappedTokenPoolFilterer: WrappedTokenPoolFilterer{contract: contract}}, nil
}

func NewWrappedTokenPoolCaller(address common.Address, caller bind.ContractCaller) (*WrappedTokenPoolCaller, error) {
	contract, err := bindWrappedTokenPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolCaller{contract: contract}, nil
}

func NewWrappedTokenPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*WrappedTokenPoolTransactor, error) {
	contract, err := bindWrappedTokenPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolTransactor{contract: contract}, nil
}

func NewWrappedTokenPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*WrappedTokenPoolFilterer, error) {
	contract, err := bindWrappedTokenPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolFilterer{contract: contract}, nil
}

func bindWrappedTokenPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := WrappedTokenPoolMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_WrappedTokenPool *WrappedTokenPoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WrappedTokenPool.Contract.WrappedTokenPoolCaller.contract.Call(opts, result, method, params...)
}

func (_WrappedTokenPool *WrappedTokenPoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.WrappedTokenPoolTransactor.contract.Transfer(opts)
}

func (_WrappedTokenPool *WrappedTokenPoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.WrappedTokenPoolTransactor.contract.Transact(opts, method, params...)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WrappedTokenPool.Contract.contract.Call(opts, result, method, params...)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.contract.Transfer(opts)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.contract.Transact(opts, method, params...)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _WrappedTokenPool.Contract.Allowance(&_WrappedTokenPool.CallOpts, owner, spender)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _WrappedTokenPool.Contract.Allowance(&_WrappedTokenPool.CallOpts, owner, spender)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _WrappedTokenPool.Contract.BalanceOf(&_WrappedTokenPool.CallOpts, account)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _WrappedTokenPool.Contract.BalanceOf(&_WrappedTokenPool.CallOpts, account)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) CurrentRateLimiterState(opts *bind.CallOpts) (RateLimiterTokenBucket, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "currentRateLimiterState")

	if err != nil {
		return *new(RateLimiterTokenBucket), err
	}

	out0 := *abi.ConvertType(out[0], new(RateLimiterTokenBucket)).(*RateLimiterTokenBucket)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) CurrentRateLimiterState() (RateLimiterTokenBucket, error) {
	return _WrappedTokenPool.Contract.CurrentRateLimiterState(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) CurrentRateLimiterState() (RateLimiterTokenBucket, error) {
	return _WrappedTokenPool.Contract.CurrentRateLimiterState(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) Decimals() (uint8, error) {
	return _WrappedTokenPool.Contract.Decimals(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) Decimals() (uint8, error) {
	return _WrappedTokenPool.Contract.Decimals(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) GetToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "getToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) GetToken() (common.Address, error) {
	return _WrappedTokenPool.Contract.GetToken(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) GetToken() (common.Address, error) {
	return _WrappedTokenPool.Contract.GetToken(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) IsOffRamp(opts *bind.CallOpts, offRamp common.Address) (bool, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "isOffRamp", offRamp)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) IsOffRamp(offRamp common.Address) (bool, error) {
	return _WrappedTokenPool.Contract.IsOffRamp(&_WrappedTokenPool.CallOpts, offRamp)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) IsOffRamp(offRamp common.Address) (bool, error) {
	return _WrappedTokenPool.Contract.IsOffRamp(&_WrappedTokenPool.CallOpts, offRamp)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) IsOnRamp(opts *bind.CallOpts, onRamp common.Address) (bool, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "isOnRamp", onRamp)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) IsOnRamp(onRamp common.Address) (bool, error) {
	return _WrappedTokenPool.Contract.IsOnRamp(&_WrappedTokenPool.CallOpts, onRamp)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) IsOnRamp(onRamp common.Address) (bool, error) {
	return _WrappedTokenPool.Contract.IsOnRamp(&_WrappedTokenPool.CallOpts, onRamp)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) Name() (string, error) {
	return _WrappedTokenPool.Contract.Name(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) Name() (string, error) {
	return _WrappedTokenPool.Contract.Name(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) Owner() (common.Address, error) {
	return _WrappedTokenPool.Contract.Owner(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) Owner() (common.Address, error) {
	return _WrappedTokenPool.Contract.Owner(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) Paused() (bool, error) {
	return _WrappedTokenPool.Contract.Paused(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) Paused() (bool, error) {
	return _WrappedTokenPool.Contract.Paused(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WrappedTokenPool.Contract.SupportsInterface(&_WrappedTokenPool.CallOpts, interfaceId)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WrappedTokenPool.Contract.SupportsInterface(&_WrappedTokenPool.CallOpts, interfaceId)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) Symbol() (string, error) {
	return _WrappedTokenPool.Contract.Symbol(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) Symbol() (string, error) {
	return _WrappedTokenPool.Contract.Symbol(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _WrappedTokenPool.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_WrappedTokenPool *WrappedTokenPoolSession) TotalSupply() (*big.Int, error) {
	return _WrappedTokenPool.Contract.TotalSupply(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolCallerSession) TotalSupply() (*big.Int, error) {
	return _WrappedTokenPool.Contract.TotalSupply(&_WrappedTokenPool.CallOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "acceptOwnership")
}

func (_WrappedTokenPool *WrappedTokenPoolSession) AcceptOwnership() (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.AcceptOwnership(&_WrappedTokenPool.TransactOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.AcceptOwnership(&_WrappedTokenPool.TransactOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) ApplyRampUpdates(opts *bind.TransactOpts, onRamps []TokenPoolRampUpdate, offRamps []TokenPoolRampUpdate) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "applyRampUpdates", onRamps, offRamps)
}

func (_WrappedTokenPool *WrappedTokenPoolSession) ApplyRampUpdates(onRamps []TokenPoolRampUpdate, offRamps []TokenPoolRampUpdate) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.ApplyRampUpdates(&_WrappedTokenPool.TransactOpts, onRamps, offRamps)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) ApplyRampUpdates(onRamps []TokenPoolRampUpdate, offRamps []TokenPoolRampUpdate) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.ApplyRampUpdates(&_WrappedTokenPool.TransactOpts, onRamps, offRamps)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "approve", spender, amount)
}

func (_WrappedTokenPool *WrappedTokenPoolSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.Approve(&_WrappedTokenPool.TransactOpts, spender, amount)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.Approve(&_WrappedTokenPool.TransactOpts, spender, amount)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

func (_WrappedTokenPool *WrappedTokenPoolSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.DecreaseAllowance(&_WrappedTokenPool.TransactOpts, spender, subtractedValue)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.DecreaseAllowance(&_WrappedTokenPool.TransactOpts, spender, subtractedValue)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

func (_WrappedTokenPool *WrappedTokenPoolSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.IncreaseAllowance(&_WrappedTokenPool.TransactOpts, spender, addedValue)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.IncreaseAllowance(&_WrappedTokenPool.TransactOpts, spender, addedValue)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) LockOrBurn(opts *bind.TransactOpts, arg0 common.Address, arg1 []byte, amount *big.Int, arg3 uint64, arg4 []byte) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "lockOrBurn", arg0, arg1, amount, arg3, arg4)
}

func (_WrappedTokenPool *WrappedTokenPoolSession) LockOrBurn(arg0 common.Address, arg1 []byte, amount *big.Int, arg3 uint64, arg4 []byte) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.LockOrBurn(&_WrappedTokenPool.TransactOpts, arg0, arg1, amount, arg3, arg4)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) LockOrBurn(arg0 common.Address, arg1 []byte, amount *big.Int, arg3 uint64, arg4 []byte) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.LockOrBurn(&_WrappedTokenPool.TransactOpts, arg0, arg1, amount, arg3, arg4)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "pause")
}

func (_WrappedTokenPool *WrappedTokenPoolSession) Pause() (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.Pause(&_WrappedTokenPool.TransactOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) Pause() (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.Pause(&_WrappedTokenPool.TransactOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) ReleaseOrMint(opts *bind.TransactOpts, arg0 []byte, receiver common.Address, amount *big.Int, arg3 uint64, arg4 []byte) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "releaseOrMint", arg0, receiver, amount, arg3, arg4)
}

func (_WrappedTokenPool *WrappedTokenPoolSession) ReleaseOrMint(arg0 []byte, receiver common.Address, amount *big.Int, arg3 uint64, arg4 []byte) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.ReleaseOrMint(&_WrappedTokenPool.TransactOpts, arg0, receiver, amount, arg3, arg4)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) ReleaseOrMint(arg0 []byte, receiver common.Address, amount *big.Int, arg3 uint64, arg4 []byte) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.ReleaseOrMint(&_WrappedTokenPool.TransactOpts, arg0, receiver, amount, arg3, arg4)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) SetRateLimiterConfig(opts *bind.TransactOpts, config RateLimiterConfig) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "setRateLimiterConfig", config)
}

func (_WrappedTokenPool *WrappedTokenPoolSession) SetRateLimiterConfig(config RateLimiterConfig) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.SetRateLimiterConfig(&_WrappedTokenPool.TransactOpts, config)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) SetRateLimiterConfig(config RateLimiterConfig) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.SetRateLimiterConfig(&_WrappedTokenPool.TransactOpts, config)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "transfer", recipient, amount)
}

func (_WrappedTokenPool *WrappedTokenPoolSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.Transfer(&_WrappedTokenPool.TransactOpts, recipient, amount)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.Transfer(&_WrappedTokenPool.TransactOpts, recipient, amount)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

func (_WrappedTokenPool *WrappedTokenPoolSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.TransferFrom(&_WrappedTokenPool.TransactOpts, sender, recipient, amount)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.TransferFrom(&_WrappedTokenPool.TransactOpts, sender, recipient, amount)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "transferOwnership", to)
}

func (_WrappedTokenPool *WrappedTokenPoolSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.TransferOwnership(&_WrappedTokenPool.TransactOpts, to)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.TransferOwnership(&_WrappedTokenPool.TransactOpts, to)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WrappedTokenPool.contract.Transact(opts, "unpause")
}

func (_WrappedTokenPool *WrappedTokenPoolSession) Unpause() (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.Unpause(&_WrappedTokenPool.TransactOpts)
}

func (_WrappedTokenPool *WrappedTokenPoolTransactorSession) Unpause() (*types.Transaction, error) {
	return _WrappedTokenPool.Contract.Unpause(&_WrappedTokenPool.TransactOpts)
}

type WrappedTokenPoolApprovalIterator struct {
	Event *WrappedTokenPoolApproval

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolApprovalIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolApprovalIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*WrappedTokenPoolApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolApprovalIterator{contract: _WrappedTokenPool.contract, event: "Approval", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolApproval)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParseApproval(log types.Log) (*WrappedTokenPoolApproval, error) {
	event := new(WrappedTokenPoolApproval)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type WrappedTokenPoolBurnedIterator struct {
	Event *WrappedTokenPoolBurned

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolBurnedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolBurnedIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolBurned struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterBurned(opts *bind.FilterOpts, sender []common.Address) (*WrappedTokenPoolBurnedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "Burned", senderRule)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolBurnedIterator{contract: _WrappedTokenPool.contract, event: "Burned", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchBurned(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolBurned, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "Burned", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolBurned)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "Burned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParseBurned(log types.Log) (*WrappedTokenPoolBurned, error) {
	event := new(WrappedTokenPoolBurned)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "Burned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type WrappedTokenPoolLockedIterator struct {
	Event *WrappedTokenPoolLocked

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolLockedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolLockedIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolLocked struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterLocked(opts *bind.FilterOpts, sender []common.Address) (*WrappedTokenPoolLockedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "Locked", senderRule)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolLockedIterator{contract: _WrappedTokenPool.contract, event: "Locked", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchLocked(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolLocked, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "Locked", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolLocked)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "Locked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParseLocked(log types.Log) (*WrappedTokenPoolLocked, error) {
	event := new(WrappedTokenPoolLocked)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "Locked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type WrappedTokenPoolMintedIterator struct {
	Event *WrappedTokenPoolMinted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolMintedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolMintedIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolMinted struct {
	Sender    common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterMinted(opts *bind.FilterOpts, sender []common.Address, recipient []common.Address) (*WrappedTokenPoolMintedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "Minted", senderRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolMintedIterator{contract: _WrappedTokenPool.contract, event: "Minted", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchMinted(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolMinted, sender []common.Address, recipient []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "Minted", senderRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolMinted)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "Minted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParseMinted(log types.Log) (*WrappedTokenPoolMinted, error) {
	event := new(WrappedTokenPoolMinted)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "Minted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type WrappedTokenPoolOffRampAllowanceSetIterator struct {
	Event *WrappedTokenPoolOffRampAllowanceSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolOffRampAllowanceSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolOffRampAllowanceSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolOffRampAllowanceSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolOffRampAllowanceSetIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolOffRampAllowanceSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolOffRampAllowanceSet struct {
	OnRamp  common.Address
	Allowed bool
	Raw     types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterOffRampAllowanceSet(opts *bind.FilterOpts) (*WrappedTokenPoolOffRampAllowanceSetIterator, error) {

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "OffRampAllowanceSet")
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolOffRampAllowanceSetIterator{contract: _WrappedTokenPool.contract, event: "OffRampAllowanceSet", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchOffRampAllowanceSet(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolOffRampAllowanceSet) (event.Subscription, error) {

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "OffRampAllowanceSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolOffRampAllowanceSet)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "OffRampAllowanceSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParseOffRampAllowanceSet(log types.Log) (*WrappedTokenPoolOffRampAllowanceSet, error) {
	event := new(WrappedTokenPoolOffRampAllowanceSet)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "OffRampAllowanceSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type WrappedTokenPoolOnRampAllowanceSetIterator struct {
	Event *WrappedTokenPoolOnRampAllowanceSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolOnRampAllowanceSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolOnRampAllowanceSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolOnRampAllowanceSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolOnRampAllowanceSetIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolOnRampAllowanceSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolOnRampAllowanceSet struct {
	OnRamp  common.Address
	Allowed bool
	Raw     types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterOnRampAllowanceSet(opts *bind.FilterOpts) (*WrappedTokenPoolOnRampAllowanceSetIterator, error) {

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "OnRampAllowanceSet")
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolOnRampAllowanceSetIterator{contract: _WrappedTokenPool.contract, event: "OnRampAllowanceSet", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchOnRampAllowanceSet(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolOnRampAllowanceSet) (event.Subscription, error) {

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "OnRampAllowanceSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolOnRampAllowanceSet)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "OnRampAllowanceSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParseOnRampAllowanceSet(log types.Log) (*WrappedTokenPoolOnRampAllowanceSet, error) {
	event := new(WrappedTokenPoolOnRampAllowanceSet)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "OnRampAllowanceSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type WrappedTokenPoolOwnershipTransferRequestedIterator struct {
	Event *WrappedTokenPoolOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*WrappedTokenPoolOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolOwnershipTransferRequestedIterator{contract: _WrappedTokenPool.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolOwnershipTransferRequested)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParseOwnershipTransferRequested(log types.Log) (*WrappedTokenPoolOwnershipTransferRequested, error) {
	event := new(WrappedTokenPoolOwnershipTransferRequested)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type WrappedTokenPoolOwnershipTransferredIterator struct {
	Event *WrappedTokenPoolOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*WrappedTokenPoolOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolOwnershipTransferredIterator{contract: _WrappedTokenPool.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolOwnershipTransferred)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParseOwnershipTransferred(log types.Log) (*WrappedTokenPoolOwnershipTransferred, error) {
	event := new(WrappedTokenPoolOwnershipTransferred)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type WrappedTokenPoolPausedIterator struct {
	Event *WrappedTokenPoolPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolPausedIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterPaused(opts *bind.FilterOpts) (*WrappedTokenPoolPausedIterator, error) {

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolPausedIterator{contract: _WrappedTokenPool.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolPaused) (event.Subscription, error) {

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolPaused)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParsePaused(log types.Log) (*WrappedTokenPoolPaused, error) {
	event := new(WrappedTokenPoolPaused)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type WrappedTokenPoolReleasedIterator struct {
	Event *WrappedTokenPoolReleased

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolReleasedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolReleased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolReleased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolReleasedIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolReleasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolReleased struct {
	Sender    common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterReleased(opts *bind.FilterOpts, sender []common.Address, recipient []common.Address) (*WrappedTokenPoolReleasedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "Released", senderRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolReleasedIterator{contract: _WrappedTokenPool.contract, event: "Released", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchReleased(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolReleased, sender []common.Address, recipient []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "Released", senderRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolReleased)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "Released", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParseReleased(log types.Log) (*WrappedTokenPoolReleased, error) {
	event := new(WrappedTokenPoolReleased)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "Released", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type WrappedTokenPoolTransferIterator struct {
	Event *WrappedTokenPoolTransfer

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolTransferIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolTransferIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*WrappedTokenPoolTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolTransferIterator{contract: _WrappedTokenPool.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolTransfer)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParseTransfer(log types.Log) (*WrappedTokenPoolTransfer, error) {
	event := new(WrappedTokenPoolTransfer)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type WrappedTokenPoolUnpausedIterator struct {
	Event *WrappedTokenPoolUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *WrappedTokenPoolUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappedTokenPoolUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(WrappedTokenPoolUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *WrappedTokenPoolUnpausedIterator) Error() error {
	return it.fail
}

func (it *WrappedTokenPoolUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type WrappedTokenPoolUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) FilterUnpaused(opts *bind.FilterOpts) (*WrappedTokenPoolUnpausedIterator, error) {

	logs, sub, err := _WrappedTokenPool.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &WrappedTokenPoolUnpausedIterator{contract: _WrappedTokenPool.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolUnpaused) (event.Subscription, error) {

	logs, sub, err := _WrappedTokenPool.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(WrappedTokenPoolUnpaused)
				if err := _WrappedTokenPool.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_WrappedTokenPool *WrappedTokenPoolFilterer) ParseUnpaused(log types.Log) (*WrappedTokenPoolUnpaused, error) {
	event := new(WrappedTokenPoolUnpaused)
	if err := _WrappedTokenPool.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_WrappedTokenPool *WrappedTokenPool) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _WrappedTokenPool.abi.Events["Approval"].ID:
		return _WrappedTokenPool.ParseApproval(log)
	case _WrappedTokenPool.abi.Events["Burned"].ID:
		return _WrappedTokenPool.ParseBurned(log)
	case _WrappedTokenPool.abi.Events["Locked"].ID:
		return _WrappedTokenPool.ParseLocked(log)
	case _WrappedTokenPool.abi.Events["Minted"].ID:
		return _WrappedTokenPool.ParseMinted(log)
	case _WrappedTokenPool.abi.Events["OffRampAllowanceSet"].ID:
		return _WrappedTokenPool.ParseOffRampAllowanceSet(log)
	case _WrappedTokenPool.abi.Events["OnRampAllowanceSet"].ID:
		return _WrappedTokenPool.ParseOnRampAllowanceSet(log)
	case _WrappedTokenPool.abi.Events["OwnershipTransferRequested"].ID:
		return _WrappedTokenPool.ParseOwnershipTransferRequested(log)
	case _WrappedTokenPool.abi.Events["OwnershipTransferred"].ID:
		return _WrappedTokenPool.ParseOwnershipTransferred(log)
	case _WrappedTokenPool.abi.Events["Paused"].ID:
		return _WrappedTokenPool.ParsePaused(log)
	case _WrappedTokenPool.abi.Events["Released"].ID:
		return _WrappedTokenPool.ParseReleased(log)
	case _WrappedTokenPool.abi.Events["Transfer"].ID:
		return _WrappedTokenPool.ParseTransfer(log)
	case _WrappedTokenPool.abi.Events["Unpaused"].ID:
		return _WrappedTokenPool.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (WrappedTokenPoolApproval) Topic() common.Hash {
	return common.HexToHash("0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925")
}

func (WrappedTokenPoolBurned) Topic() common.Hash {
	return common.HexToHash("0x696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7")
}

func (WrappedTokenPoolLocked) Topic() common.Hash {
	return common.HexToHash("0x9f1ec8c880f76798e7b793325d625e9b60e4082a553c98f42b6cda368dd60008")
}

func (WrappedTokenPoolMinted) Topic() common.Hash {
	return common.HexToHash("0x9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f0")
}

func (WrappedTokenPoolOffRampAllowanceSet) Topic() common.Hash {
	return common.HexToHash("0xd8c3333ded377884ced3869cd0bcb9be54ea664076df1f5d39c4689120313648")
}

func (WrappedTokenPoolOnRampAllowanceSet) Topic() common.Hash {
	return common.HexToHash("0xbceff8f229c6dfcbf8bdcfb18726b84b0fd249b4803deb3948ff34d904013662")
}

func (WrappedTokenPoolOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (WrappedTokenPoolOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (WrappedTokenPoolPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (WrappedTokenPoolReleased) Topic() common.Hash {
	return common.HexToHash("0x2d87480f50083e2b2759522a8fdda59802650a8055e609a7772cf70c07748f52")
}

func (WrappedTokenPoolTransfer) Topic() common.Hash {
	return common.HexToHash("0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef")
}

func (WrappedTokenPoolUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_WrappedTokenPool *WrappedTokenPool) Address() common.Address {
	return _WrappedTokenPool.address
}

type WrappedTokenPoolInterface interface {
	Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error)

	BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error)

	CurrentRateLimiterState(opts *bind.CallOpts) (RateLimiterTokenBucket, error)

	Decimals(opts *bind.CallOpts) (uint8, error)

	GetToken(opts *bind.CallOpts) (common.Address, error)

	IsOffRamp(opts *bind.CallOpts, offRamp common.Address) (bool, error)

	IsOnRamp(opts *bind.CallOpts, onRamp common.Address) (bool, error)

	Name(opts *bind.CallOpts) (string, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error)

	Symbol(opts *bind.CallOpts) (string, error)

	TotalSupply(opts *bind.CallOpts) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ApplyRampUpdates(opts *bind.TransactOpts, onRamps []TokenPoolRampUpdate, offRamps []TokenPoolRampUpdate) (*types.Transaction, error)

	Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error)

	DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error)

	IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error)

	LockOrBurn(opts *bind.TransactOpts, arg0 common.Address, arg1 []byte, amount *big.Int, arg3 uint64, arg4 []byte) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	ReleaseOrMint(opts *bind.TransactOpts, arg0 []byte, receiver common.Address, amount *big.Int, arg3 uint64, arg4 []byte) (*types.Transaction, error)

	SetRateLimiterConfig(opts *bind.TransactOpts, config RateLimiterConfig) (*types.Transaction, error)

	Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*WrappedTokenPoolApprovalIterator, error)

	WatchApproval(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolApproval, owner []common.Address, spender []common.Address) (event.Subscription, error)

	ParseApproval(log types.Log) (*WrappedTokenPoolApproval, error)

	FilterBurned(opts *bind.FilterOpts, sender []common.Address) (*WrappedTokenPoolBurnedIterator, error)

	WatchBurned(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolBurned, sender []common.Address) (event.Subscription, error)

	ParseBurned(log types.Log) (*WrappedTokenPoolBurned, error)

	FilterLocked(opts *bind.FilterOpts, sender []common.Address) (*WrappedTokenPoolLockedIterator, error)

	WatchLocked(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolLocked, sender []common.Address) (event.Subscription, error)

	ParseLocked(log types.Log) (*WrappedTokenPoolLocked, error)

	FilterMinted(opts *bind.FilterOpts, sender []common.Address, recipient []common.Address) (*WrappedTokenPoolMintedIterator, error)

	WatchMinted(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolMinted, sender []common.Address, recipient []common.Address) (event.Subscription, error)

	ParseMinted(log types.Log) (*WrappedTokenPoolMinted, error)

	FilterOffRampAllowanceSet(opts *bind.FilterOpts) (*WrappedTokenPoolOffRampAllowanceSetIterator, error)

	WatchOffRampAllowanceSet(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolOffRampAllowanceSet) (event.Subscription, error)

	ParseOffRampAllowanceSet(log types.Log) (*WrappedTokenPoolOffRampAllowanceSet, error)

	FilterOnRampAllowanceSet(opts *bind.FilterOpts) (*WrappedTokenPoolOnRampAllowanceSetIterator, error)

	WatchOnRampAllowanceSet(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolOnRampAllowanceSet) (event.Subscription, error)

	ParseOnRampAllowanceSet(log types.Log) (*WrappedTokenPoolOnRampAllowanceSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*WrappedTokenPoolOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*WrappedTokenPoolOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*WrappedTokenPoolOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*WrappedTokenPoolOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*WrappedTokenPoolPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*WrappedTokenPoolPaused, error)

	FilterReleased(opts *bind.FilterOpts, sender []common.Address, recipient []common.Address) (*WrappedTokenPoolReleasedIterator, error)

	WatchReleased(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolReleased, sender []common.Address, recipient []common.Address) (event.Subscription, error)

	ParseReleased(log types.Log) (*WrappedTokenPoolReleased, error)

	FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*WrappedTokenPoolTransferIterator, error)

	WatchTransfer(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolTransfer, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseTransfer(log types.Log) (*WrappedTokenPoolTransfer, error)

	FilterUnpaused(opts *bind.FilterOpts) (*WrappedTokenPoolUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *WrappedTokenPoolUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*WrappedTokenPoolUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

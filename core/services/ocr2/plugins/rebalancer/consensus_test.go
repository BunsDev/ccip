package rebalancer

import (
	"encoding/json"
	"reflect"
	"testing"

	"github.com/smartcontractkit/chainlink/v2/core/logger"
	"github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/rebalancer/bridge"
	"github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/rebalancer/graph"
	"github.com/smartcontractkit/chainlink/v2/core/services/ocr2/plugins/rebalancer/models"
	"github.com/test-go/testify/require"
)

func Test_computePendingTransfersConsensus(t *testing.T) {
	type args struct {
		observations []models.Observation
		f            int
	}
	tests := []struct {
		name    string
		args    args
		want    []models.PendingTransfer
		wantErr bool
	}{
		{
			"happy path",
			args{
				observations: []models.Observation{
					{
						PendingTransfers: mustUnmarshalPendingTransfersJSON(t, `[{"From":3478487238524512106,"To":16015286601757825753,"Sender":"0x7EA13ad76e858Fe3C79F7c7bf71dae0d5642f2B2","Receiver":"0xf9bb721Bd68F5eeD40cB7c9DDcc0F0bA9d0B1b96","LocalTokenAddress":"0x980B62Da83eFf3D4576C647993b0c1D7faf17c73","RemoteTokenAddress":"0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9","Amount":"1000000000","Date":"2024-02-21T21:41:56+02:00","BridgeData":"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000005de3000000000000000000000000cfb1f08a4852699a979909e22c30263ca249556d000000000000000000000000a8ad8d7e13cbf556ee75cb0324c13535d8100e1e0000000000000000000000000000000000000000000000000000000000f89bcb0000000000000000000000000000000000000000000000000000000000516c5f0000000000000000000000000000000000000000000000000000000065d65204000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000000f8493b578327aac7887f3f90ecc0fed880fa5b60815f303014fdf4e5be8da10d1ca025ae52e76af90754a721f83524ca678eeb317f8358979c5105e40462d2855000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000369802bdc06c847cfccc4ba572520f383f365e2117d178c5a2204876aeaca32797046c56b8cba34f73b51d0a200a7dc0d17a2fc07dc86d1e0fc3f6f6e263234be9b1964c5f4428f87cb49c7ef72656490927f4786370a1b655cae8f2caefed08a82ceda610907df10408e3602dab2098fae7aae0fa9db2ddfd88f903dc82f91a0000000000000000000000000000000000000000000000000000000000000000989e42af081500d142fe5584375a58b95be061bb5cdf38a3579f5043d90052b284ae48f37a0c35683df949536b6576ce97caa855c176ccd7d769494015b9ba3e4bde3fbfa26b03bfcbbc80884a5c229d987992ce2366bef5882742cac7cc7efe000000000000000000000000000000000000000000000000000000000000000037ef20c8140b820c15303931a9e839810ec66f4d9523c3fa8187434076a25b1300000000000000000000000000000000000000000000000000000000000001242e567b360000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f9000000000000000000000000e97467a3bda1fac5051d2cfdac8b5f28faa65788000000000000000000000000f9bb721bd68f5eed40cb7c9ddcc0f0ba9d0b1b96000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","NativeBridgeFee":null,"Status":"ready","ID":"0x2556772a91ca8f93e686ed2ab0ca8634d6650b8262d6ae0683cd40f021c66931-12"}]`),
					},
					{
						PendingTransfers: mustUnmarshalPendingTransfersJSON(t, `[{"From":3478487238524512106,"To":16015286601757825753,"Sender":"0x7EA13ad76e858Fe3C79F7c7bf71dae0d5642f2B2","Receiver":"0xf9bb721Bd68F5eeD40cB7c9DDcc0F0bA9d0B1b96","LocalTokenAddress":"0x980B62Da83eFf3D4576C647993b0c1D7faf17c73","RemoteTokenAddress":"0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9","Amount":"1000000000","Date":"2024-02-21T21:41:56+02:00","BridgeData":"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000005de3000000000000000000000000cfb1f08a4852699a979909e22c30263ca249556d000000000000000000000000a8ad8d7e13cbf556ee75cb0324c13535d8100e1e0000000000000000000000000000000000000000000000000000000000f89bcb0000000000000000000000000000000000000000000000000000000000516c5f0000000000000000000000000000000000000000000000000000000065d65204000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000000f8493b578327aac7887f3f90ecc0fed880fa5b60815f303014fdf4e5be8da10d1ca025ae52e76af90754a721f83524ca678eeb317f8358979c5105e40462d2855000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000369802bdc06c847cfccc4ba572520f383f365e2117d178c5a2204876aeaca32797046c56b8cba34f73b51d0a200a7dc0d17a2fc07dc86d1e0fc3f6f6e263234be9b1964c5f4428f87cb49c7ef72656490927f4786370a1b655cae8f2caefed08a82ceda610907df10408e3602dab2098fae7aae0fa9db2ddfd88f903dc82f91a0000000000000000000000000000000000000000000000000000000000000000989e42af081500d142fe5584375a58b95be061bb5cdf38a3579f5043d90052b284ae48f37a0c35683df949536b6576ce97caa855c176ccd7d769494015b9ba3e4bde3fbfa26b03bfcbbc80884a5c229d987992ce2366bef5882742cac7cc7efe000000000000000000000000000000000000000000000000000000000000000037ef20c8140b820c15303931a9e839810ec66f4d9523c3fa8187434076a25b1300000000000000000000000000000000000000000000000000000000000001242e567b360000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f9000000000000000000000000e97467a3bda1fac5051d2cfdac8b5f28faa65788000000000000000000000000f9bb721bd68f5eed40cb7c9ddcc0f0ba9d0b1b96000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","NativeBridgeFee":null,"Status":"ready","ID":"0x2556772a91ca8f93e686ed2ab0ca8634d6650b8262d6ae0683cd40f021c66931-12"}]`),
					},
					{
						PendingTransfers: mustUnmarshalPendingTransfersJSON(t, `[{"From":3478487238524512106,"To":16015286601757825753,"Sender":"0x7EA13ad76e858Fe3C79F7c7bf71dae0d5642f2B2","Receiver":"0xf9bb721Bd68F5eeD40cB7c9DDcc0F0bA9d0B1b96","LocalTokenAddress":"0x980B62Da83eFf3D4576C647993b0c1D7faf17c73","RemoteTokenAddress":"0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9","Amount":"1000000000","Date":"2024-02-21T21:41:56+02:00","BridgeData":"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000005de3000000000000000000000000cfb1f08a4852699a979909e22c30263ca249556d000000000000000000000000a8ad8d7e13cbf556ee75cb0324c13535d8100e1e0000000000000000000000000000000000000000000000000000000000f89bcb0000000000000000000000000000000000000000000000000000000000516c5f0000000000000000000000000000000000000000000000000000000065d65204000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000000f8493b578327aac7887f3f90ecc0fed880fa5b60815f303014fdf4e5be8da10d1ca025ae52e76af90754a721f83524ca678eeb317f8358979c5105e40462d2855000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000369802bdc06c847cfccc4ba572520f383f365e2117d178c5a2204876aeaca32797046c56b8cba34f73b51d0a200a7dc0d17a2fc07dc86d1e0fc3f6f6e263234be9b1964c5f4428f87cb49c7ef72656490927f4786370a1b655cae8f2caefed08a82ceda610907df10408e3602dab2098fae7aae0fa9db2ddfd88f903dc82f91a0000000000000000000000000000000000000000000000000000000000000000989e42af081500d142fe5584375a58b95be061bb5cdf38a3579f5043d90052b284ae48f37a0c35683df949536b6576ce97caa855c176ccd7d769494015b9ba3e4bde3fbfa26b03bfcbbc80884a5c229d987992ce2366bef5882742cac7cc7efe000000000000000000000000000000000000000000000000000000000000000037ef20c8140b820c15303931a9e839810ec66f4d9523c3fa8187434076a25b1300000000000000000000000000000000000000000000000000000000000001242e567b360000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f9000000000000000000000000e97467a3bda1fac5051d2cfdac8b5f28faa65788000000000000000000000000f9bb721bd68f5eed40cb7c9ddcc0f0ba9d0b1b96000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","NativeBridgeFee":null,"Status":"ready","ID":"0x2556772a91ca8f93e686ed2ab0ca8634d6650b8262d6ae0683cd40f021c66931-12"}]`),
					},
					{
						PendingTransfers: mustUnmarshalPendingTransfersJSON(t, `[{"From":3478487238524512106,"To":16015286601757825753,"Sender":"0x7EA13ad76e858Fe3C79F7c7bf71dae0d5642f2B2","Receiver":"0xf9bb721Bd68F5eeD40cB7c9DDcc0F0bA9d0B1b96","LocalTokenAddress":"0x980B62Da83eFf3D4576C647993b0c1D7faf17c73","RemoteTokenAddress":"0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9","Amount":"1000000000","Date":"2024-02-21T21:41:56+02:00","BridgeData":"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000005de3000000000000000000000000cfb1f08a4852699a979909e22c30263ca249556d000000000000000000000000a8ad8d7e13cbf556ee75cb0324c13535d8100e1e0000000000000000000000000000000000000000000000000000000000f89bcb0000000000000000000000000000000000000000000000000000000000516c5f0000000000000000000000000000000000000000000000000000000065d65204000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000000f8493b578327aac7887f3f90ecc0fed880fa5b60815f303014fdf4e5be8da10d1ca025ae52e76af90754a721f83524ca678eeb317f8358979c5105e40462d2855000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000369802bdc06c847cfccc4ba572520f383f365e2117d178c5a2204876aeaca32797046c56b8cba34f73b51d0a200a7dc0d17a2fc07dc86d1e0fc3f6f6e263234be9b1964c5f4428f87cb49c7ef72656490927f4786370a1b655cae8f2caefed08a82ceda610907df10408e3602dab2098fae7aae0fa9db2ddfd88f903dc82f91a0000000000000000000000000000000000000000000000000000000000000000989e42af081500d142fe5584375a58b95be061bb5cdf38a3579f5043d90052b284ae48f37a0c35683df949536b6576ce97caa855c176ccd7d769494015b9ba3e4bde3fbfa26b03bfcbbc80884a5c229d987992ce2366bef5882742cac7cc7efe000000000000000000000000000000000000000000000000000000000000000037ef20c8140b820c15303931a9e839810ec66f4d9523c3fa8187434076a25b1300000000000000000000000000000000000000000000000000000000000001242e567b360000000000000000000000007b79995e5f793a07bc00c21412e50ecae098e7f9000000000000000000000000e97467a3bda1fac5051d2cfdac8b5f28faa65788000000000000000000000000f9bb721bd68f5eed40cb7c9ddcc0f0ba9d0b1b96000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","NativeBridgeFee":null,"Status":"ready","ID":"0x2556772a91ca8f93e686ed2ab0ca8634d6650b8262d6ae0683cd40f021c66931-12"}]`),
					},
				},
				f: 1,
			},
			[]models.PendingTransfer{},
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := computePendingTransfersConsensus(tt.args.observations, tt.args.f)
			if tt.wantErr {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
				require.Equal(t, tt.want, got)
			}
		})
	}
}

func mustUnmarshalPendingTransfersJSON(t *testing.T, s string) []models.PendingTransfer {
	t.Helper()
	var obs []models.PendingTransfer
	err := json.Unmarshal([]byte(s), &obs)
	require.NoError(t, err)
	return obs
}

func Test_computeConfigDigestsConsensus(t *testing.T) {
	type args struct {
		observations []models.Observation
		f            int
	}
	tests := []struct {
		name    string
		args    args
		want    []models.ConfigDigestWithMeta
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := computeConfigDigestsConsensus(tt.args.observations, tt.args.f)
			if (err != nil) != tt.wantErr {
				t.Errorf("computeConfigDigestsConsensus() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("computeConfigDigestsConsensus() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_computeGraphEdgesConsensus(t *testing.T) {
	type args struct {
		observations []models.Observation
		f            int
	}
	tests := []struct {
		name string
		args args
		want []models.Edge
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := computeGraphEdgesConsensus(tt.args.observations, tt.args.f); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("computeGraphEdgesConsensus() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_computeMedianLiquidityPerChain(t *testing.T) {
	type args struct {
		observations []models.Observation
	}
	tests := []struct {
		name string
		args args
		want []models.NetworkLiquidity
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := computeMedianLiquidityPerChain(tt.args.observations); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("computeMedianLiquidityPerChain() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_computeMedianGraph(t *testing.T) {
	type args struct {
		lggr              logger.Logger
		edges             []models.Edge
		medianLiquidities []models.NetworkLiquidity
	}
	tests := []struct {
		name    string
		args    args
		want    graph.Graph
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := computeMedianGraph(tt.args.lggr, tt.args.edges, tt.args.medianLiquidities)
			if (err != nil) != tt.wantErr {
				t.Errorf("computeMedianGraph() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("computeMedianGraph() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_computeResolvedTransfersQuorum(t *testing.T) {
	type args struct {
		lggr          logger.Logger
		observations  []models.Observation
		f             int
		bridgeFactory bridge.Factory
	}
	tests := []struct {
		name    string
		args    args
		want    []models.Transfer
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := computeResolvedTransfersQuorum(tt.args.lggr, tt.args.observations, tt.args.f, tt.args.bridgeFactory)
			if (err != nil) != tt.wantErr {
				t.Errorf("computeResolvedTransfersQuorum() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("computeResolvedTransfersQuorum() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_computeInflightTransfersQuorum(t *testing.T) {
	type args struct {
		lggr         logger.Logger
		observations []models.Observation
		f            int
	}
	tests := []struct {
		name    string
		args    args
		want    []models.Transfer
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := computeInflightTransfersQuorum(tt.args.lggr, tt.args.observations, tt.args.f)
			if (err != nil) != tt.wantErr {
				t.Errorf("computeInflightTransfersQuorum() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("computeInflightTransfersQuorum() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_removeInflightTransfers(t *testing.T) {
	type args struct {
		lggr              logger.Logger
		pendingTransfers  []models.PendingTransfer
		inflightTransfers []models.Transfer
	}
	tests := []struct {
		name string
		args args
		want []models.PendingTransfer
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := removeInflightTransfers(tt.args.lggr, tt.args.pendingTransfers, tt.args.inflightTransfers); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("removeInflightTransfers() = %v, want %v", got, tt.want)
			}
		})
	}
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package single_token_offramp_helper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type CCIPMessage struct {
	SequenceNumber     *big.Int
	SourceChainId      *big.Int
	DestinationChainId *big.Int
	Sender             common.Address
	Payload            CCIPMessagePayload
}

type CCIPMessagePayload struct {
	Receiver common.Address
	Data     []byte
	Tokens   []common.Address
	Amounts  []*big.Int
	Executor common.Address
	Options  []byte
}

type CCIPRelayReport struct {
	MerkleRoot        [32]byte
	MinSequenceNumber *big.Int
	MaxSequenceNumber *big.Int
}

type TokenLimitsTokenBucket struct {
	Rate        *big.Int
	Capacity    *big.Int
	Tokens      *big.Int
	LastUpdated *big.Int
}

var SingleTokenOffRampHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contractPoolInterface\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBucketRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBucketCapacity\",\"type\":\"uint256\"},{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeWithoutAFNSignal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionDelaySeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"AFNMaxHeartbeatTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"}],\"name\":\"CrossChainMessageExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"ExecutionDelaySecondsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"full\",\"type\":\"bool\"}],\"name\":\"NewTokenBucketConstructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minSequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSequenceNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contractPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOURCE_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"full\",\"type\":\"bool\"}],\"name\":\"configureTokenBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"structCCIP.MessagePayload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"internalType\":\"structCCIP.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"generateMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"}],\"name\":\"getExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExecutionDelaySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastReport\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minSequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSequenceNumber\",\"type\":\"uint256\"}],\"internalType\":\"structCCIP.RelayReport\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSecondsWithoutAFNHeartbeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBucket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"structTokenLimits.TokenBucket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"merkle\",\"type\":\"bytes\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"executionDelaySeconds\",\"type\":\"uint256\"}],\"name\":\"setExecutionDelaySeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setMaxSecondsWithoutAFNHeartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101206040523480156200001257600080fd5b50604051620042c5380380620042c583398101604081905262000035916200039f565b6000805460ff19168155899089908990899089908990899089908990600190849084903390819081620000af5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0380851661010002610100600160a81b031990921691909117909155811615620000e957620000e98162000260565b5050506001600160a01b038216158062000101575080155b156200012057604051630958ef9b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0393841617905560035590151560f81b608052604080516321df0da760e01b81529051898316928916916321df0da7916004808301926020929190829003018186803b1580156200018557600080fd5b505afa1580156200019a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c0919062000378565b6001600160a01b031614620001e85760405163936bb5ad60e01b815260040160405180910390fd5b60a089905260c0889052606087811b6001600160601b0319908116610100529087901b1660e052620002298585600162000312602090811b6200222717901c565b80516010556020810151601155604081015160125560600151601355600c5550620004489f50505050505050505050505050505050565b6001600160a01b038116331415620002bb5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401620000a6565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6200033e6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000826200034e57600062000350565b835b6040805160808101825296875260208701959095529385019390935250504260608301525090565b6000602082840312156200038b57600080fd5b815162000398816200042f565b9392505050565b60008060008060008060008060006101208a8c031215620003bf57600080fd5b8951985060208a0151975060408a0151620003da816200042f565b60608b0151909750620003ed816200042f565b8096505060808a0151945060a08a0151935060c08a01516200040f816200042f565b8093505060e08a015191506101008a015190509295985092959850929598565b6001600160a01b03811681146200044557600080fd5b50565b60805160f81c60a05160c05160e05160601c6101005160601c613e0c620004b960003960008181610399015281816129b80152612b21015260008181610325015281816116370152612ac3015260006103c80152600081816102fe01526128f901526000610b1a0152613e0c6000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638456cb5911610104578063b1dc65a4116100a2578063dc53c76e11610071578063dc53c76e146104dc578063e3d0e712146104ef578063eefa7a3e14610502578063f2fde38b1461055857600080fd5b8063b1dc65a414610490578063b5767166146104a3578063b6608c3b146104b6578063c15d605b146104c957600080fd5b80639504c519116100de5780639504c5191461040d578063a7206cd614610448578063afcb95d714610468578063b034909c1461048857600080fd5b80638456cb59146103bb57806385e1f4d0146103c35780638da5cb5b146103ea57600080fd5b80633f4ba83a1161017c57806379ba50971161014b57806379ba509714610347578063814118341461034f57806381ff70481461036457806382bfefc81461039457600080fd5b80633f4ba83a146102e65780635c975abb146102ee57806374be2150146102f95780637535d2461461032057600080fd5b80631a830a1e116101b85780631a830a1e1461024f57806321947507146102615780632222dd42146102945780633a6dcd3e146102d357600080fd5b80630b514037146101df578063108ee5fc146101f4578063181f5a7714610207575b600080fd5b6101f26101ed3660046135a0565b61056b565b005b6101f261020236600461314b565b6105e0565b604080518082018252601881527f53696e676c65546f6b656e4f666652616d7020312e312e3000000000000000006020820152905161024691906138ce565b60405180910390f35b600c545b604051908152602001610246565b61028461026f36600461350e565b6000908152600b602052604090205460ff1690565b6040519015158152602001610246565b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610246565b6102536102e136600461331a565b6106bc565b6101f26107cd565b60005460ff16610284565b6102537f000000000000000000000000000000000000000000000000000000000000000081565b6102ae7f000000000000000000000000000000000000000000000000000000000000000081565b6101f26107df565b610357610906565b604051610246919061385c565b6006546004546040805163ffffffff80851682526401000000009094049093166020840152820152606001610246565b6102ae7f000000000000000000000000000000000000000000000000000000000000000081565b6101f2610975565b6102537f000000000000000000000000000000000000000000000000000000000000000081565b600054610100900473ffffffffffffffffffffffffffffffffffffffff166102ae565b610415610985565b60405161024691908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61025361045636600461350e565b6000908152600a602052604090205490565b604080516001815260006020820181905291810191909152606001610246565b600354610253565b6101f261049e366004613235565b6109dd565b6101f26104b1366004613527565b611086565b6101f26104c436600461350e565b611095565b6101f26104d736600461350e565b611112565b6101f26104ea366004613368565b611155565b6101f26104fd366004613168565b611831565b6040805160608082018352600080835260208084018290529284015282518082018452600d54808252600e54828501908152600f5492860192835285519182525193810193909352519282019290925201610246565b6101f261056636600461314b565b612216565b61057361228a565b61057e838383612227565b80516010556020808201516011556040808301516012556060928301516013558051868152918201859052831515908201527ffaf3310019e551542b5c6014c1ae13e2a8d3943d7611d779c4df9b36c111924f910160405180910390a1505050565b6105e861228a565b73ffffffffffffffffffffffffffffffffffffffff8116610635576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd2891015b60405180910390a15050565b600082815b85518110156107c45760008682815181106106de576106de613d71565b602002602001015190506002856106f59190613c72565b610750576040517f0100000000000000000000000000000000000000000000000000000000000000602082015260218101849052604181018290526061016040516020818303038152906040528051906020012092506107a3565b6040517f0100000000000000000000000000000000000000000000000000000000000000602082015260218101829052604181018490526061016040516020818303038152906040528051906020012092505b6107ae600286613b7f565b94505080806107bc90613c39565b9150506106c1565b50949350505050565b6107d561228a565b6107dd612310565b565b60015473ffffffffffffffffffffffffffffffffffffffff163314610865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054336101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8416178455600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560405173ffffffffffffffffffffffffffffffffffffffff919093041692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6060600980548060200260200160405190810160405280929190818152602001828054801561096b57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610940575b5050505050905090565b61097d61228a565b6107dd6123f1565b6109b06040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526010548152601154602082015260125491810191909152601354606082015290565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c013591610a3391849163ffffffff851691908e908e90819084018382808284376000920191909152506124b192505050565b6040805183815262ffffff600884901c1660208201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16040805160608101825260045480825260055460ff80821660208501526101009091041692820192909252908314610b08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f636f6e666967446967657374206d69736d617463680000000000000000000000604482015260640161085c565b610b168b8b8b8b8b8b612840565b60007f000000000000000000000000000000000000000000000000000000000000000015610b7357600282602001518360400151610b549190613b5a565b610b5e9190613b93565b610b69906001613b5a565b60ff169050610b89565b6020820151610b83906001613b5a565b60ff1690505b888114610bf2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e617475726573000000000000604482015260640161085c565b888714610c5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e0000604482015260640161085c565b3360009081526007602090815260408083208151808301909252805460ff80821684529293919291840191610100909104166002811115610c9e57610c9e613d13565b6002811115610caf57610caf613d13565b9052509050600281602001516002811115610ccc57610ccc613d13565b148015610d1357506009816000015160ff1681548110610cee57610cee613d71565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b610d79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f756e617574686f72697a6564207472616e736d69747465720000000000000000604482015260640161085c565b505050505060008888604051610d9092919061384c565b604051908190038120610da7918c90602001613830565b604051602081830303815290604052805190602001209050610dc7612ed5565b604080518082019091526000808252602082015260005b88811015611064576000600185888460208110610dfd57610dfd613d71565b610e0a91901a601b613b5a565b8d8d86818110610e1c57610e1c613d71565b905060200201358c8c87818110610e3557610e35613d71565b9050602002013560405160008152602001604052604051610e72949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610e94573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff811660009081526007602090815290849020838501909452835460ff80821685529296509294508401916101009004166002811115610f1457610f14613d13565b6002811115610f2557610f25613d13565b9052509250600183602001516002811115610f4257610f42613d13565b14610fa9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e0000604482015260640161085c565b8251849060ff16601f8110610fc057610fc0613d71565b60200201511561102c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f6e2d756e69717565207369676e6174757265000000000000000000000000604482015260640161085c565b600184846000015160ff16601f811061104757611047613d71565b91151560209092020152508061105c81613c39565b915050610dde565b5050505063ffffffff811061107b5761107b613c86565b505050505050505050565b611092600080836124b1565b50565b61109d61228a565b806110d4576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380549082905560408051828152602081018490527f72e72b3dfd44fb4d803f52b2d895c7347b912da657d0f77599a0afc26956c25191016106b0565b61111a61228a565b600c8190556040518181527ffbb92e09fd0b7bcabafe655657e745c10bcd9812c1e32e205e477a3c5ff74fc09060200160405180910390a150565b60005460ff16156111c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161085c565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf72b39b6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561122c57600080fd5b505af1158015611240573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126491906134f1565b1561129a576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254604080517f343157b4000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163343157b491600480830192606092919082900301818787803b15801561130657600080fd5b505af115801561131a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133e9190613564565b90506003548160200151426113539190613bf2565b111561138b576040517fa8c8866900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060f81b846040516020016113a291906138e1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526113de92916020016137e8565b60405160208183030381529060405280519060200120905060006114038683866106bc565b6000818152600a602052604090205490915080611452578686866040517f31ec415c00000000000000000000000000000000000000000000000000000000815260040161085c9392919061386f565b42600c54826114619190613b1a565b10611498576040517f15c33ba200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516000908152600b602052604090205460ff16156114e95785516040517f6a64e961000000000000000000000000000000000000000000000000000000008152600481019190915260240161085c565b608080870151015173ffffffffffffffffffffffffffffffffffffffff16158015906115325750608080870151015173ffffffffffffffffffffffffffffffffffffffff163314155b1561156f5785516040517fd8e90b98000000000000000000000000000000000000000000000000000000008152600481019190915260240161085c565b611578866128f7565b61158186612a9d565b85516000908152600b6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055608087015160600151805182906115d3576115d3613d71565b602002602001015190506115f1816010612bf290919063ffffffff16565b611635576012546040517f331220f700000000000000000000000000000000000000000000000000000000815260048101919091526024810182905260440161085c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ea6192a288608001516000015189608001516060015160008151811061169557611695613d71565b60200260200101516040518363ffffffff1660e01b81526004016116db92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060405180830381600087803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b5050506080880151516040517f3a56bb7100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169150633a56bb7190611766908a906004016138e1565b600060405180830381600087803b15801561178057600080fd5b505af1925050508015611791575060015b6117fc573d8080156117bf576040519150601f19603f3d011682016040523d82523d6000602084013e6117c4565b606091505b5087516040517f6a3fd4f200000000000000000000000000000000000000000000000000000000815261085c91908390600401613999565b86516040517fc51bf0f6d90b467e0849da0ad18a4d9144a4b78b9f83202e1c65cd68f72d4a3890600090a25050505050505050565b855185518560ff16601f8311156118a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e65727300000000000000000000000000000000604482015260640161085c565b6000811161190e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f7369746976650000000000000000000000000000604482015260640161085c565b81831461199c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e00000000000000000000000000000000000000000000000000000000606482015260840161085c565b6119a7816003613bb5565b8311611a0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f20686967680000000000000000604482015260640161085c565b611a1761228a565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b60085415611c0a57600854600090611a6f90600190613bf2565b9050600060088281548110611a8657611a86613d71565b60009182526020822001546009805473ffffffffffffffffffffffffffffffffffffffff90921693509084908110611ac057611ac0613d71565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff85811684526007909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811690915592909116808452922080549091169055600880549192509080611b4057611b40613d42565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190556009805480611ba957611ba9613d42565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550611a55915050565b60005b8151518110156120715760006007600084600001518481518110611c3357611c33613d71565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115611c7d57611c7d613d13565b14611ce4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e65722061646472657373000000000000000000604482015260640161085c565b6040805180820190915260ff82168152600160208201528251805160079160009185908110611d1557611d15613d71565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611db657611db6613d13565b021790555060009150611dc69050565b6007600084602001518481518110611de057611de0613d71565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115611e2a57611e2a613d13565b14611e91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d6974746572206164647265737300000000604482015260640161085c565b6040805180820190915260ff821681526020810160028152506007600084602001518481518110611ec457611ec4613d71565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611f6557611f65613d13565b021790555050825180516008925083908110611f8357611f83613d71565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921790915582015180516009919083908110611fff57611fff613d71565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790558061206981613c39565b915050611c0d565b506040810151600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600680547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff438116820292831785559083048116936001939092600092612103928692908216911617613b32565b92506101000a81548163ffffffff021916908363ffffffff1602179055506121624630600660009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a00151612c35565b6004819055825180516005805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560065460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0598612201988b98919763ffffffff9092169690959194919391926139b2565b60405180910390a15050505050505050505050565b61221e61228a565b61109281612ce0565b6122526040518060800160405280600081526020016000815260200160008152602001600081525090565b600082612260576000612262565b835b6040805160808101825296875260208701959095529385019390935250504260608301525090565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1633146107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161085c565b60005460ff1661237c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161085c565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005460ff161561245e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161085c565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123c73390565b60005460ff161561251e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161085c565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf72b39b6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561258857600080fd5b505af115801561259c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c091906134f1565b156125f6576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254604080517f343157b4000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163343157b491600480830192606092919082900301818787803b15801561266257600080fd5b505af1158015612676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269a9190613564565b90506003548160200151426126af9190613bf2565b11156126e7576040517fa8c8866900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828060200190518101906126fd9190613564565b9050806040015181602001511115612741576040517f67a3824c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606081018252600d54808252600e546020830152600f549282019290925290156127ca576040810151612779906001613b1a565b8260200151146127ca57806040015182602001516040517fcc7f1bd000000000000000000000000000000000000000000000000000000000815260040161085c929190918252602082015260400190565b81516000908152600a60209081526040918290204290558351600d8190558185018051600e558386018051600f55845192835290519282019290925290518183015290517f07d7bce06be2a7b0230e4dd0d72523c0407e82419ab1d947c5ddaf59ca36484e9181900360600190a1505050505050565b600061284d826020613bb5565b612858856020613bb5565b61286488610144613b1a565b61286e9190613b1a565b6128789190613b1a565b612883906000613b1a565b90503681146128ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d617463680000000000000000604482015260640161085c565b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081602001511461295c5780602001516040517fd44bc9eb00000000000000000000000000000000000000000000000000000000815260040161085c91815260200190565b80608001516040015151600114158061297f575080608001516060015151600114155b156129b6576040517f4c056b6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16816080015160400151600081518110612a0857612a08613d71565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461109257806080015160400151600081518110612a4657612a46613d71565b60200260200101516040517fbf16aab600000000000000000000000000000000000000000000000000000000815260040161085c919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60808101515173ffffffffffffffffffffffffffffffffffffffff16301480612b1957507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681608001516000015173ffffffffffffffffffffffffffffffffffffffff16145b80612b7757507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681608001516000015173ffffffffffffffffffffffffffffffffffffffff16145b80612b9c575060808101515173ffffffffffffffffffffffffffffffffffffffff163b155b15611092576080810151516040517f9cfea58300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240161085c565b6000612bfd83612ddc565b8183600201541015612c1157506000612c2f565b81836002016000828254612c259190613bf2565b9091555060019150505b92915050565b6000808a8a8a8a8a8a8a8a8a604051602001612c59999897969594939291906138f4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116331415612d60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161085c565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b806001015481600201541115612e1e576040517f9725942a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001015481600201541415612e315750565b60038101544290811015612e71576040517ff01f197500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826003015482612e839190613bf2565b60018401548454919250612eaf91612e9b9084613bb5565b8560020154612eaa9190613b1a565b612ebd565b600284015550600390910155565b6000818310612ecc5781612ece565b825b9392505050565b604051806103e00160405280601f906020820280368337509192915050565b8035612eff81613dcf565b919050565b600082601f830112612f1557600080fd5b81356020612f2a612f2583613af6565b613aa7565b80838252828201915082860187848660051b8901011115612f4a57600080fd5b60005b85811015612f72578135612f6081613dcf565b84529284019290840190600101612f4d565b5090979650505050505050565b60008083601f840112612f9157600080fd5b50813567ffffffffffffffff811115612fa957600080fd5b6020830191508360208260051b8501011115612fc457600080fd5b9250929050565b600082601f830112612fdc57600080fd5b81356020612fec612f2583613af6565b80838252828201915082860187848660051b890101111561300c57600080fd5b60005b85811015612f725781358452928401929084019060010161300f565b600082601f83011261303c57600080fd5b8135602061304c612f2583613af6565b80838252828201915082860187848660051b890101111561306c57600080fd5b60005b85811015612f7257813561308281613dcf565b8452928401929084019060010161306f565b600082601f8301126130a557600080fd5b813567ffffffffffffffff8111156130bf576130bf613da0565b6130f060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613aa7565b81815284602083860101111561310557600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff81168114612eff57600080fd5b803560ff81168114612eff57600080fd5b60006020828403121561315d57600080fd5b8135612ece81613dcf565b60008060008060008060c0878903121561318157600080fd5b863567ffffffffffffffff8082111561319957600080fd5b6131a58a838b01612f04565b975060208901359150808211156131bb57600080fd5b6131c78a838b01612f04565b96506131d560408a0161313a565b955060608901359150808211156131eb57600080fd5b6131f78a838b01613094565b945061320560808a01613122565b935060a089013591508082111561321b57600080fd5b5061322889828a01613094565b9150509295509295509295565b60008060008060008060008060e0898b03121561325157600080fd5b606089018a81111561326257600080fd5b8998503567ffffffffffffffff8082111561327c57600080fd5b818b0191508b601f83011261329057600080fd5b81358181111561329f57600080fd5b8c60208285010111156132b157600080fd5b6020830199508098505060808b01359150808211156132cf57600080fd5b6132db8c838d01612f7f565b909750955060a08b01359150808211156132f457600080fd5b506133018b828c01612f7f565b999c989b50969995989497949560c00135949350505050565b60008060006060848603121561332f57600080fd5b833567ffffffffffffffff81111561334657600080fd5b61335286828701612fcb565b9660208601359650604090950135949350505050565b60008060006060848603121561337d57600080fd5b833567ffffffffffffffff8082111561339557600080fd5b6133a187838801612fcb565b945060208601359150808211156133b757600080fd5b9085019060a082880312156133cb57600080fd5b6133d3613a38565b82358152602083013560208201526040830135604082015260608301356133f981613dcf565b606082015260808301358281111561341057600080fd5b929092019160c0838903121561342557600080fd5b61342d613a61565b61343684612ef4565b815260208401358381111561344a57600080fd5b6134568a828701613094565b60208301525060408401358381111561346e57600080fd5b61347a8a82870161302b565b60408301525060608401358381111561349257600080fd5b61349e8a828701612fcb565b6060830152506134b060808501612ef4565b608082015260a0840135838111156134c757600080fd5b6134d38a828701613094565b60a08301525060808201529497949650505050604092909201359150565b60006020828403121561350357600080fd5b8151612ece81613df1565b60006020828403121561352057600080fd5b5035919050565b60006020828403121561353957600080fd5b813567ffffffffffffffff81111561355057600080fd5b61355c84828501613094565b949350505050565b60006060828403121561357657600080fd5b61357e613a84565b8251815260208301516020820152604083015160408201528091505092915050565b6000806000606084860312156135b557600080fd5b833592506020840135915060408401356135ce81613df1565b809150509250925092565b600081518084526020808501945080840160005b8381101561361f57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016135ed565b509495945050505050565b600081518084526020808501945080840160005b8381101561361f5781518752958201959082019060010161363e565b60008151808452613672816020860160208601613c09565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8051825260006020808301518185015260408301516040850152606083015173ffffffffffffffffffffffffffffffffffffffff80821660608701526080850151915060a060808701528082511660a08701528282015160c08088015261370f61016088018261365a565b60408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60898303810160e08b0152815180845291870193506000929091908701905b8084101561377557845186168252938701936001939093019290870190613753565b5060608601519650818a8203016101008b0152613792818861362a565b965050608085015193506137bf6101208a018573ffffffffffffffffffffffffffffffffffffffff169052565b60a0850151945080898703016101408a0152505050506137df828261365a565b95945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008316815260008251613822816001850160208701613c09565b919091016001019392505050565b8281526060826020830137600060809190910190815292915050565b8183823760009101908152919050565b602081526000612ece60208301846135d9565b606080825284519082018190526000906020906080840190828801845b828110156138a85781518452928401929084019060010161388c565b505050838103828501526138bc81876136a4565b92505050826040830152949350505050565b602081526000612ece602083018461365a565b602081526000612ece60208301846136a4565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b16604085015281606085015261393b8285018b6135d9565b9150838203608085015261394f828a6135d9565b915060ff881660a085015283820360c085015261396c828861365a565b90861660e08501528381036101008501529050613989818561365a565b9c9b505050505050505050505050565b82815260406020820152600061355c604083018461365a565b600061012063ffffffff808d1684528b6020850152808b166040850152508060608401526139e28184018a6135d9565b905082810360808401526139f681896135d9565b905060ff871660a084015282810360c0840152613a13818761365a565b905067ffffffffffffffff851660e0840152828103610100840152613989818561365a565b60405160a0810167ffffffffffffffff81118282101715613a5b57613a5b613da0565b60405290565b60405160c0810167ffffffffffffffff81118282101715613a5b57613a5b613da0565b6040516060810167ffffffffffffffff81118282101715613a5b57613a5b613da0565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613aee57613aee613da0565b604052919050565b600067ffffffffffffffff821115613b1057613b10613da0565b5060051b60200190565b60008219821115613b2d57613b2d613cb5565b500190565b600063ffffffff808316818516808303821115613b5157613b51613cb5565b01949350505050565b600060ff821660ff84168060ff03821115613b7757613b77613cb5565b019392505050565b600082613b8e57613b8e613ce4565b500490565b600060ff831680613ba657613ba6613ce4565b8060ff84160491505092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613bed57613bed613cb5565b500290565b600082821015613c0457613c04613cb5565b500390565b60005b83811015613c24578181015183820152602001613c0c565b83811115613c33576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613c6b57613c6b613cb5565b5060010190565b600082613c8157613c81613ce4565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461109257600080fd5b801515811461109257600080fdfea164736f6c6343000806000a",
}

var SingleTokenOffRampHelperABI = SingleTokenOffRampHelperMetaData.ABI

var SingleTokenOffRampHelperBin = SingleTokenOffRampHelperMetaData.Bin

func DeploySingleTokenOffRampHelper(auth *bind.TransactOpts, backend bind.ContractBackend, sourceChainId *big.Int, destinationChainId *big.Int, token common.Address, pool common.Address, tokenBucketRate *big.Int, tokenBucketCapacity *big.Int, afn common.Address, maxTimeWithoutAFNSignal *big.Int, executionDelaySeconds *big.Int) (common.Address, *types.Transaction, *SingleTokenOffRampHelper, error) {
	parsed, err := SingleTokenOffRampHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SingleTokenOffRampHelperBin), backend, sourceChainId, destinationChainId, token, pool, tokenBucketRate, tokenBucketCapacity, afn, maxTimeWithoutAFNSignal, executionDelaySeconds)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SingleTokenOffRampHelper{SingleTokenOffRampHelperCaller: SingleTokenOffRampHelperCaller{contract: contract}, SingleTokenOffRampHelperTransactor: SingleTokenOffRampHelperTransactor{contract: contract}, SingleTokenOffRampHelperFilterer: SingleTokenOffRampHelperFilterer{contract: contract}}, nil
}

type SingleTokenOffRampHelper struct {
	address common.Address
	abi     abi.ABI
	SingleTokenOffRampHelperCaller
	SingleTokenOffRampHelperTransactor
	SingleTokenOffRampHelperFilterer
}

type SingleTokenOffRampHelperCaller struct {
	contract *bind.BoundContract
}

type SingleTokenOffRampHelperTransactor struct {
	contract *bind.BoundContract
}

type SingleTokenOffRampHelperFilterer struct {
	contract *bind.BoundContract
}

type SingleTokenOffRampHelperSession struct {
	Contract     *SingleTokenOffRampHelper
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type SingleTokenOffRampHelperCallerSession struct {
	Contract *SingleTokenOffRampHelperCaller
	CallOpts bind.CallOpts
}

type SingleTokenOffRampHelperTransactorSession struct {
	Contract     *SingleTokenOffRampHelperTransactor
	TransactOpts bind.TransactOpts
}

type SingleTokenOffRampHelperRaw struct {
	Contract *SingleTokenOffRampHelper
}

type SingleTokenOffRampHelperCallerRaw struct {
	Contract *SingleTokenOffRampHelperCaller
}

type SingleTokenOffRampHelperTransactorRaw struct {
	Contract *SingleTokenOffRampHelperTransactor
}

func NewSingleTokenOffRampHelper(address common.Address, backend bind.ContractBackend) (*SingleTokenOffRampHelper, error) {
	abi, err := abi.JSON(strings.NewReader(SingleTokenOffRampHelperABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindSingleTokenOffRampHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelper{address: address, abi: abi, SingleTokenOffRampHelperCaller: SingleTokenOffRampHelperCaller{contract: contract}, SingleTokenOffRampHelperTransactor: SingleTokenOffRampHelperTransactor{contract: contract}, SingleTokenOffRampHelperFilterer: SingleTokenOffRampHelperFilterer{contract: contract}}, nil
}

func NewSingleTokenOffRampHelperCaller(address common.Address, caller bind.ContractCaller) (*SingleTokenOffRampHelperCaller, error) {
	contract, err := bindSingleTokenOffRampHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperCaller{contract: contract}, nil
}

func NewSingleTokenOffRampHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*SingleTokenOffRampHelperTransactor, error) {
	contract, err := bindSingleTokenOffRampHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperTransactor{contract: contract}, nil
}

func NewSingleTokenOffRampHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*SingleTokenOffRampHelperFilterer, error) {
	contract, err := bindSingleTokenOffRampHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperFilterer{contract: contract}, nil
}

func bindSingleTokenOffRampHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SingleTokenOffRampHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SingleTokenOffRampHelper.Contract.SingleTokenOffRampHelperCaller.contract.Call(opts, result, method, params...)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SingleTokenOffRampHelperTransactor.contract.Transfer(opts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SingleTokenOffRampHelperTransactor.contract.Transact(opts, method, params...)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SingleTokenOffRampHelper.Contract.contract.Call(opts, result, method, params...)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.contract.Transfer(opts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.contract.Transact(opts, method, params...)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) CHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) CHAINID() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.CHAINID(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) CHAINID() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.CHAINID(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) POOL() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.POOL(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) POOL() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.POOL(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) SOURCECHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "SOURCE_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) SOURCECHAINID() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.SOURCECHAINID(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) SOURCECHAINID() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.SOURCECHAINID(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) TOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) TOKEN() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.TOKEN(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) TOKEN() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.TOKEN(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GenerateMerkleRoot(opts *bind.CallOpts, proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "generateMerkleRoot", proof, leaf, index)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GenerateMerkleRoot(proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error) {
	return _SingleTokenOffRampHelper.Contract.GenerateMerkleRoot(&_SingleTokenOffRampHelper.CallOpts, proof, leaf, index)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GenerateMerkleRoot(proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error) {
	return _SingleTokenOffRampHelper.Contract.GenerateMerkleRoot(&_SingleTokenOffRampHelper.CallOpts, proof, leaf, index)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetAFN() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.GetAFN(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetAFN() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.GetAFN(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetExecuted(opts *bind.CallOpts, sequenceNumber *big.Int) (bool, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getExecuted", sequenceNumber)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetExecuted(sequenceNumber *big.Int) (bool, error) {
	return _SingleTokenOffRampHelper.Contract.GetExecuted(&_SingleTokenOffRampHelper.CallOpts, sequenceNumber)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetExecuted(sequenceNumber *big.Int) (bool, error) {
	return _SingleTokenOffRampHelper.Contract.GetExecuted(&_SingleTokenOffRampHelper.CallOpts, sequenceNumber)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetExecutionDelaySeconds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getExecutionDelaySeconds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetExecutionDelaySeconds() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetExecutionDelaySeconds(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetExecutionDelaySeconds() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetExecutionDelaySeconds(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetLastReport(opts *bind.CallOpts) (CCIPRelayReport, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getLastReport")

	if err != nil {
		return *new(CCIPRelayReport), err
	}

	out0 := *abi.ConvertType(out[0], new(CCIPRelayReport)).(*CCIPRelayReport)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetLastReport() (CCIPRelayReport, error) {
	return _SingleTokenOffRampHelper.Contract.GetLastReport(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetLastReport() (CCIPRelayReport, error) {
	return _SingleTokenOffRampHelper.Contract.GetLastReport(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetMaxSecondsWithoutAFNHeartbeat(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getMaxSecondsWithoutAFNHeartbeat")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetMaxSecondsWithoutAFNHeartbeat() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetMaxSecondsWithoutAFNHeartbeat() (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetMerkleRoot(&_SingleTokenOffRampHelper.CallOpts, root)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _SingleTokenOffRampHelper.Contract.GetMerkleRoot(&_SingleTokenOffRampHelper.CallOpts, root)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) GetTokenBucket(opts *bind.CallOpts) (TokenLimitsTokenBucket, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "getTokenBucket")

	if err != nil {
		return *new(TokenLimitsTokenBucket), err
	}

	out0 := *abi.ConvertType(out[0], new(TokenLimitsTokenBucket)).(*TokenLimitsTokenBucket)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) GetTokenBucket() (TokenLimitsTokenBucket, error) {
	return _SingleTokenOffRampHelper.Contract.GetTokenBucket(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) GetTokenBucket() (TokenLimitsTokenBucket, error) {
	return _SingleTokenOffRampHelper.Contract.GetTokenBucket(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _SingleTokenOffRampHelper.Contract.LatestConfigDetails(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _SingleTokenOffRampHelper.Contract.LatestConfigDetails(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _SingleTokenOffRampHelper.Contract.LatestConfigDigestAndEpoch(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _SingleTokenOffRampHelper.Contract.LatestConfigDigestAndEpoch(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Owner() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.Owner(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) Owner() (common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.Owner(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Paused() (bool, error) {
	return _SingleTokenOffRampHelper.Contract.Paused(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) Paused() (bool, error) {
	return _SingleTokenOffRampHelper.Contract.Paused(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Transmitters() ([]common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.Transmitters(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) Transmitters() ([]common.Address, error) {
	return _SingleTokenOffRampHelper.Contract.Transmitters(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SingleTokenOffRampHelper.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) TypeAndVersion() (string, error) {
	return _SingleTokenOffRampHelper.Contract.TypeAndVersion(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperCallerSession) TypeAndVersion() (string, error) {
	return _SingleTokenOffRampHelper.Contract.TypeAndVersion(&_SingleTokenOffRampHelper.CallOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "acceptOwnership")
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) AcceptOwnership() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.AcceptOwnership(&_SingleTokenOffRampHelper.TransactOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.AcceptOwnership(&_SingleTokenOffRampHelper.TransactOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) ConfigureTokenBucket(opts *bind.TransactOpts, rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "configureTokenBucket", rate, capacity, full)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) ConfigureTokenBucket(rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.ConfigureTokenBucket(&_SingleTokenOffRampHelper.TransactOpts, rate, capacity, full)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) ConfigureTokenBucket(rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.ConfigureTokenBucket(&_SingleTokenOffRampHelper.TransactOpts, rate, capacity, full)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) ExecuteTransaction(opts *bind.TransactOpts, proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "executeTransaction", proof, message, index)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) ExecuteTransaction(proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.ExecuteTransaction(&_SingleTokenOffRampHelper.TransactOpts, proof, message, index)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) ExecuteTransaction(proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.ExecuteTransaction(&_SingleTokenOffRampHelper.TransactOpts, proof, message, index)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "pause")
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Pause() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Pause(&_SingleTokenOffRampHelper.TransactOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) Pause() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Pause(&_SingleTokenOffRampHelper.TransactOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) Report(opts *bind.TransactOpts, merkle []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "report", merkle)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Report(merkle []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Report(&_SingleTokenOffRampHelper.TransactOpts, merkle)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) Report(merkle []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Report(&_SingleTokenOffRampHelper.TransactOpts, merkle)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "setAFN", afn)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetAFN(&_SingleTokenOffRampHelper.TransactOpts, afn)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetAFN(&_SingleTokenOffRampHelper.TransactOpts, afn)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "setConfig", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetConfig(&_SingleTokenOffRampHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetConfig(&_SingleTokenOffRampHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) SetExecutionDelaySeconds(opts *bind.TransactOpts, executionDelaySeconds *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "setExecutionDelaySeconds", executionDelaySeconds)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) SetExecutionDelaySeconds(executionDelaySeconds *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetExecutionDelaySeconds(&_SingleTokenOffRampHelper.TransactOpts, executionDelaySeconds)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) SetExecutionDelaySeconds(executionDelaySeconds *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetExecutionDelaySeconds(&_SingleTokenOffRampHelper.TransactOpts, executionDelaySeconds)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) SetMaxSecondsWithoutAFNHeartbeat(opts *bind.TransactOpts, newTime *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "setMaxSecondsWithoutAFNHeartbeat", newTime)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) SetMaxSecondsWithoutAFNHeartbeat(newTime *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRampHelper.TransactOpts, newTime)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) SetMaxSecondsWithoutAFNHeartbeat(newTime *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.SetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRampHelper.TransactOpts, newTime)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "transferOwnership", to)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.TransferOwnership(&_SingleTokenOffRampHelper.TransactOpts, to)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.TransferOwnership(&_SingleTokenOffRampHelper.TransactOpts, to)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Transmit(&_SingleTokenOffRampHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Transmit(&_SingleTokenOffRampHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.contract.Transact(opts, "unpause")
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperSession) Unpause() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Unpause(&_SingleTokenOffRampHelper.TransactOpts)
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperTransactorSession) Unpause() (*types.Transaction, error) {
	return _SingleTokenOffRampHelper.Contract.Unpause(&_SingleTokenOffRampHelper.TransactOpts)
}

type SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator struct {
	Event *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet struct {
	OldTime *big.Int
	NewTime *big.Int
	Raw     types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterAFNMaxHeartbeatTimeSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "AFNMaxHeartbeatTimeSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator{contract: _SingleTokenOffRampHelper.contract, event: "AFNMaxHeartbeatTimeSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchAFNMaxHeartbeatTimeSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "AFNMaxHeartbeatTimeSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "AFNMaxHeartbeatTimeSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseAFNMaxHeartbeatTimeSet(log types.Log) (*SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet, error) {
	event := new(SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "AFNMaxHeartbeatTimeSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperAFNSetIterator struct {
	Event *SingleTokenOffRampHelperAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperAFNSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterAFNSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperAFNSetIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperAFNSetIterator{contract: _SingleTokenOffRampHelper.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperAFNSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperAFNSet)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseAFNSet(log types.Log) (*SingleTokenOffRampHelperAFNSet, error) {
	event := new(SingleTokenOffRampHelperAFNSet)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperConfigSetIterator struct {
	Event *SingleTokenOffRampHelperConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperConfigSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterConfigSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperConfigSetIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperConfigSetIterator{contract: _SingleTokenOffRampHelper.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperConfigSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperConfigSet)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseConfigSet(log types.Log) (*SingleTokenOffRampHelperConfigSet, error) {
	event := new(SingleTokenOffRampHelperConfigSet)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperCrossChainMessageExecutedIterator struct {
	Event *SingleTokenOffRampHelperCrossChainMessageExecuted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperCrossChainMessageExecutedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperCrossChainMessageExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperCrossChainMessageExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperCrossChainMessageExecutedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperCrossChainMessageExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperCrossChainMessageExecuted struct {
	SequenceNumber *big.Int
	Raw            types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterCrossChainMessageExecuted(opts *bind.FilterOpts, sequenceNumber []*big.Int) (*SingleTokenOffRampHelperCrossChainMessageExecutedIterator, error) {

	var sequenceNumberRule []interface{}
	for _, sequenceNumberItem := range sequenceNumber {
		sequenceNumberRule = append(sequenceNumberRule, sequenceNumberItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "CrossChainMessageExecuted", sequenceNumberRule)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperCrossChainMessageExecutedIterator{contract: _SingleTokenOffRampHelper.contract, event: "CrossChainMessageExecuted", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchCrossChainMessageExecuted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperCrossChainMessageExecuted, sequenceNumber []*big.Int) (event.Subscription, error) {

	var sequenceNumberRule []interface{}
	for _, sequenceNumberItem := range sequenceNumber {
		sequenceNumberRule = append(sequenceNumberRule, sequenceNumberItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "CrossChainMessageExecuted", sequenceNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperCrossChainMessageExecuted)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "CrossChainMessageExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseCrossChainMessageExecuted(log types.Log) (*SingleTokenOffRampHelperCrossChainMessageExecuted, error) {
	event := new(SingleTokenOffRampHelperCrossChainMessageExecuted)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "CrossChainMessageExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperExecutionDelaySecondsSetIterator struct {
	Event *SingleTokenOffRampHelperExecutionDelaySecondsSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperExecutionDelaySecondsSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperExecutionDelaySecondsSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperExecutionDelaySecondsSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperExecutionDelaySecondsSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperExecutionDelaySecondsSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperExecutionDelaySecondsSet struct {
	Delay *big.Int
	Raw   types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterExecutionDelaySecondsSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperExecutionDelaySecondsSetIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "ExecutionDelaySecondsSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperExecutionDelaySecondsSetIterator{contract: _SingleTokenOffRampHelper.contract, event: "ExecutionDelaySecondsSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchExecutionDelaySecondsSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperExecutionDelaySecondsSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "ExecutionDelaySecondsSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperExecutionDelaySecondsSet)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ExecutionDelaySecondsSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseExecutionDelaySecondsSet(log types.Log) (*SingleTokenOffRampHelperExecutionDelaySecondsSet, error) {
	event := new(SingleTokenOffRampHelperExecutionDelaySecondsSet)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ExecutionDelaySecondsSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperNewTokenBucketConstructedIterator struct {
	Event *SingleTokenOffRampHelperNewTokenBucketConstructed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperNewTokenBucketConstructedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperNewTokenBucketConstructed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperNewTokenBucketConstructed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperNewTokenBucketConstructedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperNewTokenBucketConstructedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperNewTokenBucketConstructed struct {
	Rate     *big.Int
	Capacity *big.Int
	Full     bool
	Raw      types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterNewTokenBucketConstructed(opts *bind.FilterOpts) (*SingleTokenOffRampHelperNewTokenBucketConstructedIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "NewTokenBucketConstructed")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperNewTokenBucketConstructedIterator{contract: _SingleTokenOffRampHelper.contract, event: "NewTokenBucketConstructed", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchNewTokenBucketConstructed(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperNewTokenBucketConstructed) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "NewTokenBucketConstructed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperNewTokenBucketConstructed)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "NewTokenBucketConstructed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseNewTokenBucketConstructed(log types.Log) (*SingleTokenOffRampHelperNewTokenBucketConstructed, error) {
	event := new(SingleTokenOffRampHelperNewTokenBucketConstructed)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "NewTokenBucketConstructed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperOwnershipTransferRequestedIterator struct {
	Event *SingleTokenOffRampHelperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampHelperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperOwnershipTransferRequestedIterator{contract: _SingleTokenOffRampHelper.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperOwnershipTransferRequested)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseOwnershipTransferRequested(log types.Log) (*SingleTokenOffRampHelperOwnershipTransferRequested, error) {
	event := new(SingleTokenOffRampHelperOwnershipTransferRequested)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperOwnershipTransferredIterator struct {
	Event *SingleTokenOffRampHelperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampHelperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperOwnershipTransferredIterator{contract: _SingleTokenOffRampHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperOwnershipTransferred)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseOwnershipTransferred(log types.Log) (*SingleTokenOffRampHelperOwnershipTransferred, error) {
	event := new(SingleTokenOffRampHelperOwnershipTransferred)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperPausedIterator struct {
	Event *SingleTokenOffRampHelperPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperPausedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterPaused(opts *bind.FilterOpts) (*SingleTokenOffRampHelperPausedIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperPausedIterator{contract: _SingleTokenOffRampHelper.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperPaused) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperPaused)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParsePaused(log types.Log) (*SingleTokenOffRampHelperPaused, error) {
	event := new(SingleTokenOffRampHelperPaused)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperReportAcceptedIterator struct {
	Event *SingleTokenOffRampHelperReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperReportAccepted struct {
	Report CCIPRelayReport
	Raw    types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*SingleTokenOffRampHelperReportAcceptedIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperReportAcceptedIterator{contract: _SingleTokenOffRampHelper.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperReportAccepted) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperReportAccepted)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseReportAccepted(log types.Log) (*SingleTokenOffRampHelperReportAccepted, error) {
	event := new(SingleTokenOffRampHelperReportAccepted)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperTransmittedIterator struct {
	Event *SingleTokenOffRampHelperTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperTransmittedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterTransmitted(opts *bind.FilterOpts) (*SingleTokenOffRampHelperTransmittedIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperTransmittedIterator{contract: _SingleTokenOffRampHelper.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperTransmitted) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperTransmitted)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseTransmitted(log types.Log) (*SingleTokenOffRampHelperTransmitted, error) {
	event := new(SingleTokenOffRampHelperTransmitted)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampHelperUnpausedIterator struct {
	Event *SingleTokenOffRampHelperUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampHelperUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampHelperUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampHelperUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampHelperUnpausedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampHelperUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampHelperUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) FilterUnpaused(opts *bind.FilterOpts) (*SingleTokenOffRampHelperUnpausedIterator, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampHelperUnpausedIterator{contract: _SingleTokenOffRampHelper.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperUnpaused) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRampHelper.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampHelperUnpaused)
				if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelperFilterer) ParseUnpaused(log types.Log) (*SingleTokenOffRampHelperUnpaused, error) {
	event := new(SingleTokenOffRampHelperUnpaused)
	if err := _SingleTokenOffRampHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelper) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _SingleTokenOffRampHelper.abi.Events["AFNMaxHeartbeatTimeSet"].ID:
		return _SingleTokenOffRampHelper.ParseAFNMaxHeartbeatTimeSet(log)
	case _SingleTokenOffRampHelper.abi.Events["AFNSet"].ID:
		return _SingleTokenOffRampHelper.ParseAFNSet(log)
	case _SingleTokenOffRampHelper.abi.Events["ConfigSet"].ID:
		return _SingleTokenOffRampHelper.ParseConfigSet(log)
	case _SingleTokenOffRampHelper.abi.Events["CrossChainMessageExecuted"].ID:
		return _SingleTokenOffRampHelper.ParseCrossChainMessageExecuted(log)
	case _SingleTokenOffRampHelper.abi.Events["ExecutionDelaySecondsSet"].ID:
		return _SingleTokenOffRampHelper.ParseExecutionDelaySecondsSet(log)
	case _SingleTokenOffRampHelper.abi.Events["NewTokenBucketConstructed"].ID:
		return _SingleTokenOffRampHelper.ParseNewTokenBucketConstructed(log)
	case _SingleTokenOffRampHelper.abi.Events["OwnershipTransferRequested"].ID:
		return _SingleTokenOffRampHelper.ParseOwnershipTransferRequested(log)
	case _SingleTokenOffRampHelper.abi.Events["OwnershipTransferred"].ID:
		return _SingleTokenOffRampHelper.ParseOwnershipTransferred(log)
	case _SingleTokenOffRampHelper.abi.Events["Paused"].ID:
		return _SingleTokenOffRampHelper.ParsePaused(log)
	case _SingleTokenOffRampHelper.abi.Events["ReportAccepted"].ID:
		return _SingleTokenOffRampHelper.ParseReportAccepted(log)
	case _SingleTokenOffRampHelper.abi.Events["Transmitted"].ID:
		return _SingleTokenOffRampHelper.ParseTransmitted(log)
	case _SingleTokenOffRampHelper.abi.Events["Unpaused"].ID:
		return _SingleTokenOffRampHelper.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet) Topic() common.Hash {
	return common.HexToHash("0x72e72b3dfd44fb4d803f52b2d895c7347b912da657d0f77599a0afc26956c251")
}

func (SingleTokenOffRampHelperAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (SingleTokenOffRampHelperConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (SingleTokenOffRampHelperCrossChainMessageExecuted) Topic() common.Hash {
	return common.HexToHash("0xc51bf0f6d90b467e0849da0ad18a4d9144a4b78b9f83202e1c65cd68f72d4a38")
}

func (SingleTokenOffRampHelperExecutionDelaySecondsSet) Topic() common.Hash {
	return common.HexToHash("0xfbb92e09fd0b7bcabafe655657e745c10bcd9812c1e32e205e477a3c5ff74fc0")
}

func (SingleTokenOffRampHelperNewTokenBucketConstructed) Topic() common.Hash {
	return common.HexToHash("0xfaf3310019e551542b5c6014c1ae13e2a8d3943d7611d779c4df9b36c111924f")
}

func (SingleTokenOffRampHelperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (SingleTokenOffRampHelperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (SingleTokenOffRampHelperPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (SingleTokenOffRampHelperReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x07d7bce06be2a7b0230e4dd0d72523c0407e82419ab1d947c5ddaf59ca36484e")
}

func (SingleTokenOffRampHelperTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (SingleTokenOffRampHelperUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_SingleTokenOffRampHelper *SingleTokenOffRampHelper) Address() common.Address {
	return _SingleTokenOffRampHelper.address
}

type SingleTokenOffRampHelperInterface interface {
	CHAINID(opts *bind.CallOpts) (*big.Int, error)

	POOL(opts *bind.CallOpts) (common.Address, error)

	SOURCECHAINID(opts *bind.CallOpts) (*big.Int, error)

	TOKEN(opts *bind.CallOpts) (common.Address, error)

	GenerateMerkleRoot(opts *bind.CallOpts, proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error)

	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetExecuted(opts *bind.CallOpts, sequenceNumber *big.Int) (bool, error)

	GetExecutionDelaySeconds(opts *bind.CallOpts) (*big.Int, error)

	GetLastReport(opts *bind.CallOpts) (CCIPRelayReport, error)

	GetMaxSecondsWithoutAFNHeartbeat(opts *bind.CallOpts) (*big.Int, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	GetTokenBucket(opts *bind.CallOpts) (TokenLimitsTokenBucket, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ConfigureTokenBucket(opts *bind.TransactOpts, rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error)

	ExecuteTransaction(opts *bind.TransactOpts, proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	Report(opts *bind.TransactOpts, merkle []byte) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	SetExecutionDelaySeconds(opts *bind.TransactOpts, executionDelaySeconds *big.Int) (*types.Transaction, error)

	SetMaxSecondsWithoutAFNHeartbeat(opts *bind.TransactOpts, newTime *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterAFNMaxHeartbeatTimeSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperAFNMaxHeartbeatTimeSetIterator, error)

	WatchAFNMaxHeartbeatTimeSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet) (event.Subscription, error)

	ParseAFNMaxHeartbeatTimeSet(log types.Log) (*SingleTokenOffRampHelperAFNMaxHeartbeatTimeSet, error)

	FilterAFNSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*SingleTokenOffRampHelperAFNSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*SingleTokenOffRampHelperConfigSet, error)

	FilterCrossChainMessageExecuted(opts *bind.FilterOpts, sequenceNumber []*big.Int) (*SingleTokenOffRampHelperCrossChainMessageExecutedIterator, error)

	WatchCrossChainMessageExecuted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperCrossChainMessageExecuted, sequenceNumber []*big.Int) (event.Subscription, error)

	ParseCrossChainMessageExecuted(log types.Log) (*SingleTokenOffRampHelperCrossChainMessageExecuted, error)

	FilterExecutionDelaySecondsSet(opts *bind.FilterOpts) (*SingleTokenOffRampHelperExecutionDelaySecondsSetIterator, error)

	WatchExecutionDelaySecondsSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperExecutionDelaySecondsSet) (event.Subscription, error)

	ParseExecutionDelaySecondsSet(log types.Log) (*SingleTokenOffRampHelperExecutionDelaySecondsSet, error)

	FilterNewTokenBucketConstructed(opts *bind.FilterOpts) (*SingleTokenOffRampHelperNewTokenBucketConstructedIterator, error)

	WatchNewTokenBucketConstructed(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperNewTokenBucketConstructed) (event.Subscription, error)

	ParseNewTokenBucketConstructed(log types.Log) (*SingleTokenOffRampHelperNewTokenBucketConstructed, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampHelperOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*SingleTokenOffRampHelperOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampHelperOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*SingleTokenOffRampHelperOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*SingleTokenOffRampHelperPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*SingleTokenOffRampHelperPaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*SingleTokenOffRampHelperReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*SingleTokenOffRampHelperReportAccepted, error)

	FilterTransmitted(opts *bind.FilterOpts) (*SingleTokenOffRampHelperTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*SingleTokenOffRampHelperTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*SingleTokenOffRampHelperUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampHelperUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*SingleTokenOffRampHelperUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

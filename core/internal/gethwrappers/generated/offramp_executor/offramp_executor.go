// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package offramp_executor

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

var OffRampExecutorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"needFee\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNeedFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOffRamp\",\"outputs\":[{\"internalType\":\"contractOffRampInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setNeedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAccumulatedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162002e6d38038062002e6d833981016040819052620000349162000199565b600133806000816200008d5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c057620000c081620000ee565b50505015156080526001600160a01b039190911660a0526008805460ff1916911515919091179055620001e7565b336001600160a01b03821603620001485760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000084565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008060408385031215620001ad57600080fd5b82516001600160a01b0381168114620001c557600080fd5b60208401519092508015158114620001dc57600080fd5b809150509250929050565b60805160a051612c59620002146000396000818161021801526116b5015260006105a90152612c596000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063c1cc9f0d11610066578063c1cc9f0d14610216578063c2d8841c1461023c578063e3d0e7121461024f578063f2fde38b1461026257600080fd5b80638da5cb5b146101a4578063afcb95d7146101e3578063b1dc65a41461020357600080fd5b806379ba5097116100bd57806379ba509714610157578063814118341461015f57806381ff70481461017457600080fd5b8063181f5a77146100e45780633f48b73a1461012c57806359e96b5b14610142575b600080fd5b604080518082018252601581527f4f666652616d704578656375746f7220312e302e300000000000000000000000602082015290516101239190611d0e565b60405180910390f35b60085460ff166040519015158152602001610123565b610155610150366004611d43565b610275565b005b6101556102fb565b6101676103fd565b6040516101239190611dd5565b6004546002546040805163ffffffff80851682526401000000009094049093166020840152820152606001610123565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610123565b604080516001815260006020820181905291810191909152606001610123565b610155610211366004611e34565b61046c565b7f00000000000000000000000000000000000000000000000000000000000000006101be565b61015561024a366004611f27565b610b15565b61015561025d366004612197565b610b4e565b610155610270366004612264565b611533565b61027d611547565b61029e73ffffffffffffffffffffffffffffffffffffffff841683836115ca565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290527f5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa89060600160405180910390a1505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6060600780548060200260200160405190810160405280929190818152602001828054801561046257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610437575b5050505050905090565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c0135916104c291849163ffffffff851691908e908e908190840183828082843760009201919091525061165c92505050565b6040805183815262ffffff600884901c1660208201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16040805160608101825260025480825260035460ff80821660208501526101009091041692820192909252908314610597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f636f6e666967446967657374206d69736d6174636800000000000000000000006044820152606401610378565b6105a58b8b8b8b8b8b611726565b60007f000000000000000000000000000000000000000000000000000000000000000015610602576002826020015183604001516105e391906122df565b6105ed9190612304565b6105f89060016122df565b60ff169050610618565b60208201516106129060016122df565b60ff1690505b888114610681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e6174757265730000000000006044820152606401610378565b8887146106ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e00006044820152606401610378565b3360009081526005602090815260408083208151808301909252805460ff8082168452929391929184019161010090910416600281111561072d5761072d61234d565b600281111561073e5761073e61234d565b905250905060028160200151600281111561075b5761075b61234d565b1480156107a257506007816000015160ff168154811061077d5761077d612281565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b610808576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f756e617574686f72697a6564207472616e736d697474657200000000000000006044820152606401610378565b50505050506000888860405161081f92919061237c565b604051908190038120610836918c9060200161238c565b604051602081830303815290604052805190602001209050610856611c75565b604080518082019091526000808252602082015260005b88811015610af357600060018588846020811061088c5761088c612281565b61089991901a601b6122df565b8d8d868181106108ab576108ab612281565b905060200201358c8c878181106108c4576108c4612281565b9050602002013560405160008152602001604052604051610901949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610923573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff811660009081526005602090815290849020838501909452835460ff808216855292965092945084019161010090041660028111156109a3576109a361234d565b60028111156109b4576109b461234d565b90525092506001836020015160028111156109d1576109d161234d565b14610a38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e00006044820152606401610378565b8251849060ff16601f8110610a4f57610a4f612281565b602002015115610abb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f6e2d756e69717565207369676e61747572650000000000000000000000006044820152606401610378565b600184846000015160ff16601f8110610ad657610ad6612281565b911515602090920201525080610aeb816123a8565b91505061086d565b5050505063ffffffff8110610b0a57610b0a6123e0565b505050505050505050565b610b1d611547565b600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b855185518560ff16601f831115610bc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e657273000000000000000000000000000000006044820152606401610378565b60008111610c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610378565b818314610cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e000000000000000000000000000000000000000000000000000000006064820152608401610378565b610cc481600361240f565b8311610d2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610378565b610d34611547565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b60065415610f2757600654600090610d8c9060019061244c565b9050600060068281548110610da357610da3612281565b60009182526020822001546007805473ffffffffffffffffffffffffffffffffffffffff90921693509084908110610ddd57610ddd612281565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff85811684526005909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811690915592909116808452922080549091169055600680549192509080610e5d57610e5d612463565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190556007805480610ec657610ec6612463565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550610d72915050565b60005b81515181101561138e5760006005600084600001518481518110610f5057610f50612281565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115610f9a57610f9a61234d565b14611001576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610378565b6040805180820190915260ff8216815260016020820152825180516005916000918590811061103257611032612281565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016176101008360028111156110d3576110d361234d565b0217905550600091506110e39050565b60056000846020015184815181106110fd576110fd612281565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff1660028111156111475761114761234d565b146111ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610378565b6040805180820190915260ff8216815260208101600281525060056000846020015184815181106111e1576111e1612281565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016176101008360028111156112825761128261234d565b0217905550508251805160069250839081106112a0576112a0612281565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909316929092179091558201518051600791908390811061131c5761131c612281565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905580611386816123a8565b915050610f2a565b506040810151600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600480547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff438116820292831785559083048116936001939092600092611420928692908216911617612492565b92506101000a81548163ffffffff021916908363ffffffff16021790555061147f4630600460009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a001516117dd565b6002819055825180516003805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560045460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e059861151e988b98919763ffffffff9092169690959194919391926124ba565b60405180910390a15050505050505050505050565b61153b611547565b61154481611888565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610378565b565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261165790849061197d565b505050565b6000818060200190518101906116729190612667565b6008546040517f6642031d00000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691636642031d916116ee91859160ff1690600401612956565b600060405180830381600087803b15801561170857600080fd5b505af115801561171c573d6000803e3d6000fd5b5050505050505050565b600061173382602061240f565b61173e85602061240f565b61174a88610144612b66565b6117549190612b66565b61175e9190612b66565b611769906000612b66565b90503681146117d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d6174636800000000000000006044820152606401610378565b50505050505050565b6000808a8a8a8a8a8a8a8a8a60405160200161180199989796959493929190612b7e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff821603611907576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610378565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006119df826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a899092919063ffffffff16565b80519091501561165757808060200190518101906119fd9190612c13565b611657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610378565b6060611a988484600085611aa2565b90505b9392505050565b606082471015611b34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610378565b843b611b9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610378565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611bc59190612c30565b60006040518083038185875af1925050503d8060008114611c02576040519150601f19603f3d011682016040523d82523d6000602084013e611c07565b606091505b5091509150611c17828286611c22565b979650505050505050565b60608315611c31575081611a9b565b825115611c415782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103789190611d0e565b604051806103e00160405280601f906020820280368337509192915050565b60005b83811015611caf578181015183820152602001611c97565b83811115611cbe576000848401525b50505050565b60008151808452611cdc816020860160208601611c94565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611a9b6020830184611cc4565b73ffffffffffffffffffffffffffffffffffffffff8116811461154457600080fd5b600080600060608486031215611d5857600080fd5b8335611d6381611d21565b92506020840135611d7381611d21565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015611dca57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611d98565b509495945050505050565b602081526000611a9b6020830184611d84565b60008083601f840112611dfa57600080fd5b50813567ffffffffffffffff811115611e1257600080fd5b6020830191508360208260051b8501011115611e2d57600080fd5b9250929050565b60008060008060008060008060e0898b031215611e5057600080fd5b606089018a811115611e6157600080fd5b8998503567ffffffffffffffff80821115611e7b57600080fd5b818b0191508b601f830112611e8f57600080fd5b813581811115611e9e57600080fd5b8c6020828501011115611eb057600080fd5b6020830199508098505060808b0135915080821115611ece57600080fd5b611eda8c838d01611de8565b909750955060a08b0135915080821115611ef357600080fd5b50611f008b828c01611de8565b999c989b50969995989497949560c00135949350505050565b801515811461154457600080fd5b600060208284031215611f3957600080fd5b8135611a9b81611f19565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611f9657611f96611f44565b60405290565b6040516080810167ffffffffffffffff81118282101715611f9657611f96611f44565b60405160c0810167ffffffffffffffff81118282101715611f9657611f96611f44565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561202957612029611f44565b604052919050565b600067ffffffffffffffff82111561204b5761204b611f44565b5060051b60200190565b600082601f83011261206657600080fd5b8135602061207b61207683612031565b611fe2565b82815260059290921b8401810191818101908684111561209a57600080fd5b8286015b848110156120be5780356120b181611d21565b835291830191830161209e565b509695505050505050565b803560ff811681146120da57600080fd5b919050565b600067ffffffffffffffff8211156120f9576120f9611f44565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261213657600080fd5b8135612144612076826120df565b81815284602083860101111561215957600080fd5b816020850160208301376000918101602001919091529392505050565b67ffffffffffffffff8116811461154457600080fd5b80356120da81612176565b60008060008060008060c087890312156121b057600080fd5b863567ffffffffffffffff808211156121c857600080fd5b6121d48a838b01612055565b975060208901359150808211156121ea57600080fd5b6121f68a838b01612055565b965061220460408a016120c9565b9550606089013591508082111561221a57600080fd5b6122268a838b01612125565b945061223460808a0161218c565b935060a089013591508082111561224a57600080fd5b5061225789828a01612125565b9150509295509295509295565b60006020828403121561227657600080fd5b8135611a9b81611d21565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff84168060ff038211156122fc576122fc6122b0565b019392505050565b600060ff83168061233e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123d9576123d96122b0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612447576124476122b0565b500290565b60008282101561245e5761245e6122b0565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600063ffffffff8083168185168083038211156124b1576124b16122b0565b01949350505050565b600061012063ffffffff808d1684528b6020850152808b166040850152508060608401526124ea8184018a611d84565b905082810360808401526124fe8189611d84565b905060ff871660a084015282810360c084015261251b8187611cc4565b905067ffffffffffffffff851660e08401528281036101008401526125408185611cc4565b9c9b505050505050505050505050565b80516120da81611d21565b600082601f83011261256c57600080fd5b8151602061257c61207683612031565b82815260059290921b8401810191818101908684111561259b57600080fd5b8286015b848110156120be5780516125b281611d21565b835291830191830161259f565b600082601f8301126125d057600080fd5b815160206125e061207683612031565b82815260059290921b840181019181810190868411156125ff57600080fd5b8286015b848110156120be5780518352918301918301612603565b600082601f83011261262b57600080fd5b8151612639612076826120df565b81815284602083860101111561264e57600080fd5b61265f826020830160208701611c94565b949350505050565b60006020828403121561267957600080fd5b815167ffffffffffffffff81111561269057600080fd5b6060818401850312156126a257600080fd5b6126aa611f73565b8184015167ffffffffffffffff8111156126c357600080fd5b85601f828588010101126126d657600080fd5b8083860101516126e861207682612031565b808282526020820191508860208460051b86898c01010101111561270b57600080fd5b602084878a0101015b60208460051b86898c010101018110156128de57805167ffffffffffffffff81111561273f57600080fd5b8988018601016080818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001121561277757600080fd5b61277f611f9c565b60208201518152604082015161279481612176565b602082015260608201516127a781611d21565b6040820152608082015167ffffffffffffffff8111156127c657600080fd5b60c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08285018f030112156127fa57600080fd5b612802611fbf565b6020828501015167ffffffffffffffff81111561281e57600080fd5b61282f8f602083868901010161255b565b8252506040828501015167ffffffffffffffff81111561284e57600080fd5b61285f8f60208386890101016125bf565b6020830152508382016060810151604083015261287e90608001612550565b606082015261289160a083860101612550565b608082015260c0828501015167ffffffffffffffff8111156128b257600080fd5b6128c38f602083868901010161261a565b60a08301525060608301525084525060209283019201612714565b5084525050508382016020015167ffffffffffffffff81111561290057600080fd5b61290e8682858801016125bf565b60208301525092016040908101519083015250919050565b600081518084526020808501945080840160005b83811015611dca5781518752958201959082019060010161293a565b6000604080835260a080840186516060808588015282825180855260c094508489019150848160051b8a01016020808601955060005b83811015612b0b578b83037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff400185528651805184528281015167ffffffffffffffff16838501528a81015173ffffffffffffffffffffffffffffffffffffffff9081168c86015290870151608088860181905281518187018c9052805161014088018190529293919290860191906000906101608901905b80831015612a4657845184168252938801936001929092019190880190612a24565b508786015193507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80925082898203018f8a0152612a838185612926565b935050508d8401518c88015289840151612ab560e089018273ffffffffffffffffffffffffffffffffffffffff169052565b509183015173ffffffffffffffffffffffffffffffffffffffff811661010088015291928c0151868203909301610120870152612af28184611cc4565b998501999785019795505050600191909101905061298c565b50808d015197507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08b830301858c0152612b458289612926565b98909c015160808b0152505050509515159690940195909552949350505050565b60008219821115612b7957612b796122b0565b500190565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b166040850152816060850152612bc58285018b611d84565b91508382036080850152612bd9828a611d84565b915060ff881660a085015283820360c0850152612bf68288611cc4565b90861660e085015283810361010085015290506125408185611cc4565b600060208284031215612c2557600080fd5b8151611a9b81611f19565b60008251612c42818460208701611c94565b919091019291505056fea164736f6c634300080d000a",
}

var OffRampExecutorABI = OffRampExecutorMetaData.ABI

var OffRampExecutorBin = OffRampExecutorMetaData.Bin

func DeployOffRampExecutor(auth *bind.TransactOpts, backend bind.ContractBackend, offRamp common.Address, needFee bool) (common.Address, *types.Transaction, *OffRampExecutor, error) {
	parsed, err := OffRampExecutorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OffRampExecutorBin), backend, offRamp, needFee)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OffRampExecutor{OffRampExecutorCaller: OffRampExecutorCaller{contract: contract}, OffRampExecutorTransactor: OffRampExecutorTransactor{contract: contract}, OffRampExecutorFilterer: OffRampExecutorFilterer{contract: contract}}, nil
}

type OffRampExecutor struct {
	address common.Address
	abi     abi.ABI
	OffRampExecutorCaller
	OffRampExecutorTransactor
	OffRampExecutorFilterer
}

type OffRampExecutorCaller struct {
	contract *bind.BoundContract
}

type OffRampExecutorTransactor struct {
	contract *bind.BoundContract
}

type OffRampExecutorFilterer struct {
	contract *bind.BoundContract
}

type OffRampExecutorSession struct {
	Contract     *OffRampExecutor
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type OffRampExecutorCallerSession struct {
	Contract *OffRampExecutorCaller
	CallOpts bind.CallOpts
}

type OffRampExecutorTransactorSession struct {
	Contract     *OffRampExecutorTransactor
	TransactOpts bind.TransactOpts
}

type OffRampExecutorRaw struct {
	Contract *OffRampExecutor
}

type OffRampExecutorCallerRaw struct {
	Contract *OffRampExecutorCaller
}

type OffRampExecutorTransactorRaw struct {
	Contract *OffRampExecutorTransactor
}

func NewOffRampExecutor(address common.Address, backend bind.ContractBackend) (*OffRampExecutor, error) {
	abi, err := abi.JSON(strings.NewReader(OffRampExecutorABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindOffRampExecutor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutor{address: address, abi: abi, OffRampExecutorCaller: OffRampExecutorCaller{contract: contract}, OffRampExecutorTransactor: OffRampExecutorTransactor{contract: contract}, OffRampExecutorFilterer: OffRampExecutorFilterer{contract: contract}}, nil
}

func NewOffRampExecutorCaller(address common.Address, caller bind.ContractCaller) (*OffRampExecutorCaller, error) {
	contract, err := bindOffRampExecutor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorCaller{contract: contract}, nil
}

func NewOffRampExecutorTransactor(address common.Address, transactor bind.ContractTransactor) (*OffRampExecutorTransactor, error) {
	contract, err := bindOffRampExecutor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorTransactor{contract: contract}, nil
}

func NewOffRampExecutorFilterer(address common.Address, filterer bind.ContractFilterer) (*OffRampExecutorFilterer, error) {
	contract, err := bindOffRampExecutor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorFilterer{contract: contract}, nil
}

func bindOffRampExecutor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OffRampExecutorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_OffRampExecutor *OffRampExecutorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OffRampExecutor.Contract.OffRampExecutorCaller.contract.Call(opts, result, method, params...)
}

func (_OffRampExecutor *OffRampExecutorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.OffRampExecutorTransactor.contract.Transfer(opts)
}

func (_OffRampExecutor *OffRampExecutorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.OffRampExecutorTransactor.contract.Transact(opts, method, params...)
}

func (_OffRampExecutor *OffRampExecutorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OffRampExecutor.Contract.contract.Call(opts, result, method, params...)
}

func (_OffRampExecutor *OffRampExecutorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.contract.Transfer(opts)
}

func (_OffRampExecutor *OffRampExecutorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.contract.Transact(opts, method, params...)
}

func (_OffRampExecutor *OffRampExecutorCaller) GetNeedFee(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OffRampExecutor.contract.Call(opts, &out, "getNeedFee")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_OffRampExecutor *OffRampExecutorSession) GetNeedFee() (bool, error) {
	return _OffRampExecutor.Contract.GetNeedFee(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCallerSession) GetNeedFee() (bool, error) {
	return _OffRampExecutor.Contract.GetNeedFee(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCaller) GetOffRamp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OffRampExecutor.contract.Call(opts, &out, "getOffRamp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_OffRampExecutor *OffRampExecutorSession) GetOffRamp() (common.Address, error) {
	return _OffRampExecutor.Contract.GetOffRamp(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCallerSession) GetOffRamp() (common.Address, error) {
	return _OffRampExecutor.Contract.GetOffRamp(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _OffRampExecutor.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_OffRampExecutor *OffRampExecutorSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _OffRampExecutor.Contract.LatestConfigDetails(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _OffRampExecutor.Contract.LatestConfigDetails(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _OffRampExecutor.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_OffRampExecutor *OffRampExecutorSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _OffRampExecutor.Contract.LatestConfigDigestAndEpoch(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _OffRampExecutor.Contract.LatestConfigDigestAndEpoch(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OffRampExecutor.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_OffRampExecutor *OffRampExecutorSession) Owner() (common.Address, error) {
	return _OffRampExecutor.Contract.Owner(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCallerSession) Owner() (common.Address, error) {
	return _OffRampExecutor.Contract.Owner(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _OffRampExecutor.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_OffRampExecutor *OffRampExecutorSession) Transmitters() ([]common.Address, error) {
	return _OffRampExecutor.Contract.Transmitters(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCallerSession) Transmitters() ([]common.Address, error) {
	return _OffRampExecutor.Contract.Transmitters(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _OffRampExecutor.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_OffRampExecutor *OffRampExecutorSession) TypeAndVersion() (string, error) {
	return _OffRampExecutor.Contract.TypeAndVersion(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorCallerSession) TypeAndVersion() (string, error) {
	return _OffRampExecutor.Contract.TypeAndVersion(&_OffRampExecutor.CallOpts)
}

func (_OffRampExecutor *OffRampExecutorTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OffRampExecutor.contract.Transact(opts, "acceptOwnership")
}

func (_OffRampExecutor *OffRampExecutorSession) AcceptOwnership() (*types.Transaction, error) {
	return _OffRampExecutor.Contract.AcceptOwnership(&_OffRampExecutor.TransactOpts)
}

func (_OffRampExecutor *OffRampExecutorTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _OffRampExecutor.Contract.AcceptOwnership(&_OffRampExecutor.TransactOpts)
}

func (_OffRampExecutor *OffRampExecutorTransactor) SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _OffRampExecutor.contract.Transact(opts, "setConfig", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_OffRampExecutor *OffRampExecutorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.SetConfig(&_OffRampExecutor.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_OffRampExecutor *OffRampExecutorTransactorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.SetConfig(&_OffRampExecutor.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_OffRampExecutor *OffRampExecutorTransactor) SetNeedFee(opts *bind.TransactOpts, flag bool) (*types.Transaction, error) {
	return _OffRampExecutor.contract.Transact(opts, "setNeedFee", flag)
}

func (_OffRampExecutor *OffRampExecutorSession) SetNeedFee(flag bool) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.SetNeedFee(&_OffRampExecutor.TransactOpts, flag)
}

func (_OffRampExecutor *OffRampExecutorTransactorSession) SetNeedFee(flag bool) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.SetNeedFee(&_OffRampExecutor.TransactOpts, flag)
}

func (_OffRampExecutor *OffRampExecutorTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _OffRampExecutor.contract.Transact(opts, "transferOwnership", to)
}

func (_OffRampExecutor *OffRampExecutorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.TransferOwnership(&_OffRampExecutor.TransactOpts, to)
}

func (_OffRampExecutor *OffRampExecutorTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.TransferOwnership(&_OffRampExecutor.TransactOpts, to)
}

func (_OffRampExecutor *OffRampExecutorTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _OffRampExecutor.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_OffRampExecutor *OffRampExecutorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.Transmit(&_OffRampExecutor.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_OffRampExecutor *OffRampExecutorTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.Transmit(&_OffRampExecutor.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_OffRampExecutor *OffRampExecutorTransactor) WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _OffRampExecutor.contract.Transact(opts, "withdrawAccumulatedFees", feeToken, recipient, amount)
}

func (_OffRampExecutor *OffRampExecutorSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.WithdrawAccumulatedFees(&_OffRampExecutor.TransactOpts, feeToken, recipient, amount)
}

func (_OffRampExecutor *OffRampExecutorTransactorSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _OffRampExecutor.Contract.WithdrawAccumulatedFees(&_OffRampExecutor.TransactOpts, feeToken, recipient, amount)
}

type OffRampExecutorConfigSetIterator struct {
	Event *OffRampExecutorConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OffRampExecutorConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OffRampExecutorConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OffRampExecutorConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OffRampExecutorConfigSetIterator) Error() error {
	return it.fail
}

func (it *OffRampExecutorConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OffRampExecutorConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_OffRampExecutor *OffRampExecutorFilterer) FilterConfigSet(opts *bind.FilterOpts) (*OffRampExecutorConfigSetIterator, error) {

	logs, sub, err := _OffRampExecutor.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorConfigSetIterator{contract: _OffRampExecutor.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_OffRampExecutor *OffRampExecutorFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *OffRampExecutorConfigSet) (event.Subscription, error) {

	logs, sub, err := _OffRampExecutor.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OffRampExecutorConfigSet)
				if err := _OffRampExecutor.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OffRampExecutor *OffRampExecutorFilterer) ParseConfigSet(log types.Log) (*OffRampExecutorConfigSet, error) {
	event := new(OffRampExecutorConfigSet)
	if err := _OffRampExecutor.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OffRampExecutorFeesWithdrawnIterator struct {
	Event *OffRampExecutorFeesWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OffRampExecutorFeesWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OffRampExecutorFeesWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OffRampExecutorFeesWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OffRampExecutorFeesWithdrawnIterator) Error() error {
	return it.fail
}

func (it *OffRampExecutorFeesWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OffRampExecutorFeesWithdrawn struct {
	FeeToken  common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log
}

func (_OffRampExecutor *OffRampExecutorFilterer) FilterFeesWithdrawn(opts *bind.FilterOpts) (*OffRampExecutorFeesWithdrawnIterator, error) {

	logs, sub, err := _OffRampExecutor.contract.FilterLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorFeesWithdrawnIterator{contract: _OffRampExecutor.contract, event: "FeesWithdrawn", logs: logs, sub: sub}, nil
}

func (_OffRampExecutor *OffRampExecutorFilterer) WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *OffRampExecutorFeesWithdrawn) (event.Subscription, error) {

	logs, sub, err := _OffRampExecutor.contract.WatchLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OffRampExecutorFeesWithdrawn)
				if err := _OffRampExecutor.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OffRampExecutor *OffRampExecutorFilterer) ParseFeesWithdrawn(log types.Log) (*OffRampExecutorFeesWithdrawn, error) {
	event := new(OffRampExecutorFeesWithdrawn)
	if err := _OffRampExecutor.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OffRampExecutorOwnershipTransferRequestedIterator struct {
	Event *OffRampExecutorOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OffRampExecutorOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OffRampExecutorOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OffRampExecutorOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OffRampExecutorOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *OffRampExecutorOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OffRampExecutorOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_OffRampExecutor *OffRampExecutorFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OffRampExecutorOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OffRampExecutor.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorOwnershipTransferRequestedIterator{contract: _OffRampExecutor.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_OffRampExecutor *OffRampExecutorFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *OffRampExecutorOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OffRampExecutor.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OffRampExecutorOwnershipTransferRequested)
				if err := _OffRampExecutor.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OffRampExecutor *OffRampExecutorFilterer) ParseOwnershipTransferRequested(log types.Log) (*OffRampExecutorOwnershipTransferRequested, error) {
	event := new(OffRampExecutorOwnershipTransferRequested)
	if err := _OffRampExecutor.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OffRampExecutorOwnershipTransferredIterator struct {
	Event *OffRampExecutorOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OffRampExecutorOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OffRampExecutorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OffRampExecutorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OffRampExecutorOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *OffRampExecutorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OffRampExecutorOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_OffRampExecutor *OffRampExecutorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OffRampExecutorOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OffRampExecutor.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorOwnershipTransferredIterator{contract: _OffRampExecutor.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_OffRampExecutor *OffRampExecutorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OffRampExecutorOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OffRampExecutor.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OffRampExecutorOwnershipTransferred)
				if err := _OffRampExecutor.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OffRampExecutor *OffRampExecutorFilterer) ParseOwnershipTransferred(log types.Log) (*OffRampExecutorOwnershipTransferred, error) {
	event := new(OffRampExecutorOwnershipTransferred)
	if err := _OffRampExecutor.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OffRampExecutorTransmittedIterator struct {
	Event *OffRampExecutorTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OffRampExecutorTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OffRampExecutorTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OffRampExecutorTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OffRampExecutorTransmittedIterator) Error() error {
	return it.fail
}

func (it *OffRampExecutorTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OffRampExecutorTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_OffRampExecutor *OffRampExecutorFilterer) FilterTransmitted(opts *bind.FilterOpts) (*OffRampExecutorTransmittedIterator, error) {

	logs, sub, err := _OffRampExecutor.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorTransmittedIterator{contract: _OffRampExecutor.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_OffRampExecutor *OffRampExecutorFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *OffRampExecutorTransmitted) (event.Subscription, error) {

	logs, sub, err := _OffRampExecutor.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OffRampExecutorTransmitted)
				if err := _OffRampExecutor.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OffRampExecutor *OffRampExecutorFilterer) ParseTransmitted(log types.Log) (*OffRampExecutorTransmitted, error) {
	event := new(OffRampExecutorTransmitted)
	if err := _OffRampExecutor.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_OffRampExecutor *OffRampExecutor) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _OffRampExecutor.abi.Events["ConfigSet"].ID:
		return _OffRampExecutor.ParseConfigSet(log)
	case _OffRampExecutor.abi.Events["FeesWithdrawn"].ID:
		return _OffRampExecutor.ParseFeesWithdrawn(log)
	case _OffRampExecutor.abi.Events["OwnershipTransferRequested"].ID:
		return _OffRampExecutor.ParseOwnershipTransferRequested(log)
	case _OffRampExecutor.abi.Events["OwnershipTransferred"].ID:
		return _OffRampExecutor.ParseOwnershipTransferred(log)
	case _OffRampExecutor.abi.Events["Transmitted"].ID:
		return _OffRampExecutor.ParseTransmitted(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (OffRampExecutorConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (OffRampExecutorFeesWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa8")
}

func (OffRampExecutorOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (OffRampExecutorOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (OffRampExecutorTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (_OffRampExecutor *OffRampExecutor) Address() common.Address {
	return _OffRampExecutor.address
}

type OffRampExecutorInterface interface {
	GetNeedFee(opts *bind.CallOpts) (bool, error)

	GetOffRamp(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	SetNeedFee(opts *bind.TransactOpts, flag bool) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*OffRampExecutorConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *OffRampExecutorConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*OffRampExecutorConfigSet, error)

	FilterFeesWithdrawn(opts *bind.FilterOpts) (*OffRampExecutorFeesWithdrawnIterator, error)

	WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *OffRampExecutorFeesWithdrawn) (event.Subscription, error)

	ParseFeesWithdrawn(log types.Log) (*OffRampExecutorFeesWithdrawn, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OffRampExecutorOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *OffRampExecutorOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*OffRampExecutorOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OffRampExecutorOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OffRampExecutorOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*OffRampExecutorOwnershipTransferred, error)

	FilterTransmitted(opts *bind.FilterOpts) (*OffRampExecutorTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *OffRampExecutorTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*OffRampExecutorTransmitted, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package any_2_evm_subscription_offramp_router

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type CCIPAny2EVMMessageFromSender struct {
	SourceChainId *big.Int
	Sender        []byte
	Receiver      common.Address
	Data          []byte
	DestTokens    []common.Address
	DestPools     []common.Address
	Amounts       []*big.Int
	GasLimit      *big.Int
}

type SubscriptionInterfaceOffRampSubscription struct {
	Senders          []common.Address
	Receiver         common.Address
	StrictSequencing bool
	Balance          *big.Int
}

type SubscriptionInterfaceSubscriptionConfig struct {
	SetSubscriptionSenderDelay uint32
	WithdrawalDelay            uint32
	FeeToken                   common.Address
}

var Any2EVMSubscriptionOffRampRouterMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface[]\",\"name\":\"offRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"setSubscriptionSenderDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"withdrawalDelay\",\"type\":\"uint32\"},{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"}],\"internalType\":\"structSubscriptionInterface.SubscriptionConfig\",\"name\":\"subscriptionConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"got\",\"type\":\"address\"}],\"name\":\"AddressMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"AlreadyConfigured\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"}],\"name\":\"AmountMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedBy\",\"type\":\"uint256\"}],\"name\":\"DelayNotPassedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingAmountNotPositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MustCallFromOffRamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOffRampsConfigured\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"OffRampNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscriptionAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SubscriptionNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newSenders\",\"type\":\"address[]\"}],\"name\":\"NewSendersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"OffRampAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"OffRampRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newSenders\",\"type\":\"address[]\"}],\"name\":\"PreparedSetSenders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PreparedWithdrawalRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalProcessed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"addOffRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"chargeSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"contractSubscriptionManagerInterface\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"strictSequencing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"structSubscriptionInterface.OffRampSubscription\",\"name\":\"subscription\",\"type\":\"tuple\"}],\"name\":\"createSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOffRamps\",\"outputs\":[{\"internalType\":\"contractBaseOffRampInterface[]\",\"name\":\"offRamps\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getSubscription\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"contractSubscriptionManagerInterface\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"strictSequencing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"structSubscriptionInterface.OffRampSubscription\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"setSubscriptionSenderDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"withdrawalDelay\",\"type\":\"uint32\"},{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"}],\"internalType\":\"structSubscriptionInterface.SubscriptionConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokensForExecutionFee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"isOffRamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"newSenders\",\"type\":\"address[]\"}],\"name\":\"prepareSetSubscriptionSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"prepareWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"removeOffRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"destTokens\",\"type\":\"address[]\"},{\"internalType\":\"contractPoolInterface[]\",\"name\":\"destPools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"internalType\":\"structCCIP.Any2EVMMessageFromSender\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"routeMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"newSenders\",\"type\":\"address[]\"}],\"name\":\"setSubscriptionSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162002e9538038062002e9583398101604081905262000034916200041f565b808233806000816200008d5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c057620000c081620001fc565b50508151620000d891506003906020840190620002a7565b5060005b815181101562000192576040518060400160405280826001600160601b031681526020016001151581525060026000848481518110620001205762000120620004f2565b6020908102919091018101516001600160a01b031682528181019290925260400160002082518154939092015115156c01000000000000000000000000026001600160681b03199093166001600160601b03909216919091179190911790556200018a8162000508565b9050620000dc565b505080516004805460208401516040909401516001600160a01b03166801000000000000000002600160401b600160e01b031963ffffffff958616640100000000026001600160401b03199093169590941694909417179190911691909117905550620005309050565b336001600160a01b03821603620002565760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000084565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b828054828255906000526020600020908101928215620002ff579160200282015b82811115620002ff57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002c8565b506200030d92915062000311565b5090565b5b808211156200030d576000815560010162000312565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000369576200036962000328565b604052919050565b6001600160a01b03811681146200038757600080fd5b50565b805163ffffffff811681146200039f57600080fd5b919050565b600060608284031215620003b757600080fd5b604051606081016001600160401b0381118282101715620003dc57620003dc62000328565b604052905080620003ed836200038a565b8152620003fd602084016200038a565b60208201526040830151620004128162000371565b6040919091015292915050565b600080608083850312156200043357600080fd5b82516001600160401b03808211156200044b57600080fd5b818501915085601f8301126200046057600080fd5b815160208282111562000477576200047762000328565b8160051b92506200048a8184016200033e565b8281529284018101928181019089851115620004a557600080fd5b948201945b84861015620004d35785519350620004c28462000371565b8382529482019490820190620004aa565b9650620004e5905088888301620003a4565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200052957634e487b7160e01b600052601160045260246000fd5b5060010190565b61295580620005406000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806379ba5097116100cd578063adb9f71b11610081578063df4771a011610066578063df4771a0146103a2578063df6732e5146103b5578063f2fde38b146103ca57600080fd5b8063adb9f71b14610372578063ca709a251461038557600080fd5b8063991f6543116100b2578063991f654314610337578063a40e69c71461034a578063a42d64561461035f57600080fd5b806379ba50971461030a5780638da5cb5b1461031257600080fd5b80633c5457ce116101245780635c9fa11e116101095780635c9fa11e14610249578063600031401461025c5780637187582c146102f757600080fd5b80633c5457ce146102235780635a6b26ba1461023657600080fd5b8063181f5a7711610155578063181f5a77146101af5780631d7a74a0146101c4578063294d26611461021057600080fd5b8063063a42ca146101715780630cbebc2414610186575b600080fd5b61018461017f366004612122565b6103dd565b005b610199610194366004612172565b610533565b6040516101a6919061218f565b60405180910390f35b6101b7610616565b6040516101a69190612274565b6102006101d2366004612172565b6001600160a01b03166000908152600260205260409020546c01000000000000000000000000900460ff1690565b60405190151581526020016101a6565b61018461021e366004612287565b610632565b6101846102313660046122c8565b61080e565b6101846102443660046122c8565b6108e2565b6102006102573660046122f4565b610b59565b6102c16040805160608101825260008082526020820181905291810191909152506040805160608101825260045463ffffffff808216835264010000000082041660208301526801000000000000000090046001600160a01b03169181019190915290565b60408051825163ffffffff908116825260208085015190911690820152918101516001600160a01b0316908201526060016101a6565b6101846103053660046122c8565b610c73565b610184610e09565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101a6565b610184610345366004612172565b610ed2565b6103526111ed565b6040516101a69190612330565b61018461036d36600461238b565b61124f565b610184610380366004612172565b61146e565b6004546801000000000000000090046001600160a01b031661031f565b6101846103b0366004612122565b61164a565b6103bd61193a565b6040516101a6919061248b565b6101846103d8366004612172565b6119aa565b816000819050336001600160a01b0316816001600160a01b031663e2a92e286040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f919061249e565b6001600160a01b03161461048f576040517f34e70f7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820190915283815260045460208201906104b49063ffffffff16426124ea565b90526001600160a01b03851660009081526007602090815260409091208251805191926104e692849290910190611f2f565b50602082015181600101559050507f4f10955bde606944bdd0299e5dfc28b0f1924777b49efc5cba32e8f2090d15358484604051610525929190612502565b60405180910390a150505050565b60408051608080820183526060808352600060208085018290528486018290529184018190526001600160a01b03861681526005825284902084518154928302810160a0908101909652928301828152939492939092849284918401828280156105c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105a8575b505050918352505060018201546001600160a01b038116602083015274010000000000000000000000000000000000000000900460ff161515604082015260029091015460609091015292915050565b6040518060600160405280602681526020016129236026913981565b336000818152600260205260409020546c01000000000000000000000000900460ff16610692576040517fa2c8bfb60000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b6001600160a01b0384166000908152600560209081526040808320805482518185028101850190935280835291929091908301828280156106fc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106de575b5050505050905060005b81518110156107ca57846001600160a01b031682828151811061072b5761072b612524565b60200260200101516001600160a01b0316036107ba576001600160a01b0386166000908152600560205260408120600201805486929061076c908490612553565b9091555050604080516001600160a01b0388168152602081018690527f6de812ac52f2e762c18dd0b2737a440548066df1c7e99ac4de0242490dc65c1a910160405180910390a15050610808565b6107c38161256a565b9050610706565b506040517fd0d259760000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610689565b50505050565b60008111610848576040517f7271534300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216600090815260056020526040812060020180548392906108739084906124ea565b909155505060045461089c906801000000000000000090046001600160a01b03163330846119be565b604080516001600160a01b0384168152602081018390527fc89bca949929d103fee7b5eae37fdafa6f82a94463c8e9ea2ec5c6b488705680910160405180910390a15050565b816000819050336001600160a01b0316816001600160a01b031663e2a92e286040518163ffffffff1660e01b8152600401602060405180830381865afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610954919061249e565b6001600160a01b031614610994576040517f34e70f7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03841660009081526006602090815260409182902082518084019093528054835260010154908201819052421015610a075780602001516040517f3cb7cd2200000000000000000000000000000000000000000000000000000000815260040161068991815260200190565b80518414610a4e5780516040517fce6b173b000000000000000000000000000000000000000000000000000000008152600481019190915260248101859052604401610689565b6001600160a01b038516600090815260056020526040902060020154841115610aa3576040517fa328167200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03851660009081526005602052604081206002018054869290610ace908490612553565b90915550506001600160a01b03808616600090815260066020526040812081815560010155600454610b0f9168010000000000000000909104163386611a6f565b604080516001600160a01b0387168152602081018690527f5abb0fc89def2ee3226cc48f5621ee8e2b45f6dcc7898d2bdb5d480533c32bc091015b60405180910390a15050505050565b336000818152600260205260408120549091906c01000000000000000000000000900460ff16610bb7576040517fa2c8bfb6000000000000000000000000000000000000000000000000000000008152336004820152602401610689565b6000610bca610bc5856126d1565b611abd565b9050600063a0c6df1560e01b82604051602401610be79190612804565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529150610c6a9060e087013590610c629060608901908901612172565b600084611b50565b95945050505050565b816000819050336001600160a01b0316816001600160a01b031663e2a92e286040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce5919061249e565b6001600160a01b031614610d25576040517f34e70f7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416600090815260056020526040902060020154831115610d7a576040517fa328167200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080518082019091528381526004546020820190610da790640100000000900463ffffffff16426124ea565b90526001600160a01b038516600081815260066020908152604091829020845181559381015160019094019390935580519182529181018590527fb976e2b8f72c52b734124f2e5a8d614db599027ea97d5a815f9ec68273f7a8439101610525565b6001546001600160a01b03163314610e635760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610689565b60008054337fffffffffffffffffffffffff0000000000000000000000000000000000000000808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610eda611b9c565b6003546000819003610f18576040517f22babb3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166000908152600260209081526040918290208251808401909352546bffffffffffffffffffffffff811683526c01000000000000000000000000900460ff161515908201819052610faa576040517f8c97f1220000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610689565b60006003610fb9600185612553565b81548110610fc957610fc9612524565b6000918252602090912001548251600380546001600160a01b039093169350916bffffffffffffffffffffffff90911690811061100857611008612524565b6000918252602090912001546001600160a01b0316600361102a600186612553565b8154811061103a5761103a612524565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600383600001516bffffffffffffffffffffffff168154811061108e5761108e612524565b600091825260208083209190910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0394851617905584519284168252600290526040902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff9092169190911790556003805480611128576111286128ba565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559092019092556001600160a01b0386168083526002909152604080832080547fffffffffffffffffffffffffffffffffffffff000000000000000000000000001690555190917fcf91daec21e3510e2f2aea4b09d08c235d5c6844980be709f282ef591dbf420c91a250505050565b6060600380548060200260200160405190810160405280929190818152602001828054801561124557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611227575b5050505050905090565b80602001516000819050336001600160a01b0316816001600160a01b031663e2a92e286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c5919061249e565b6001600160a01b031614611305576040517f34e70f7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808401516001600160a01b038082166000908152600590935260409092206001015490911615611363576040517f772237bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166000908152600560209081526040909120855180518793611392928492910190611f2f565b5060208201516001820180546040850151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000009091166001600160a01b03909316929092179190911790556060918201516002909101558401511561143557606084015160045461143591680100000000000000009091046001600160a01b031690339030906119be565b6040516001600160a01b03821681527f4c3772ba36cf4592752f1ac765a5b6e391753813c11b97d12769fcbea359cc3590602001610525565b611476611b9c565b6001600160a01b0381166114b6576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166000908152600260209081526040918290208251808401909352546bffffffffffffffffffffffff811683526c01000000000000000000000000900460ff161580159183019190915261154a576040517f3a4406b50000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610689565b60016020808301828152600380546bffffffffffffffffffffffff90811686526001600160a01b03871660008181526002909552604080862088518154965115156c01000000000000000000000000027fffffffffffffffffffffffffffffffffffffff0000000000000000000000000090971694169390931794909417909155815494850182559083527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90930180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517f78f53b26906785548b265fa08f4197f9f3fff73fe0d504d30400aacb527f4ce09190a25050565b816000819050336001600160a01b0316816001600160a01b031663e2a92e286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bc919061249e565b6001600160a01b0316146116fc576040517f34e70f7a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416600090815260076020908152604080832081518154606094810282018501845292810183815290939192849284919084018282801561176e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611750575b50505050508152602001600182015481525050905042816020015111156117c95780602001516040517f3cb7cd2200000000000000000000000000000000000000000000000000000000815260040161068991815260200190565b60005b84518110156118b15781518051829081106117e9576117e9612524565b60200260200101516001600160a01b031685828151811061180c5761180c612524565b60200260200101516001600160a01b0316146118a157815180518290811061183657611836612524565b602002602001015185828151811061185057611850612524565b60200260200101516040517f1f73225f0000000000000000000000000000000000000000000000000000000081526004016106899291906001600160a01b0392831681529116602082015260400190565b6118aa8161256a565b90506117cc565b506001600160a01b038516600090815260056020908152604090912085516118db92870190611f2f565b506001600160a01b0385166000908152600760205260408120906118ff8282611fac565b600182016000905550507f790a6055b0430ecb86464910080949cd6cfead0d9ce2cc68a54f6ae1f144e02c8585604051610b4a929190612502565b60408051600180825281830190925260609160009190602080830190803683370190505060045481519192506801000000000000000090046001600160a01b031690829060009061198d5761198d612524565b6001600160a01b0390921660209283029190910190910152919050565b6119b2611b9c565b6119bb81611bf8565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526108089085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611cb9565b6040516001600160a01b038316602482015260448101829052611ab89084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611a0b565b505050565b611aef6040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b6040518060a00160405280836000015181526020018360200151604051602001611b199190612274565b604051602081830303815290604052815260200183606001518152602001836080015181526020018360c001518152509050919050565b60005a611388811015611b6257600080fd5b611388810390508560408204820311611b7a57600080fd5b50833b611b8657600080fd5b60008083516020850186888af195945050505050565b6000546001600160a01b03163314611bf65760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610689565b565b336001600160a01b03821603611c505760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610689565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000611d0e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d9e9092919063ffffffff16565b805190915015611ab85780806020019051810190611d2c91906128e9565b611ab85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610689565b6060611dad8484600085611db7565b90505b9392505050565b606082471015611e2f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610689565b843b611e7d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610689565b600080866001600160a01b03168587604051611e999190612906565b60006040518083038185875af1925050503d8060008114611ed6576040519150601f19603f3d011682016040523d82523d6000602084013e611edb565b606091505b5091509150611eeb828286611ef6565b979650505050505050565b60608315611f05575081611db0565b825115611f155782518084602001fd5b8160405162461bcd60e51b81526004016106899190612274565b828054828255906000526020600020908101928215611f9c579160200282015b82811115611f9c57825182547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178255602090920191600190910190611f4f565b50611fa8929150611fc6565b5090565b50805460008255906000526020600020908101906119bb91905b5b80821115611fa85760008155600101611fc7565b6001600160a01b03811681146119bb57600080fd5b8035611ffb81611fdb565b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561205357612053612000565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561208257612082612000565b604052919050565b600067ffffffffffffffff8211156120a4576120a4612000565b5060051b60200190565b600082601f8301126120bf57600080fd5b813560206120d46120cf8361208a565b612059565b82815260059290921b840181019181810190868411156120f357600080fd5b8286015b8481101561211757803561210a81611fdb565b83529183019183016120f7565b509695505050505050565b6000806040838503121561213557600080fd5b823561214081611fdb565b9150602083013567ffffffffffffffff81111561215c57600080fd5b612168858286016120ae565b9150509250929050565b60006020828403121561218457600080fd5b8135611db081611fdb565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b808310156121dd5783516001600160a01b031682529284019260019290920191908401906121b4565b506001600160a01b038488015116604087015260408701519350612205606087018515159052565b606087015160808701528094505050505092915050565b60005b8381101561223757818101518382015260200161221f565b838111156108085750506000910152565b6000815180845261226081602086016020860161221c565b601f01601f19169290920160200192915050565b602081526000611db06020830184612248565b60008060006060848603121561229c57600080fd5b83356122a781611fdb565b925060208401356122b781611fdb565b929592945050506040919091013590565b600080604083850312156122db57600080fd5b82356122e681611fdb565b946020939093013593505050565b60006020828403121561230657600080fd5b813567ffffffffffffffff81111561231d57600080fd5b82016101008185031215611db057600080fd5b6020808252825182820181905260009190848201906040850190845b818110156123715783516001600160a01b03168352928401929184019160010161234c565b50909695505050505050565b80151581146119bb57600080fd5b60006020828403121561239d57600080fd5b813567ffffffffffffffff808211156123b557600080fd5b90830190608082860312156123c957600080fd5b6040516080810181811083821117156123e4576123e4612000565b6040528235828111156123f657600080fd5b612402878286016120ae565b8252506020830135915061241582611fdb565b8160208201526040830135915061242b8261237d565b8160408201526060830135606082015280935050505092915050565b600081518084526020808501945080840160005b838110156124805781516001600160a01b03168752958201959082019060010161245b565b509495945050505050565b602081526000611db06020830184612447565b6000602082840312156124b057600080fd5b8151611db081611fdb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156124fd576124fd6124bb565b500190565b6001600160a01b0383168152604060208201526000611dad6040830184612447565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082821015612565576125656124bb565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361259b5761259b6124bb565b5060010190565b600082601f8301126125b357600080fd5b813567ffffffffffffffff8111156125cd576125cd612000565b6125e06020601f19601f84011601612059565b8181528460208386010111156125f557600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261262357600080fd5b813560206126336120cf8361208a565b82815260059290921b8401810191818101908684111561265257600080fd5b8286015b8481101561211757803561266981611fdb565b8352918301918301612656565b600082601f83011261268757600080fd5b813560206126976120cf8361208a565b82815260059290921b840181019181810190868411156126b657600080fd5b8286015b8481101561211757803583529183019183016126ba565b600061010082360312156126e457600080fd5b6126ec61202f565b82358152602083013567ffffffffffffffff8082111561270b57600080fd5b612717368387016125a2565b602084015261272860408601611ff0565b6040840152606085013591508082111561274157600080fd5b61274d368387016125a2565b6060840152608085013591508082111561276657600080fd5b61277236838701612612565b608084015260a085013591508082111561278b57600080fd5b61279736838701612612565b60a084015260c08501359150808211156127b057600080fd5b506127bd36828601612676565b60c08301525060e092830135928101929092525090565b600081518084526020808501945080840160005b83811015612480578151875295820195908201906001016127e8565b600060208083528351818401528084015160a0604085015261282960c0850182612248565b90506040850151601f19808684030160608701526128478383612248565b6060880151878203830160808901528051808352908601945060009350908501905b808410156128925784516001600160a01b03168252938501936001939093019290850190612869565b5060808801519450818782030160a08801526128ae81866127d4565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000602082840312156128fb57600080fd5b8151611db08161237d565b6000825161291881846020870161221c565b919091019291505056fe416e793245564d537562736372697074696f6e4f666652616d70526f7574657220312e302e30a164736f6c634300080f000a",
}

var Any2EVMSubscriptionOffRampRouterABI = Any2EVMSubscriptionOffRampRouterMetaData.ABI

var Any2EVMSubscriptionOffRampRouterBin = Any2EVMSubscriptionOffRampRouterMetaData.Bin

func DeployAny2EVMSubscriptionOffRampRouter(auth *bind.TransactOpts, backend bind.ContractBackend, offRamps []common.Address, subscriptionConfig SubscriptionInterfaceSubscriptionConfig) (common.Address, *types.Transaction, *Any2EVMSubscriptionOffRampRouter, error) {
	parsed, err := Any2EVMSubscriptionOffRampRouterMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Any2EVMSubscriptionOffRampRouterBin), backend, offRamps, subscriptionConfig)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Any2EVMSubscriptionOffRampRouter{Any2EVMSubscriptionOffRampRouterCaller: Any2EVMSubscriptionOffRampRouterCaller{contract: contract}, Any2EVMSubscriptionOffRampRouterTransactor: Any2EVMSubscriptionOffRampRouterTransactor{contract: contract}, Any2EVMSubscriptionOffRampRouterFilterer: Any2EVMSubscriptionOffRampRouterFilterer{contract: contract}}, nil
}

type Any2EVMSubscriptionOffRampRouter struct {
	address common.Address
	abi     abi.ABI
	Any2EVMSubscriptionOffRampRouterCaller
	Any2EVMSubscriptionOffRampRouterTransactor
	Any2EVMSubscriptionOffRampRouterFilterer
}

type Any2EVMSubscriptionOffRampRouterCaller struct {
	contract *bind.BoundContract
}

type Any2EVMSubscriptionOffRampRouterTransactor struct {
	contract *bind.BoundContract
}

type Any2EVMSubscriptionOffRampRouterFilterer struct {
	contract *bind.BoundContract
}

type Any2EVMSubscriptionOffRampRouterSession struct {
	Contract     *Any2EVMSubscriptionOffRampRouter
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type Any2EVMSubscriptionOffRampRouterCallerSession struct {
	Contract *Any2EVMSubscriptionOffRampRouterCaller
	CallOpts bind.CallOpts
}

type Any2EVMSubscriptionOffRampRouterTransactorSession struct {
	Contract     *Any2EVMSubscriptionOffRampRouterTransactor
	TransactOpts bind.TransactOpts
}

type Any2EVMSubscriptionOffRampRouterRaw struct {
	Contract *Any2EVMSubscriptionOffRampRouter
}

type Any2EVMSubscriptionOffRampRouterCallerRaw struct {
	Contract *Any2EVMSubscriptionOffRampRouterCaller
}

type Any2EVMSubscriptionOffRampRouterTransactorRaw struct {
	Contract *Any2EVMSubscriptionOffRampRouterTransactor
}

func NewAny2EVMSubscriptionOffRampRouter(address common.Address, backend bind.ContractBackend) (*Any2EVMSubscriptionOffRampRouter, error) {
	abi, err := abi.JSON(strings.NewReader(Any2EVMSubscriptionOffRampRouterABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindAny2EVMSubscriptionOffRampRouter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouter{address: address, abi: abi, Any2EVMSubscriptionOffRampRouterCaller: Any2EVMSubscriptionOffRampRouterCaller{contract: contract}, Any2EVMSubscriptionOffRampRouterTransactor: Any2EVMSubscriptionOffRampRouterTransactor{contract: contract}, Any2EVMSubscriptionOffRampRouterFilterer: Any2EVMSubscriptionOffRampRouterFilterer{contract: contract}}, nil
}

func NewAny2EVMSubscriptionOffRampRouterCaller(address common.Address, caller bind.ContractCaller) (*Any2EVMSubscriptionOffRampRouterCaller, error) {
	contract, err := bindAny2EVMSubscriptionOffRampRouter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterCaller{contract: contract}, nil
}

func NewAny2EVMSubscriptionOffRampRouterTransactor(address common.Address, transactor bind.ContractTransactor) (*Any2EVMSubscriptionOffRampRouterTransactor, error) {
	contract, err := bindAny2EVMSubscriptionOffRampRouter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterTransactor{contract: contract}, nil
}

func NewAny2EVMSubscriptionOffRampRouterFilterer(address common.Address, filterer bind.ContractFilterer) (*Any2EVMSubscriptionOffRampRouterFilterer, error) {
	contract, err := bindAny2EVMSubscriptionOffRampRouter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterFilterer{contract: contract}, nil
}

func bindAny2EVMSubscriptionOffRampRouter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Any2EVMSubscriptionOffRampRouterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Any2EVMSubscriptionOffRampRouterCaller.contract.Call(opts, result, method, params...)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Any2EVMSubscriptionOffRampRouterTransactor.contract.Transfer(opts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Any2EVMSubscriptionOffRampRouterTransactor.contract.Transact(opts, method, params...)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Any2EVMSubscriptionOffRampRouter.Contract.contract.Call(opts, result, method, params...)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.contract.Transfer(opts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.contract.Transact(opts, method, params...)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) GetFeeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "getFeeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) GetFeeToken() (common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetFeeToken(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) GetFeeToken() (common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetFeeToken(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) GetOffRamps(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "getOffRamps")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) GetOffRamps() ([]common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetOffRamps(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) GetOffRamps() ([]common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetOffRamps(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) GetSubscription(opts *bind.CallOpts, receiver common.Address) (SubscriptionInterfaceOffRampSubscription, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "getSubscription", receiver)

	if err != nil {
		return *new(SubscriptionInterfaceOffRampSubscription), err
	}

	out0 := *abi.ConvertType(out[0], new(SubscriptionInterfaceOffRampSubscription)).(*SubscriptionInterfaceOffRampSubscription)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) GetSubscription(receiver common.Address) (SubscriptionInterfaceOffRampSubscription, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSubscription(&_Any2EVMSubscriptionOffRampRouter.CallOpts, receiver)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) GetSubscription(receiver common.Address) (SubscriptionInterfaceOffRampSubscription, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSubscription(&_Any2EVMSubscriptionOffRampRouter.CallOpts, receiver)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) GetSubscriptionConfig(opts *bind.CallOpts) (SubscriptionInterfaceSubscriptionConfig, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "getSubscriptionConfig")

	if err != nil {
		return *new(SubscriptionInterfaceSubscriptionConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(SubscriptionInterfaceSubscriptionConfig)).(*SubscriptionInterfaceSubscriptionConfig)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) GetSubscriptionConfig() (SubscriptionInterfaceSubscriptionConfig, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSubscriptionConfig(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) GetSubscriptionConfig() (SubscriptionInterfaceSubscriptionConfig, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSubscriptionConfig(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) GetSupportedTokensForExecutionFee(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "getSupportedTokensForExecutionFee")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) GetSupportedTokensForExecutionFee() ([]common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSupportedTokensForExecutionFee(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) GetSupportedTokensForExecutionFee() ([]common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSupportedTokensForExecutionFee(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) IsOffRamp(opts *bind.CallOpts, offRamp common.Address) (bool, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "isOffRamp", offRamp)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) IsOffRamp(offRamp common.Address) (bool, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.IsOffRamp(&_Any2EVMSubscriptionOffRampRouter.CallOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) IsOffRamp(offRamp common.Address) (bool, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.IsOffRamp(&_Any2EVMSubscriptionOffRampRouter.CallOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) Owner() (common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Owner(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) Owner() (common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Owner(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) TypeAndVersion() (string, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.TypeAndVersion(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) TypeAndVersion() (string, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.TypeAndVersion(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "acceptOwnership")
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) AcceptOwnership() (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.AcceptOwnership(&_Any2EVMSubscriptionOffRampRouter.TransactOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.AcceptOwnership(&_Any2EVMSubscriptionOffRampRouter.TransactOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) AddOffRamp(opts *bind.TransactOpts, offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "addOffRamp", offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) AddOffRamp(offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.AddOffRamp(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) AddOffRamp(offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.AddOffRamp(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) ChargeSubscription(opts *bind.TransactOpts, receiver common.Address, sender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "chargeSubscription", receiver, sender, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) ChargeSubscription(receiver common.Address, sender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.ChargeSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, sender, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) ChargeSubscription(receiver common.Address, sender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.ChargeSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, sender, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) CreateSubscription(opts *bind.TransactOpts, subscription SubscriptionInterfaceOffRampSubscription) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "createSubscription", subscription)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) CreateSubscription(subscription SubscriptionInterfaceOffRampSubscription) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.CreateSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, subscription)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) CreateSubscription(subscription SubscriptionInterfaceOffRampSubscription) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.CreateSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, subscription)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) FundSubscription(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "fundSubscription", receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) FundSubscription(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.FundSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) FundSubscription(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.FundSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) PrepareSetSubscriptionSenders(opts *bind.TransactOpts, receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "prepareSetSubscriptionSenders", receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) PrepareSetSubscriptionSenders(receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.PrepareSetSubscriptionSenders(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) PrepareSetSubscriptionSenders(receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.PrepareSetSubscriptionSenders(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) PrepareWithdrawal(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "prepareWithdrawal", receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) PrepareWithdrawal(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.PrepareWithdrawal(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) PrepareWithdrawal(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.PrepareWithdrawal(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) RemoveOffRamp(opts *bind.TransactOpts, offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "removeOffRamp", offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) RemoveOffRamp(offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.RemoveOffRamp(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) RemoveOffRamp(offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.RemoveOffRamp(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) RouteMessage(opts *bind.TransactOpts, message CCIPAny2EVMMessageFromSender) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "routeMessage", message)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) RouteMessage(message CCIPAny2EVMMessageFromSender) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.RouteMessage(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, message)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) RouteMessage(message CCIPAny2EVMMessageFromSender) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.RouteMessage(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, message)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) SetSubscriptionSenders(opts *bind.TransactOpts, receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "setSubscriptionSenders", receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) SetSubscriptionSenders(receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.SetSubscriptionSenders(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) SetSubscriptionSenders(receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.SetSubscriptionSenders(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "transferOwnership", to)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.TransferOwnership(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, to)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.TransferOwnership(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, to)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) Withdrawal(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "withdrawal", receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) Withdrawal(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Withdrawal(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) Withdrawal(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Withdrawal(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

type Any2EVMSubscriptionOffRampRouterNewSendersSetIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterNewSendersSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterNewSendersSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterNewSendersSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterNewSendersSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterNewSendersSetIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterNewSendersSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterNewSendersSet struct {
	Receiver   common.Address
	NewSenders []common.Address
	Raw        types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterNewSendersSet(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterNewSendersSetIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "NewSendersSet")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterNewSendersSetIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "NewSendersSet", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchNewSendersSet(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterNewSendersSet) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "NewSendersSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterNewSendersSet)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "NewSendersSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseNewSendersSet(log types.Log) (*Any2EVMSubscriptionOffRampRouterNewSendersSet, error) {
	event := new(Any2EVMSubscriptionOffRampRouterNewSendersSet)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "NewSendersSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterOffRampAddedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterOffRampAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterOffRampAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterOffRampAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampAddedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterOffRampAdded struct {
	OffRamp common.Address
	Raw     types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterOffRampAdded(opts *bind.FilterOpts, offRamp []common.Address) (*Any2EVMSubscriptionOffRampRouterOffRampAddedIterator, error) {

	var offRampRule []interface{}
	for _, offRampItem := range offRamp {
		offRampRule = append(offRampRule, offRampItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "OffRampAdded", offRampRule)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterOffRampAddedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "OffRampAdded", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchOffRampAdded(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOffRampAdded, offRamp []common.Address) (event.Subscription, error) {

	var offRampRule []interface{}
	for _, offRampItem := range offRamp {
		offRampRule = append(offRampRule, offRampItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "OffRampAdded", offRampRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterOffRampAdded)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OffRampAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseOffRampAdded(log types.Log) (*Any2EVMSubscriptionOffRampRouterOffRampAdded, error) {
	event := new(Any2EVMSubscriptionOffRampRouterOffRampAdded)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OffRampAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterOffRampRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterOffRampRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterOffRampRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterOffRampRemoved struct {
	OffRamp common.Address
	Raw     types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterOffRampRemoved(opts *bind.FilterOpts, offRamp []common.Address) (*Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator, error) {

	var offRampRule []interface{}
	for _, offRampItem := range offRamp {
		offRampRule = append(offRampRule, offRampItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "OffRampRemoved", offRampRule)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "OffRampRemoved", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchOffRampRemoved(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOffRampRemoved, offRamp []common.Address) (event.Subscription, error) {

	var offRampRule []interface{}
	for _, offRampItem := range offRamp {
		offRampRule = append(offRampRule, offRampItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "OffRampRemoved", offRampRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterOffRampRemoved)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OffRampRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseOffRampRemoved(log types.Log) (*Any2EVMSubscriptionOffRampRouterOffRampRemoved, error) {
	event := new(Any2EVMSubscriptionOffRampRouterOffRampRemoved)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OffRampRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseOwnershipTransferRequested(log types.Log) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested, error) {
	event := new(Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterOwnershipTransferred)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseOwnershipTransferred(log types.Log) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferred, error) {
	event := new(Any2EVMSubscriptionOffRampRouterOwnershipTransferred)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterPreparedSetSenders

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterPreparedSetSenders)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterPreparedSetSenders)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterPreparedSetSenders struct {
	Receiver   common.Address
	NewSenders []common.Address
	Raw        types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterPreparedSetSenders(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "PreparedSetSenders")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "PreparedSetSenders", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchPreparedSetSenders(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterPreparedSetSenders) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "PreparedSetSenders")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterPreparedSetSenders)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "PreparedSetSenders", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParsePreparedSetSenders(log types.Log) (*Any2EVMSubscriptionOffRampRouterPreparedSetSenders, error) {
	event := new(Any2EVMSubscriptionOffRampRouterPreparedSetSenders)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "PreparedSetSenders", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterPreparedWithdrawalRequest(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "PreparedWithdrawalRequest")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "PreparedWithdrawalRequest", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchPreparedWithdrawalRequest(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "PreparedWithdrawalRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "PreparedWithdrawalRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParsePreparedWithdrawalRequest(log types.Log) (*Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest, error) {
	event := new(Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "PreparedWithdrawalRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterSubscriptionCharged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionCharged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionCharged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionCharged struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterSubscriptionCharged(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "SubscriptionCharged")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "SubscriptionCharged", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchSubscriptionCharged(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionCharged) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "SubscriptionCharged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterSubscriptionCharged)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionCharged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseSubscriptionCharged(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionCharged, error) {
	event := new(Any2EVMSubscriptionOffRampRouterSubscriptionCharged)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionCharged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterSubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionCreated struct {
	Receiver common.Address
	Raw      types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterSubscriptionCreated(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "SubscriptionCreated")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionCreated) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "SubscriptionCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterSubscriptionCreated)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseSubscriptionCreated(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionCreated, error) {
	event := new(Any2EVMSubscriptionOffRampRouterSubscriptionCreated)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterSubscriptionFunded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionFunded struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterSubscriptionFunded(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "SubscriptionFunded")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "SubscriptionFunded", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionFunded) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "SubscriptionFunded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterSubscriptionFunded)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseSubscriptionFunded(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionFunded, error) {
	event := new(Any2EVMSubscriptionOffRampRouterSubscriptionFunded)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterWithdrawalProcessed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterWithdrawalProcessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterWithdrawalProcessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterWithdrawalProcessed struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterWithdrawalProcessed(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "WithdrawalProcessed")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "WithdrawalProcessed", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchWithdrawalProcessed(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterWithdrawalProcessed) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "WithdrawalProcessed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterWithdrawalProcessed)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "WithdrawalProcessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseWithdrawalProcessed(log types.Log) (*Any2EVMSubscriptionOffRampRouterWithdrawalProcessed, error) {
	event := new(Any2EVMSubscriptionOffRampRouterWithdrawalProcessed)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "WithdrawalProcessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouter) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["NewSendersSet"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseNewSendersSet(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["OffRampAdded"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseOffRampAdded(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["OffRampRemoved"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseOffRampRemoved(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["OwnershipTransferRequested"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseOwnershipTransferRequested(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["OwnershipTransferred"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseOwnershipTransferred(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["PreparedSetSenders"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParsePreparedSetSenders(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["PreparedWithdrawalRequest"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParsePreparedWithdrawalRequest(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["SubscriptionCharged"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseSubscriptionCharged(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["SubscriptionCreated"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseSubscriptionCreated(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["SubscriptionFunded"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseSubscriptionFunded(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["WithdrawalProcessed"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseWithdrawalProcessed(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (Any2EVMSubscriptionOffRampRouterNewSendersSet) Topic() common.Hash {
	return common.HexToHash("0x790a6055b0430ecb86464910080949cd6cfead0d9ce2cc68a54f6ae1f144e02c")
}

func (Any2EVMSubscriptionOffRampRouterOffRampAdded) Topic() common.Hash {
	return common.HexToHash("0x78f53b26906785548b265fa08f4197f9f3fff73fe0d504d30400aacb527f4ce0")
}

func (Any2EVMSubscriptionOffRampRouterOffRampRemoved) Topic() common.Hash {
	return common.HexToHash("0xcf91daec21e3510e2f2aea4b09d08c235d5c6844980be709f282ef591dbf420c")
}

func (Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (Any2EVMSubscriptionOffRampRouterOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (Any2EVMSubscriptionOffRampRouterPreparedSetSenders) Topic() common.Hash {
	return common.HexToHash("0x4f10955bde606944bdd0299e5dfc28b0f1924777b49efc5cba32e8f2090d1535")
}

func (Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest) Topic() common.Hash {
	return common.HexToHash("0xb976e2b8f72c52b734124f2e5a8d614db599027ea97d5a815f9ec68273f7a843")
}

func (Any2EVMSubscriptionOffRampRouterSubscriptionCharged) Topic() common.Hash {
	return common.HexToHash("0x6de812ac52f2e762c18dd0b2737a440548066df1c7e99ac4de0242490dc65c1a")
}

func (Any2EVMSubscriptionOffRampRouterSubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0x4c3772ba36cf4592752f1ac765a5b6e391753813c11b97d12769fcbea359cc35")
}

func (Any2EVMSubscriptionOffRampRouterSubscriptionFunded) Topic() common.Hash {
	return common.HexToHash("0xc89bca949929d103fee7b5eae37fdafa6f82a94463c8e9ea2ec5c6b488705680")
}

func (Any2EVMSubscriptionOffRampRouterWithdrawalProcessed) Topic() common.Hash {
	return common.HexToHash("0x5abb0fc89def2ee3226cc48f5621ee8e2b45f6dcc7898d2bdb5d480533c32bc0")
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouter) Address() common.Address {
	return _Any2EVMSubscriptionOffRampRouter.address
}

type Any2EVMSubscriptionOffRampRouterInterface interface {
	GetFeeToken(opts *bind.CallOpts) (common.Address, error)

	GetOffRamps(opts *bind.CallOpts) ([]common.Address, error)

	GetSubscription(opts *bind.CallOpts, receiver common.Address) (SubscriptionInterfaceOffRampSubscription, error)

	GetSubscriptionConfig(opts *bind.CallOpts) (SubscriptionInterfaceSubscriptionConfig, error)

	GetSupportedTokensForExecutionFee(opts *bind.CallOpts) ([]common.Address, error)

	IsOffRamp(opts *bind.CallOpts, offRamp common.Address) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddOffRamp(opts *bind.TransactOpts, offRamp common.Address) (*types.Transaction, error)

	ChargeSubscription(opts *bind.TransactOpts, receiver common.Address, sender common.Address, amount *big.Int) (*types.Transaction, error)

	CreateSubscription(opts *bind.TransactOpts, subscription SubscriptionInterfaceOffRampSubscription) (*types.Transaction, error)

	FundSubscription(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error)

	PrepareSetSubscriptionSenders(opts *bind.TransactOpts, receiver common.Address, newSenders []common.Address) (*types.Transaction, error)

	PrepareWithdrawal(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error)

	RemoveOffRamp(opts *bind.TransactOpts, offRamp common.Address) (*types.Transaction, error)

	RouteMessage(opts *bind.TransactOpts, message CCIPAny2EVMMessageFromSender) (*types.Transaction, error)

	SetSubscriptionSenders(opts *bind.TransactOpts, receiver common.Address, newSenders []common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Withdrawal(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error)

	FilterNewSendersSet(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterNewSendersSetIterator, error)

	WatchNewSendersSet(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterNewSendersSet) (event.Subscription, error)

	ParseNewSendersSet(log types.Log) (*Any2EVMSubscriptionOffRampRouterNewSendersSet, error)

	FilterOffRampAdded(opts *bind.FilterOpts, offRamp []common.Address) (*Any2EVMSubscriptionOffRampRouterOffRampAddedIterator, error)

	WatchOffRampAdded(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOffRampAdded, offRamp []common.Address) (event.Subscription, error)

	ParseOffRampAdded(log types.Log) (*Any2EVMSubscriptionOffRampRouterOffRampAdded, error)

	FilterOffRampRemoved(opts *bind.FilterOpts, offRamp []common.Address) (*Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator, error)

	WatchOffRampRemoved(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOffRampRemoved, offRamp []common.Address) (event.Subscription, error)

	ParseOffRampRemoved(log types.Log) (*Any2EVMSubscriptionOffRampRouterOffRampRemoved, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferred, error)

	FilterPreparedSetSenders(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator, error)

	WatchPreparedSetSenders(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterPreparedSetSenders) (event.Subscription, error)

	ParsePreparedSetSenders(log types.Log) (*Any2EVMSubscriptionOffRampRouterPreparedSetSenders, error)

	FilterPreparedWithdrawalRequest(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator, error)

	WatchPreparedWithdrawalRequest(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest) (event.Subscription, error)

	ParsePreparedWithdrawalRequest(log types.Log) (*Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest, error)

	FilterSubscriptionCharged(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator, error)

	WatchSubscriptionCharged(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionCharged) (event.Subscription, error)

	ParseSubscriptionCharged(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionCharged, error)

	FilterSubscriptionCreated(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator, error)

	WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionCreated) (event.Subscription, error)

	ParseSubscriptionCreated(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionCreated, error)

	FilterSubscriptionFunded(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator, error)

	WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionFunded) (event.Subscription, error)

	ParseSubscriptionFunded(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionFunded, error)

	FilterWithdrawalProcessed(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator, error)

	WatchWithdrawalProcessed(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterWithdrawalProcessed) (event.Subscription, error)

	ParseWithdrawalProcessed(log types.Log) (*Any2EVMSubscriptionOffRampRouterWithdrawalProcessed, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package commit_store_helper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type ICommitStoreCommitStoreConfig struct {
	OnRamps          []common.Address
	MinSeqNrByOnRamp []uint64
}

type InternalCommitReport struct {
	OnRamps     []common.Address
	Intervals   []InternalInterval
	MerkleRoots [][32]byte
	RootOfRoots [32]byte
}

type InternalInterval struct {
	Min uint64
	Max uint64
}

var CommitStoreHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainId\",\"type\":\"uint64\"},{\"internalType\":\"contractIAFN\",\"name\":\"afn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structICommitStore.CommitStoreConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAFNSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadHealthConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ConfigDigestMismatch\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structInternal.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"internalType\":\"structInternal.CommitReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"InvalidCommitReport\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfiguration\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structInternal.Interval\",\"name\":\"interval\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedTransmitter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"UnsupportedOnRamp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNumberOfSignatures\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIAFN\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractIAFN\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"indexed\":false,\"internalType\":\"structICommitStore.CommitStoreConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"CommitStoreConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structInternal.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structInternal.CommitReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractIAFN\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommitStoreConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structICommitStore.CommitStoreConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSourceChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAFNHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"isBlessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"commitReport\",\"type\":\"bytes\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootToReset\",\"type\":\"bytes32[]\"}],\"name\":\"resetUnblessedRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAFN\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structICommitStore.CommitStoreConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setCommitStoreConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setOCR2Config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"innerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"innerProofFlagBits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"outerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"outerProofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162003a3c38038062003a3c83398101604081905262000034916200059a565b6000805460ff191681558490849084908490829033908190816200009f5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0380851661010002610100600160a81b031990921691909117909155811615620000d957620000d98162000267565b5050506001600160a01b0381166200010457604051630958ef9b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b03929092169190911790556001600160401b03848116608052831660a052805180518291600a916200015391839160209091019062000318565b5060208281015180516200016e926001850192019062000382565b5050600b54600a54149050620001975760405163c52a9bd360e01b815260040160405180910390fd5b60005b600a548110156200025857600b805482908110620001bc57620001bc620006d4565b90600052602060002090600491828204019190066008029054906101000a90046001600160401b0316600c6000600a6000018481548110620002025762000202620006d4565b6000918252602080832091909101546001600160a01b03168352820192909252604001902080546001600160401b0319166001600160401b03929092169190911790556200025081620006ea565b90506200019a565b50505050505050505062000712565b336001600160a01b03821603620002c15760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000096565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b82805482825590600052602060002090810192821562000370579160200282015b828111156200037057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000339565b506200037e92915062000437565b5090565b82805482825590600052602060002090600301600490048101928215620003705791602002820160005b83821115620003f857835183826101000a8154816001600160401b0302191690836001600160401b031602179055509260200192600801602081600701049283019260010302620003ac565b80156200042d5782816101000a8154906001600160401b030219169055600801602081600701049283019260010302620003f8565b50506200037e9291505b5b808211156200037e576000815560010162000438565b80516001600160401b03811681146200046657600080fd5b919050565b6001600160a01b03811681146200048157600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715620004bf57620004bf62000484565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004f057620004f062000484565b604052919050565b60006001600160401b0382111562000514576200051462000484565b5060051b60200190565b600082601f8301126200053057600080fd5b81516020620005496200054383620004f8565b620004c5565b82815260059290921b840181019181810190868411156200056957600080fd5b8286015b848110156200058f5762000581816200044e565b83529183019183016200056d565b509695505050505050565b60008060008060808587031215620005b157600080fd5b620005bc856200044e565b93506020620005cd8187016200044e565b93506040860151620005df816200046b565b60608701519093506001600160401b0380821115620005fd57600080fd5b908701906040828a0312156200061257600080fd5b6200061c6200049a565b8251828111156200062c57600080fd5b8301601f81018b136200063e57600080fd5b80516200064f6200054382620004f8565b81815260059190911b8201860190868101908d8311156200066f57600080fd5b928701925b828410156200069a5783516200068a816200046b565b8252928701929087019062000674565b84525050508284015182811115620006b157600080fd5b620006bf8b8286016200051e565b85830152508094505050505092959194509250565b634e487b7160e01b600052603260045260246000fd5b6000600182016200070b57634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a0516133046200073860003960006104400152600061028901526133046000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80638da5cb5b116100ee578063b6a1921111610097578063f2fde38b11610071578063f2fde38b14610418578063f47a86901461042b578063fe428ed31461043e578063ff888fb11461046457600080fd5b8063b6a19211146103a6578063c1131d8e146103b9578063e71e65ce1461040557600080fd5b8063afcb95d7116100c8578063afcb95d714610360578063b1dc65a414610380578063b57671661461039357600080fd5b80638da5cb5b14610315578063a7206cd61461032b578063ad4464dd1461034b57600080fd5b80633408e4701161015b578063666cab8d11610135578063666cab8d146102c057806379ba5097146102d557806381ff7048146102dd5780638456cb591461030d57600080fd5b80633408e470146102875780633f4ba83a146102ad5780635c975abb146102b557600080fd5b8063181f5a771161018c578063181f5a77146102065780631ef381741461024f5780632222dd421461026257600080fd5b806307761f3d146101b3578063108ee5fc146101d9578063147809b3146101ee575b600080fd5b6101c66101c1366004612302565b610477565b6040519081526020015b60405180910390f35b6101ec6101e7366004612384565b61064e565b005b6101f661070f565b60405190151581526020016101d0565b6102426040518060400160405280601181526020017f436f6d6d697453746f726520312e302e3000000000000000000000000000000081525081565b6040516101d091906123ee565b6101ec61025d36600461250c565b61079c565b6002546001600160a01b03165b6040516001600160a01b0390911681526020016101d0565b7f00000000000000000000000000000000000000000000000000000000000000006101c6565b6101ec610e02565b60005460ff166101f6565b6102c8610e14565b6040516101d0919061261d565b6101ec610e76565b6005546003546040805163ffffffff808516825264010000000090940490931660208401528201526060016101d0565b6101ec610f64565b60005461010090046001600160a01b031661026f565b6101c6610339366004612630565b60009081526009602052604090205490565b610353610f74565b6040516101d09190612649565b6040805160018152600060208201819052918101919091526060016101d0565b6101ec61038e3660046126fc565b61107f565b6101ec6103a13660046127e1565b6115cf565b6101ec6103b436600461281e565b6115db565b6103ec6103c7366004612384565b6001600160a01b03166000908152600c602052604090205467ffffffffffffffff1690565b60405167ffffffffffffffff90911681526020016101d0565b6101c6610413366004612859565b6117e5565b6101ec610426366004612384565b61192c565b6101ec610439366004612904565b61193d565b7f00000000000000000000000000000000000000000000000000000000000000006101c6565b6101f6610472366004612630565b611995565b600080845190506000600185518301039050806000036104b557856000815181106104a4576104a4612946565b602002602001015192505050610647565b6101008111156104f1576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008167ffffffffffffffff81111561050c5761050c6121c7565b604051908082528060200260200182016040528015610535578160200160208202803683370190505b50905060008080805b85811015610620576105fb6001828b901c1660011461057b578a5160018401938c91811061056e5761056e612946565b60200260200101516105b9565b87851061059957855160018501948791811061056e5761056e612946565b8b5160018601958d9181106105b0576105b0612946565b60200260200101515b8886106105e45786516001860195889181106105d7576105d7612946565b6020026020010151611a4b565b8c5160018701968e9181106105d7576105d7612946565b85828151811061060d5761060d612946565b602090810291909101015260010161053e565b5083600186038151811061063657610636612946565b602002602001015196505050505050505b9392505050565b610656611ac6565b6001600160a01b038116610696576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280546001600160a01b038381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28910160405180910390a15050565b600254604080517f46f8e6d700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916346f8e6d79160048083019260209291908290030181865afa158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190612975565b15905090565b855185518560ff16601f831115610814576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e6572730000000000000000000000000000000060448201526064015b60405180910390fd5b8060000361087e576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f7369746976650000000000000000000000000000604482015260640161080b565b81831461090c576040517f89a61989000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e00000000000000000000000000000000000000000000000000000000606482015260840161080b565b6109178160036129c6565b831161097f576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f20686967680000000000000000604482015260640161080b565b610987611ac6565b60075460005b81811015610a2f5760066000600783815481106109ac576109ac612946565b60009182526020808320909101546001600160a01b031683528201929092526040018120805461ffff19169055600880546006929190849081106109f2576109f2612946565b60009182526020808320909101546001600160a01b031683528201929092526040019020805461ffff19169055610a28816129e5565b905061098d565b50895160005b81811015610cc45760008c8281518110610a5157610a51612946565b6020026020010151905060006002811115610a6e57610a6e6129ff565b6001600160a01b038216600090815260066020526040902054610100900460ff166002811115610aa057610aa06129ff565b14610b07576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e65722061646472657373000000000000000000604482015260640161080b565b6040805180820190915260ff8316815260208101600190526001600160a01b03821660009081526006602090815260409091208251815460ff90911660ff19821681178355928401519192839161ffff191617610100836002811115610b6f57610b6f6129ff565b021790555090505060008c8381518110610b8b57610b8b612946565b6020026020010151905060006002811115610ba857610ba86129ff565b6001600160a01b038216600090815260066020526040902054610100900460ff166002811115610bda57610bda6129ff565b14610c41576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d6974746572206164647265737300000000604482015260640161080b565b6040805180820190915260ff8416815260208101600290526001600160a01b03821660009081526006602090815260409091208251815460ff90911660ff19821681178355928401519192839161ffff191617610100836002811115610ca957610ca96129ff565b0217905550905050505080610cbd906129e5565b9050610a35565b508a51610cd89060079060208e0190612116565b508951610cec9060089060208d0190612116565b506004805460ff8381166101000261ffff19909216908c161717905560058054610d55914691309190600090610d279063ffffffff16612a2e565b91906101000a81548163ffffffff021916908363ffffffff160217905563ffffffff168e8e8e8e8e8e611b25565b6003600001819055506000600560049054906101000a900463ffffffff16905043600560046101000a81548163ffffffff021916908363ffffffff1602179055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0581600360000154600560009054906101000a900463ffffffff168f8f8f8f8f8f604051610dec99989796959493929190612a51565b60405180910390a1505050505050505050505050565b610e0a611ac6565b610e12611bb2565b565b60606008805480602002602001604051908101604052809291908181526020018280548015610e6c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e4e575b5050505050905090565b6001546001600160a01b03163314610ed05760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015260640161080b565b60008054336101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8416178455600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556040516001600160a01b03919093041692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610f6c611ac6565b610e12611c4e565b604080518082019091526060808252602082015260408051600a805460606020820284018101855293830181815292939192849290918491840182828015610fe557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fc7575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561107157602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161102c5790505b505050505081525050905090565b6110be87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611cd692505050565b6040805160608101825260035480825260045460ff8082166020850152610100909104169282019290925289359182146111315780516040517f93df584c00000000000000000000000000000000000000000000000000000000815260048101919091526024810183905260440161080b565b6040805183815260208c81013560081c63ffffffff16908201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a160028160200151826040015161118c9190612ae7565b6111969190612b0c565b6111a1906001612ae7565b60ff1686146111dc576040517f71253a2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858414611215576040517fa75d88af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526006602090815260408083208151808301909252805460ff80821684529293919291840191610100909104166002811115611258576112586129ff565b6002811115611269576112696129ff565b9052509050600281602001516002811115611286576112866129ff565b1480156112c057506008816000015160ff16815481106112a8576112a8612946565b6000918252602090912001546001600160a01b031633145b6112f6576040517fda0f08e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060006113048560206129c6565b61130f8860206129c6565b61131b8b610144612b55565b6113259190612b55565b61132f9190612b55565b9050368114611373576040517f8e1192e10000000000000000000000000000000000000000000000000000000081526004810182905236602482015260440161080b565b5060008989604051611386929190612b6d565b60405190819003812061139d918d90602001612b7d565b6040516020818303038152906040528051906020012090506113bd612193565b8760005b818110156115bf5760006001858984602081106113e0576113e0612946565b6113ed91901a601b612ae7565b8e8e868181106113ff576113ff612946565b905060200201358d8d8781811061141857611418612946565b9050602002013560405160008152602001604052604051611455949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611477573d6000803e3d6000fd5b505060408051601f198101516001600160a01b038116600090815260066020908152848220848601909552845460ff80821686529397509195509293928401916101009091041660028111156114cf576114cf6129ff565b60028111156114e0576114e06129ff565b90525090506001816020015160028111156114fd576114fd6129ff565b14611534576040517fca31867a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051859060ff16601f811061154b5761154b612946565b602002015115611587576040517ff67bc7c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600185826000015160ff16601f81106115a2576115a2612946565b91151560209092020152506115b89050816129e5565b90506113c1565b5050505050505050505050505050565b6115d881611cd6565b50565b6115e3611ac6565b60006115ef8280612b99565b915061160090506020830183612b99565b90508114158061160e575080155b15611645576040517fc52a9bd300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a5460005b818110156116c757600c6000600a600001838154811061166d5761166d612946565b60009182526020808320909101546001600160a01b03168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001690556116c0816129e5565b905061164b565b5082600a6116d58282612d10565b90505060005b828110156117a8576116f06020850185612b99565b8281811061170057611700612946565b90506020020160208101906117159190612de4565b600c60006117238780612b99565b8581811061173357611733612946565b90506020020160208101906117489190612384565b6001600160a01b03168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff929092169190911790556117a1816129e5565b90506116db565b507fd877a6c59b30961c28d263c0104d975d2ddf1f185e20d5a6adb144d7bc9f16e2836040516117d89190612e68565b60405180910390a1505050565b604080516001808252818301909252600091829190602080830190803683370190505090506118798a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508b9250610477915050565b8160008151811061188c5761188c612946565b60200260200101818152505060006118d982878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250610477915050565b60008181526009602052604090205490915015806118fd57506118fb81611995565b155b1561190d57600092505050611920565b6000908152600960205260409020549150505b98975050505050505050565b611934611ac6565b6115d88161204f565b611945611ac6565b60005b81811015611990576009600084848481811061196657611966612946565b9050602002013581526020019081526020016000206000905580611989906129e5565b9050611948565b505050565b6002546040805130602080830191909152818301859052825180830384018152606083019384905280519101207fff888fb10000000000000000000000000000000000000000000000000000000090925260648101919091526000916001600160a01b03169063ff888fb190608401602060405180830381865afa158015611a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a459190612975565b92915050565b6000818310611a8d5760408051600160208083019190915281830185905260608083018790528351808403909101815260809092019092528051910120610647565b60408051600160208083019190915281830186905260608083018690528351808403909101815260809092019092528051910120610647565b60005461010090046001600160a01b03163314610e125760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161080b565b6000808a8a8a8a8a8a8a8a8a604051602001611b4999989796959493929190612f15565b60408051601f1981840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b60005460ff16611c045760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161080b565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff1615611ca15760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161080b565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c313390565b60005460ff1615611d295760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161080b565b600260009054906101000a90046001600160a01b03166001600160a01b03166346f8e6d76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da09190612975565b15611dd6576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081806020019051810190611dec9190613089565b8051516060820151919250901580611e02575080155b80611e1257508160200151518114155b80611e2257508160400151518114155b15611e5b57816040517fb996e0fd00000000000000000000000000000000000000000000000000000000815260040161080b91906131d7565b60005b8181101561200857600083600001518281518110611e7e57611e7e612946565b6020908102919091018101516001600160a01b0381166000908152600c909252604082205490925067ffffffffffffffff1690819003611ef5576040517fb4fbc1e60000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240161080b565b600085602001518481518110611f0d57611f0d612946565b60200260200101519050806000015167ffffffffffffffff168267ffffffffffffffff16141580611f595750806020015167ffffffffffffffff16816000015167ffffffffffffffff16115b15611f945780836040517f3389cbd500000000000000000000000000000000000000000000000000000000815260040161080b929190613290565b6020810151611fa49060016132cb565b6001600160a01b03939093166000908152600c6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff90941693909317909255506120019050816129e5565b9050611e5e565b50606082015160009081526009602052604090819020429055517f0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef906117d89084906131d7565b336001600160a01b038216036120a75760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161080b565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b828054828255906000526020600020908101928215612183579160200282015b8281111561218357825182547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178255602090920191600190910190612136565b5061218f9291506121b2565b5090565b604051806103e00160405280601f906020820280368337509192915050565b5b8082111561218f57600081556001016121b3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612219576122196121c7565b60405290565b6040516080810167ffffffffffffffff81118282101715612219576122196121c7565b604051601f8201601f1916810167ffffffffffffffff8111828210171561226b5761226b6121c7565b604052919050565b600067ffffffffffffffff82111561228d5761228d6121c7565b5060051b60200190565b600082601f8301126122a857600080fd5b813560206122bd6122b883612273565b612242565b82815260059290921b840181019181810190868411156122dc57600080fd5b8286015b848110156122f757803583529183019183016122e0565b509695505050505050565b60008060006060848603121561231757600080fd5b833567ffffffffffffffff8082111561232f57600080fd5b61233b87838801612297565b9450602086013591508082111561235157600080fd5b5061235e86828701612297565b925050604084013590509250925092565b6001600160a01b03811681146115d857600080fd5b60006020828403121561239657600080fd5b81356106478161236f565b6000815180845260005b818110156123c7576020818501810151868301820152016123ab565b818111156123d9576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061064760208301846123a1565b600082601f83011261241257600080fd5b813560206124226122b883612273565b82815260059290921b8401810191818101908684111561244157600080fd5b8286015b848110156122f75780356124588161236f565b8352918301918301612445565b803560ff8116811461247657600080fd5b919050565b600082601f83011261248c57600080fd5b813567ffffffffffffffff8111156124a6576124a66121c7565b6124b96020601f19601f84011601612242565b8181528460208386010111156124ce57600080fd5b816020850160208301376000918101602001919091529392505050565b67ffffffffffffffff811681146115d857600080fd5b8035612476816124eb565b60008060008060008060c0878903121561252557600080fd5b863567ffffffffffffffff8082111561253d57600080fd5b6125498a838b01612401565b9750602089013591508082111561255f57600080fd5b61256b8a838b01612401565b965061257960408a01612465565b9550606089013591508082111561258f57600080fd5b61259b8a838b0161247b565b94506125a960808a01612501565b935060a08901359150808211156125bf57600080fd5b506125cc89828a0161247b565b9150509295509295509295565b600081518084526020808501945080840160005b838110156126125781516001600160a01b0316875295820195908201906001016125ed565b509495945050505050565b60208152600061064760208301846125d9565b60006020828403121561264257600080fd5b5035919050565b60006020808352835160408285015261266560608501826125d9565b85830151858203601f19016040870152805180835290840192506000918401905b808310156122f757835167ffffffffffffffff168252928401926001929092019190840190612686565b60008083601f8401126126c257600080fd5b50813567ffffffffffffffff8111156126da57600080fd5b6020830191508360208260051b85010111156126f557600080fd5b9250929050565b60008060008060008060008060e0898b03121561271857600080fd5b606089018a81111561272957600080fd5b8998503567ffffffffffffffff8082111561274357600080fd5b818b0191508b601f83011261275757600080fd5b81358181111561276657600080fd5b8c602082850101111561277857600080fd5b6020830199508098505060808b013591508082111561279657600080fd5b6127a28c838d016126b0565b909750955060a08b01359150808211156127bb57600080fd5b506127c88b828c016126b0565b999c989b50969995989497949560c00135949350505050565b6000602082840312156127f357600080fd5b813567ffffffffffffffff81111561280a57600080fd5b6128168482850161247b565b949350505050565b60006020828403121561283057600080fd5b813567ffffffffffffffff81111561284757600080fd5b82016040818503121561064757600080fd5b60008060008060008060008060a0898b03121561287557600080fd5b883567ffffffffffffffff8082111561288d57600080fd5b6128998c838d016126b0565b909a50985060208b01359150808211156128b257600080fd5b6128be8c838d016126b0565b909850965060408b0135955060608b01359150808211156128de57600080fd5b506128eb8b828c016126b0565b999c989b50969995989497949560800135949350505050565b6000806020838503121561291757600080fd5b823567ffffffffffffffff81111561292e57600080fd5b61293a858286016126b0565b90969095509350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561298757600080fd5b8151801515811461064757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160001904831182151516156129e0576129e0612997565b500290565b600060001982036129f8576129f8612997565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600063ffffffff808316818103612a4757612a47612997565b6001019392505050565b600061012063ffffffff808d1684528b6020850152808b16604085015250806060840152612a818184018a6125d9565b90508281036080840152612a9581896125d9565b905060ff871660a084015282810360c0840152612ab281876123a1565b905067ffffffffffffffff851660e0840152828103610100840152612ad781856123a1565b9c9b505050505050505050505050565b600060ff821660ff84168060ff03821115612b0457612b04612997565b019392505050565b600060ff831680612b46577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b60008219821115612b6857612b68612997565b500190565b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612bce57600080fd5b83018035915067ffffffffffffffff821115612be957600080fd5b6020019150600581901b36038213156126f557600080fd5b5b81811015612c165760008155600101612c02565b5050565b60008135611a45816124eb565b68010000000000000000831115612c4057612c406121c7565b805483825580841015612c99578160005260206000206003850160021c810160188660031b168015612c83576000198083018054828460200360031b1c16815550505b50612c966003840160021c830182612c01565b50505b506000818152602081208391805b86811015612d0757612cdf612cbb85612c1a565b845467ffffffffffffffff600386901b81811b801990931693909116901b16178455565b6020840193506008820191506018821115612cff57600091506001830192505b600101612ca7565b50505050505050565b612d1a8283612b99565b68010000000000000000811115612d3357612d336121c7565b825481845580821015612d5957836000526020600020612d57828201848301612c01565b505b508260005260208060002060005b83811015612dbd578435612d7a8161236f565b82547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03919091161782559382019360019182019101612d67565b5050612dcb81860186612b99565b9350915050612dde828260018601612c27565b50505050565b600060208284031215612df657600080fd5b8135610647816124eb565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612e3657600080fd5b830160208101925035905067ffffffffffffffff811115612e5657600080fd5b8060051b36038213156126f557600080fd5b6000602080835260608301612e7d8586612e01565b6040868501529182905290600090608086015b81831015612ec0578335612ea38161236f565b6001600160a01b0316815292840192600192909201918401612e90565b612ecc85890189612e01565b888303601f190160408a0152808352945092508401905060005b838110156122f7578235612ef9816124eb565b67ffffffffffffffff1682529184019190840190600101612ee6565b60006101208b83526001600160a01b038b16602084015267ffffffffffffffff808b166040850152816060850152612f4f8285018b6125d9565b91508382036080850152612f63828a6125d9565b915060ff881660a085015283820360c0850152612f8082886123a1565b90861660e08501528381036101008501529050612ad781856123a1565b600082601f830112612fae57600080fd5b81516020612fbe6122b883612273565b82815260069290921b84018101918181019086841115612fdd57600080fd5b8286015b848110156122f75760408189031215612ffa5760008081fd5b6130026121f6565b815161300d816124eb565b81528185015161301c816124eb565b81860152835291830191604001612fe1565b600082601f83011261303f57600080fd5b8151602061304f6122b883612273565b82815260059290921b8401810191818101908684111561306e57600080fd5b8286015b848110156122f75780518352918301918301613072565b6000602080838503121561309c57600080fd5b825167ffffffffffffffff808211156130b457600080fd5b90840190608082870312156130c857600080fd5b6130d061221f565b8251828111156130df57600080fd5b8301601f810188136130f057600080fd5b80516130fe6122b882612273565b81815260059190911b8201860190868101908a83111561311d57600080fd5b928701925b828410156131445783516131358161236f565b82529287019290870190613122565b8452505050828401518281111561315a57600080fd5b61316688828601612f9d565b8583015250604083015193508184111561317f57600080fd5b61318b8785850161302e565b6040820152606083015160608201528094505050505092915050565b600081518084526020808501945080840160005b83811015612612578151875295820195908201906001016131bb565b6000602080835283516080828501526131f360a08501826125d9565b905081850151601f19604081878503018188015283835180865286860191508685019550600094505b8085101561325a57613246828751805167ffffffffffffffff908116835260209182015116910152565b94860194600194909401939082019061321c565b508189015195508288820301606089015261327581876131a7565b95505050505050606084015160808401528091505092915050565b606081016132b58285805167ffffffffffffffff908116835260209182015116910152565b6001600160a01b03831660408301529392505050565b600067ffffffffffffffff8083168185168083038211156132ee576132ee612997565b0194935050505056fea164736f6c634300080f000a",
}

var CommitStoreHelperABI = CommitStoreHelperMetaData.ABI

var CommitStoreHelperBin = CommitStoreHelperMetaData.Bin

func DeployCommitStoreHelper(auth *bind.TransactOpts, backend bind.ContractBackend, chainId uint64, sourceChainId uint64, afn common.Address, config ICommitStoreCommitStoreConfig) (common.Address, *types.Transaction, *CommitStoreHelper, error) {
	parsed, err := CommitStoreHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommitStoreHelperBin), backend, chainId, sourceChainId, afn, config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CommitStoreHelper{CommitStoreHelperCaller: CommitStoreHelperCaller{contract: contract}, CommitStoreHelperTransactor: CommitStoreHelperTransactor{contract: contract}, CommitStoreHelperFilterer: CommitStoreHelperFilterer{contract: contract}}, nil
}

type CommitStoreHelper struct {
	address common.Address
	abi     abi.ABI
	CommitStoreHelperCaller
	CommitStoreHelperTransactor
	CommitStoreHelperFilterer
}

type CommitStoreHelperCaller struct {
	contract *bind.BoundContract
}

type CommitStoreHelperTransactor struct {
	contract *bind.BoundContract
}

type CommitStoreHelperFilterer struct {
	contract *bind.BoundContract
}

type CommitStoreHelperSession struct {
	Contract     *CommitStoreHelper
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CommitStoreHelperCallerSession struct {
	Contract *CommitStoreHelperCaller
	CallOpts bind.CallOpts
}

type CommitStoreHelperTransactorSession struct {
	Contract     *CommitStoreHelperTransactor
	TransactOpts bind.TransactOpts
}

type CommitStoreHelperRaw struct {
	Contract *CommitStoreHelper
}

type CommitStoreHelperCallerRaw struct {
	Contract *CommitStoreHelperCaller
}

type CommitStoreHelperTransactorRaw struct {
	Contract *CommitStoreHelperTransactor
}

func NewCommitStoreHelper(address common.Address, backend bind.ContractBackend) (*CommitStoreHelper, error) {
	abi, err := abi.JSON(strings.NewReader(CommitStoreHelperABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCommitStoreHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelper{address: address, abi: abi, CommitStoreHelperCaller: CommitStoreHelperCaller{contract: contract}, CommitStoreHelperTransactor: CommitStoreHelperTransactor{contract: contract}, CommitStoreHelperFilterer: CommitStoreHelperFilterer{contract: contract}}, nil
}

func NewCommitStoreHelperCaller(address common.Address, caller bind.ContractCaller) (*CommitStoreHelperCaller, error) {
	contract, err := bindCommitStoreHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperCaller{contract: contract}, nil
}

func NewCommitStoreHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*CommitStoreHelperTransactor, error) {
	contract, err := bindCommitStoreHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperTransactor{contract: contract}, nil
}

func NewCommitStoreHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*CommitStoreHelperFilterer, error) {
	contract, err := bindCommitStoreHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperFilterer{contract: contract}, nil
}

func bindCommitStoreHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CommitStoreHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_CommitStoreHelper *CommitStoreHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitStoreHelper.Contract.CommitStoreHelperCaller.contract.Call(opts, result, method, params...)
}

func (_CommitStoreHelper *CommitStoreHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.CommitStoreHelperTransactor.contract.Transfer(opts)
}

func (_CommitStoreHelper *CommitStoreHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.CommitStoreHelperTransactor.contract.Transact(opts, method, params...)
}

func (_CommitStoreHelper *CommitStoreHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitStoreHelper.Contract.contract.Call(opts, result, method, params...)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.contract.Transfer(opts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.contract.Transact(opts, method, params...)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) GetAFN() (common.Address, error) {
	return _CommitStoreHelper.Contract.GetAFN(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) GetAFN() (common.Address, error) {
	return _CommitStoreHelper.Contract.GetAFN(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) GetChainId() (*big.Int, error) {
	return _CommitStoreHelper.Contract.GetChainId(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) GetChainId() (*big.Int, error) {
	return _CommitStoreHelper.Contract.GetChainId(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) GetCommitStoreConfig(opts *bind.CallOpts) (ICommitStoreCommitStoreConfig, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "getCommitStoreConfig")

	if err != nil {
		return *new(ICommitStoreCommitStoreConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(ICommitStoreCommitStoreConfig)).(*ICommitStoreCommitStoreConfig)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) GetCommitStoreConfig() (ICommitStoreCommitStoreConfig, error) {
	return _CommitStoreHelper.Contract.GetCommitStoreConfig(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) GetCommitStoreConfig() (ICommitStoreCommitStoreConfig, error) {
	return _CommitStoreHelper.Contract.GetCommitStoreConfig(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "getExpectedNextSequenceNumber", onRamp)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _CommitStoreHelper.Contract.GetExpectedNextSequenceNumber(&_CommitStoreHelper.CallOpts, onRamp)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _CommitStoreHelper.Contract.GetExpectedNextSequenceNumber(&_CommitStoreHelper.CallOpts, onRamp)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _CommitStoreHelper.Contract.GetMerkleRoot(&_CommitStoreHelper.CallOpts, root)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _CommitStoreHelper.Contract.GetMerkleRoot(&_CommitStoreHelper.CallOpts, root)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) GetSourceChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "getSourceChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) GetSourceChainId() (*big.Int, error) {
	return _CommitStoreHelper.Contract.GetSourceChainId(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) GetSourceChainId() (*big.Int, error) {
	return _CommitStoreHelper.Contract.GetSourceChainId(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) GetTransmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "getTransmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) GetTransmitters() ([]common.Address, error) {
	return _CommitStoreHelper.Contract.GetTransmitters(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) GetTransmitters() ([]common.Address, error) {
	return _CommitStoreHelper.Contract.GetTransmitters(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) IsAFNHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "isAFNHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) IsAFNHealthy() (bool, error) {
	return _CommitStoreHelper.Contract.IsAFNHealthy(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) IsAFNHealthy() (bool, error) {
	return _CommitStoreHelper.Contract.IsAFNHealthy(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "isBlessed", root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) IsBlessed(root [32]byte) (bool, error) {
	return _CommitStoreHelper.Contract.IsBlessed(&_CommitStoreHelper.CallOpts, root)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) IsBlessed(root [32]byte) (bool, error) {
	return _CommitStoreHelper.Contract.IsBlessed(&_CommitStoreHelper.CallOpts, root)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _CommitStoreHelper.Contract.LatestConfigDetails(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _CommitStoreHelper.Contract.LatestConfigDetails(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _CommitStoreHelper.Contract.LatestConfigDigestAndEpoch(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _CommitStoreHelper.Contract.LatestConfigDigestAndEpoch(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "merkleRoot", leaves, proofs, proofFlagBits)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _CommitStoreHelper.Contract.MerkleRoot(&_CommitStoreHelper.CallOpts, leaves, proofs, proofFlagBits)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _CommitStoreHelper.Contract.MerkleRoot(&_CommitStoreHelper.CallOpts, leaves, proofs, proofFlagBits)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) Owner() (common.Address, error) {
	return _CommitStoreHelper.Contract.Owner(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) Owner() (common.Address, error) {
	return _CommitStoreHelper.Contract.Owner(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) Paused() (bool, error) {
	return _CommitStoreHelper.Contract.Paused(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) Paused() (bool, error) {
	return _CommitStoreHelper.Contract.Paused(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) TypeAndVersion() (string, error) {
	return _CommitStoreHelper.Contract.TypeAndVersion(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) TypeAndVersion() (string, error) {
	return _CommitStoreHelper.Contract.TypeAndVersion(&_CommitStoreHelper.CallOpts)
}

func (_CommitStoreHelper *CommitStoreHelperCaller) Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _CommitStoreHelper.contract.Call(opts, &out, "verify", hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStoreHelper *CommitStoreHelperSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _CommitStoreHelper.Contract.Verify(&_CommitStoreHelper.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_CommitStoreHelper *CommitStoreHelperCallerSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _CommitStoreHelper.Contract.Verify(&_CommitStoreHelper.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "acceptOwnership")
}

func (_CommitStoreHelper *CommitStoreHelperSession) AcceptOwnership() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.AcceptOwnership(&_CommitStoreHelper.TransactOpts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.AcceptOwnership(&_CommitStoreHelper.TransactOpts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "pause")
}

func (_CommitStoreHelper *CommitStoreHelperSession) Pause() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Pause(&_CommitStoreHelper.TransactOpts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) Pause() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Pause(&_CommitStoreHelper.TransactOpts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) Report(opts *bind.TransactOpts, commitReport []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "report", commitReport)
}

func (_CommitStoreHelper *CommitStoreHelperSession) Report(commitReport []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Report(&_CommitStoreHelper.TransactOpts, commitReport)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) Report(commitReport []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Report(&_CommitStoreHelper.TransactOpts, commitReport)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "resetUnblessedRoots", rootToReset)
}

func (_CommitStoreHelper *CommitStoreHelperSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.ResetUnblessedRoots(&_CommitStoreHelper.TransactOpts, rootToReset)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.ResetUnblessedRoots(&_CommitStoreHelper.TransactOpts, rootToReset)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "setAFN", afn)
}

func (_CommitStoreHelper *CommitStoreHelperSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetAFN(&_CommitStoreHelper.TransactOpts, afn)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetAFN(&_CommitStoreHelper.TransactOpts, afn)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) SetCommitStoreConfig(opts *bind.TransactOpts, config ICommitStoreCommitStoreConfig) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "setCommitStoreConfig", config)
}

func (_CommitStoreHelper *CommitStoreHelperSession) SetCommitStoreConfig(config ICommitStoreCommitStoreConfig) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetCommitStoreConfig(&_CommitStoreHelper.TransactOpts, config)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) SetCommitStoreConfig(config ICommitStoreCommitStoreConfig) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetCommitStoreConfig(&_CommitStoreHelper.TransactOpts, config)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) SetOCR2Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "setOCR2Config", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_CommitStoreHelper *CommitStoreHelperSession) SetOCR2Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetOCR2Config(&_CommitStoreHelper.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) SetOCR2Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.SetOCR2Config(&_CommitStoreHelper.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "transferOwnership", to)
}

func (_CommitStoreHelper *CommitStoreHelperSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.TransferOwnership(&_CommitStoreHelper.TransactOpts, to)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.TransferOwnership(&_CommitStoreHelper.TransactOpts, to)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_CommitStoreHelper *CommitStoreHelperSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Transmit(&_CommitStoreHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Transmit(&_CommitStoreHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_CommitStoreHelper *CommitStoreHelperTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStoreHelper.contract.Transact(opts, "unpause")
}

func (_CommitStoreHelper *CommitStoreHelperSession) Unpause() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Unpause(&_CommitStoreHelper.TransactOpts)
}

func (_CommitStoreHelper *CommitStoreHelperTransactorSession) Unpause() (*types.Transaction, error) {
	return _CommitStoreHelper.Contract.Unpause(&_CommitStoreHelper.TransactOpts)
}

type CommitStoreHelperAFNSetIterator struct {
	Event *CommitStoreHelperAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperAFNSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterAFNSet(opts *bind.FilterOpts) (*CommitStoreHelperAFNSetIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperAFNSetIterator{contract: _CommitStoreHelper.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperAFNSet) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperAFNSet)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseAFNSet(log types.Log) (*CommitStoreHelperAFNSet, error) {
	event := new(CommitStoreHelperAFNSet)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperCommitStoreConfigSetIterator struct {
	Event *CommitStoreHelperCommitStoreConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperCommitStoreConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperCommitStoreConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperCommitStoreConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperCommitStoreConfigSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperCommitStoreConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperCommitStoreConfigSet struct {
	Config ICommitStoreCommitStoreConfig
	Raw    types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterCommitStoreConfigSet(opts *bind.FilterOpts) (*CommitStoreHelperCommitStoreConfigSetIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "CommitStoreConfigSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperCommitStoreConfigSetIterator{contract: _CommitStoreHelper.contract, event: "CommitStoreConfigSet", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchCommitStoreConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperCommitStoreConfigSet) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "CommitStoreConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperCommitStoreConfigSet)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "CommitStoreConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseCommitStoreConfigSet(log types.Log) (*CommitStoreHelperCommitStoreConfigSet, error) {
	event := new(CommitStoreHelperCommitStoreConfigSet)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "CommitStoreConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperConfigSetIterator struct {
	Event *CommitStoreHelperConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperConfigSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterConfigSet(opts *bind.FilterOpts) (*CommitStoreHelperConfigSetIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperConfigSetIterator{contract: _CommitStoreHelper.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperConfigSet) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperConfigSet)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseConfigSet(log types.Log) (*CommitStoreHelperConfigSet, error) {
	event := new(CommitStoreHelperConfigSet)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperOwnershipTransferRequestedIterator struct {
	Event *CommitStoreHelperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreHelperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperOwnershipTransferRequestedIterator{contract: _CommitStoreHelper.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperOwnershipTransferRequested)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseOwnershipTransferRequested(log types.Log) (*CommitStoreHelperOwnershipTransferRequested, error) {
	event := new(CommitStoreHelperOwnershipTransferRequested)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperOwnershipTransferredIterator struct {
	Event *CommitStoreHelperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreHelperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperOwnershipTransferredIterator{contract: _CommitStoreHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperOwnershipTransferred)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseOwnershipTransferred(log types.Log) (*CommitStoreHelperOwnershipTransferred, error) {
	event := new(CommitStoreHelperOwnershipTransferred)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperPausedIterator struct {
	Event *CommitStoreHelperPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperPausedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterPaused(opts *bind.FilterOpts) (*CommitStoreHelperPausedIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperPausedIterator{contract: _CommitStoreHelper.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperPaused) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperPaused)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParsePaused(log types.Log) (*CommitStoreHelperPaused, error) {
	event := new(CommitStoreHelperPaused)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperReportAcceptedIterator struct {
	Event *CommitStoreHelperReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperReportAccepted struct {
	Report InternalCommitReport
	Raw    types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*CommitStoreHelperReportAcceptedIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperReportAcceptedIterator{contract: _CommitStoreHelper.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperReportAccepted) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperReportAccepted)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseReportAccepted(log types.Log) (*CommitStoreHelperReportAccepted, error) {
	event := new(CommitStoreHelperReportAccepted)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperTransmittedIterator struct {
	Event *CommitStoreHelperTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperTransmittedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterTransmitted(opts *bind.FilterOpts) (*CommitStoreHelperTransmittedIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperTransmittedIterator{contract: _CommitStoreHelper.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperTransmitted) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperTransmitted)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseTransmitted(log types.Log) (*CommitStoreHelperTransmitted, error) {
	event := new(CommitStoreHelperTransmitted)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreHelperUnpausedIterator struct {
	Event *CommitStoreHelperUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreHelperUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreHelperUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreHelperUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreHelperUnpausedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreHelperUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreHelperUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) FilterUnpaused(opts *bind.FilterOpts) (*CommitStoreHelperUnpausedIterator, error) {

	logs, sub, err := _CommitStoreHelper.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &CommitStoreHelperUnpausedIterator{contract: _CommitStoreHelper.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperUnpaused) (event.Subscription, error) {

	logs, sub, err := _CommitStoreHelper.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreHelperUnpaused)
				if err := _CommitStoreHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStoreHelper *CommitStoreHelperFilterer) ParseUnpaused(log types.Log) (*CommitStoreHelperUnpaused, error) {
	event := new(CommitStoreHelperUnpaused)
	if err := _CommitStoreHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_CommitStoreHelper *CommitStoreHelper) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CommitStoreHelper.abi.Events["AFNSet"].ID:
		return _CommitStoreHelper.ParseAFNSet(log)
	case _CommitStoreHelper.abi.Events["CommitStoreConfigSet"].ID:
		return _CommitStoreHelper.ParseCommitStoreConfigSet(log)
	case _CommitStoreHelper.abi.Events["ConfigSet"].ID:
		return _CommitStoreHelper.ParseConfigSet(log)
	case _CommitStoreHelper.abi.Events["OwnershipTransferRequested"].ID:
		return _CommitStoreHelper.ParseOwnershipTransferRequested(log)
	case _CommitStoreHelper.abi.Events["OwnershipTransferred"].ID:
		return _CommitStoreHelper.ParseOwnershipTransferred(log)
	case _CommitStoreHelper.abi.Events["Paused"].ID:
		return _CommitStoreHelper.ParsePaused(log)
	case _CommitStoreHelper.abi.Events["ReportAccepted"].ID:
		return _CommitStoreHelper.ParseReportAccepted(log)
	case _CommitStoreHelper.abi.Events["Transmitted"].ID:
		return _CommitStoreHelper.ParseTransmitted(log)
	case _CommitStoreHelper.abi.Events["Unpaused"].ID:
		return _CommitStoreHelper.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CommitStoreHelperAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (CommitStoreHelperCommitStoreConfigSet) Topic() common.Hash {
	return common.HexToHash("0xd877a6c59b30961c28d263c0104d975d2ddf1f185e20d5a6adb144d7bc9f16e2")
}

func (CommitStoreHelperConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (CommitStoreHelperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CommitStoreHelperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (CommitStoreHelperPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (CommitStoreHelperReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef")
}

func (CommitStoreHelperTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (CommitStoreHelperUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_CommitStoreHelper *CommitStoreHelper) Address() common.Address {
	return _CommitStoreHelper.address
}

type CommitStoreHelperInterface interface {
	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetChainId(opts *bind.CallOpts) (*big.Int, error)

	GetCommitStoreConfig(opts *bind.CallOpts) (ICommitStoreCommitStoreConfig, error)

	GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	GetSourceChainId(opts *bind.CallOpts) (*big.Int, error)

	GetTransmitters(opts *bind.CallOpts) ([]common.Address, error)

	IsAFNHealthy(opts *bind.CallOpts) (bool, error)

	IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	Report(opts *bind.TransactOpts, commitReport []byte) (*types.Transaction, error)

	ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetCommitStoreConfig(opts *bind.TransactOpts, config ICommitStoreCommitStoreConfig) (*types.Transaction, error)

	SetOCR2Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterAFNSet(opts *bind.FilterOpts) (*CommitStoreHelperAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*CommitStoreHelperAFNSet, error)

	FilterCommitStoreConfigSet(opts *bind.FilterOpts) (*CommitStoreHelperCommitStoreConfigSetIterator, error)

	WatchCommitStoreConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperCommitStoreConfigSet) (event.Subscription, error)

	ParseCommitStoreConfigSet(log types.Log) (*CommitStoreHelperCommitStoreConfigSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*CommitStoreHelperConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*CommitStoreHelperConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreHelperOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CommitStoreHelperOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreHelperOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CommitStoreHelperOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*CommitStoreHelperPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*CommitStoreHelperPaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*CommitStoreHelperReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*CommitStoreHelperReportAccepted, error)

	FilterTransmitted(opts *bind.FilterOpts) (*CommitStoreHelperTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*CommitStoreHelperTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*CommitStoreHelperUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CommitStoreHelperUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*CommitStoreHelperUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package commit_store

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type ICommitStoreCommitStoreConfig struct {
	OnRamps          []common.Address
	MinSeqNrByOnRamp []uint64
}

type InternalCommitReport struct {
	OnRamps     []common.Address
	Intervals   []InternalInterval
	MerkleRoots [][32]byte
	RootOfRoots [32]byte
}

type InternalInterval struct {
	Min uint64
	Max uint64
}

var CommitStoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainId\",\"type\":\"uint64\"},{\"internalType\":\"contractIAFN\",\"name\":\"afn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structICommitStore.CommitStoreConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAFNSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadHealthConfig\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structInternal.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"internalType\":\"structInternal.CommitReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"InvalidCommitReport\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfiguration\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structInternal.Interval\",\"name\":\"interval\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"UnsupportedOnRamp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIAFN\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractIAFN\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"indexed\":false,\"internalType\":\"structICommitStore.CommitStoreConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"CommitStoreConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structInternal.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structInternal.CommitReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractIAFN\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structICommitStore.CommitStoreConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_sourceChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAFNHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"isBlessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootToReset\",\"type\":\"bytes32[]\"}],\"name\":\"resetUnblessedRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIAFN\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structICommitStore.CommitStoreConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setOCR2Config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"innerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"innerProofFlagBits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"outerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"outerProofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b5060405162003be838038062003be8833981016040819052620000349162000596565b6000805460ff19168155600190839033908190816200009a5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0380851661010002610100600160a81b031990921691909117909155811615620000d457620000d48162000263565b5050506001600160a01b038116620000ff57604051630958ef9b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b039290921691909117905515156080526001600160401b0384811660a052831660c052805180518291600a916200015391839160209091019062000314565b5060208281015180516200016e92600185019201906200037e565b5050600b54600a54149050620001975760405163c52a9bd360e01b815260040160405180910390fd5b60005b600a548110156200025857600b805482908110620001bc57620001bc620006d0565b90600052602060002090600491828204019190066008029054906101000a90046001600160401b0316600c6000600a6000018481548110620002025762000202620006d0565b6000918252602080832091909101546001600160a01b03168352820192909252604001902080546001600160401b0319166001600160401b03929092169190911790556200025081620006e6565b90506200019a565b50505050506200070e565b336001600160a01b03821603620002bd5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000091565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b8280548282559060005260206000209081019282156200036c579160200282015b828111156200036c57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000335565b506200037a92915062000433565b5090565b828054828255906000526020600020906003016004900481019282156200036c5791602002820160005b83821115620003f457835183826101000a8154816001600160401b0302191690836001600160401b031602179055509260200192600801602081600701049283019260010302620003a8565b8015620004295782816101000a8154906001600160401b030219169055600801602081600701049283019260010302620003f4565b50506200037a9291505b5b808211156200037a576000815560010162000434565b80516001600160401b03811681146200046257600080fd5b919050565b6001600160a01b03811681146200047d57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715620004bb57620004bb62000480565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004ec57620004ec62000480565b604052919050565b60006001600160401b0382111562000510576200051062000480565b5060051b60200190565b600082601f8301126200052c57600080fd5b81516020620005456200053f83620004f4565b620004c1565b82815260059290921b840181019181810190868411156200056557600080fd5b8286015b848110156200058b576200057d816200044a565b835291830191830162000569565b509695505050505050565b60008060008060808587031215620005ad57600080fd5b620005b8856200044a565b93506020620005c98187016200044a565b93506040860151620005db8162000467565b60608701519093506001600160401b0380821115620005f957600080fd5b908701906040828a0312156200060e57600080fd5b6200061862000496565b8251828111156200062857600080fd5b8301601f81018b136200063a57600080fd5b80516200064b6200053f82620004f4565b81815260059190911b8201860190868101908d8311156200066b57600080fd5b928701925b8284101562000696578351620006868162000467565b8252928701929087019062000670565b84525050508284015182811115620006ad57600080fd5b620006bb8b8286016200051a565b85830152508094505050505092959194509250565b634e487b7160e01b600052603260045260246000fd5b6000600182016200070757634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c0516134aa6200073e60003960006101d3015260006102a80152600061147001526134aa6000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c806381ff7048116100ee578063b1dc65a411610097578063e71e65ce11610071578063e71e65ce1461040f578063f2fde38b14610422578063f47a869014610435578063ff888fb11461044857600080fd5b8063b1dc65a41461039b578063c1131d8e146103ae578063c3f909d4146103fa57600080fd5b80638da5cb5b116100c85780638da5cb5b14610345578063a7206cd61461035b578063afcb95d71461037b57600080fd5b806381ff7048146102fa57806383ec5cf61461032a5780638456cb591461033d57600080fd5b80632222dd42116101505780635c975abb1161012a5780635c975abb146102d257806379ba5097146102dd57806381411834146102e557600080fd5b80632222dd421461027e57806328094b59146102a35780633f4ba83a146102ca57600080fd5b8063147809b311610181578063147809b31461020a578063181f5a77146102225780631ef381741461026b57600080fd5b806307761f3d146101a85780630f733bca146101ce578063108ee5fc146101f5575b600080fd5b6101bb6101b6366004612522565b61045b565b6040519081526020015b60405180910390f35b6101bb7f000000000000000000000000000000000000000000000000000000000000000081565b6102086102033660046125a4565b610632565b005b6102126106e8565b60405190151581526020016101c5565b61025e6040518060400160405280601181526020017f436f6d6d697453746f726520312e302e3000000000000000000000000000000081525081565b6040516101c5919061260e565b61020861027936600461272c565b610775565b6002546001600160a01b03165b6040516001600160a01b0390911681526020016101c5565b6101bb7f000000000000000000000000000000000000000000000000000000000000000081565b610208610fdc565b60005460ff16610212565b610208610fee565b6102ed6110d1565b6040516101c5919061283d565b6005546003546040805163ffffffff808516825264010000000090940490931660208401528201526060016101c5565b610208610338366004612850565b611133565b61020861133d565b60005461010090046001600160a01b031661028b565b6101bb61036936600461288b565b60009081526009602052604090205490565b6040805160018152600060208201819052918101919091526060016101c5565b6102086103a93660046128f0565b61134d565b6103e16103bc3660046125a4565b6001600160a01b03166000908152600c602052604090205467ffffffffffffffff1690565b60405167ffffffffffffffff90911681526020016101c5565b610402611920565b6040516101c591906129d5565b6101bb61041d366004612a3c565b611a2b565b6102086104303660046125a4565b611b72565b610208610443366004612ae7565b611b86565b61021261045636600461288b565b611bde565b60008084519050600060018551830103905080600003610499578560008151811061048857610488612b29565b60200260200101519250505061062b565b6101008111156104d5576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008167ffffffffffffffff8111156104f0576104f0612400565b604051908082528060200260200182016040528015610519578160200160208202803683370190505b50905060008080805b85811015610604576105df6001828b901c1660011461055f578a5160018401938c91811061055257610552612b29565b602002602001015161059d565b87851061057d57855160018501948791811061055257610552612b29565b8b5160018601958d91811061059457610594612b29565b60200260200101515b8886106105c85786516001860195889181106105bb576105bb612b29565b6020026020010151611c94565b8c5160018701968e9181106105bb576105bb612b29565b8582815181106105f1576105f1612b29565b6020908102919091010152600101610522565b5083600186038151811061061a5761061a612b29565b602002602001015196505050505050505b9392505050565b61063a611d0f565b6001600160a01b03811661067a576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff1983168117909355604080519190921680825260208201939093527f2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28910160405180910390a15050565b600254604080517f46f8e6d700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916346f8e6d79160048083019260209291908290030181865afa15801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190612b3f565b15905090565b855185518560ff16601f8311156107ed576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e6572730000000000000000000000000000000060448201526064015b60405180910390fd5b80600003610857576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f736974697665000000000000000000000000000060448201526064016107e4565b8183146108e5576040517f89a61989000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e0000000000000000000000000000000000000000000000000000000060648201526084016107e4565b6108f0816003612b77565b8311610958576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f2068696768000000000000000060448201526064016107e4565b610960611d0f565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b60075415610aca576007546000906109b890600190612b96565b90506000600782815481106109cf576109cf612b29565b6000918252602082200154600880546001600160a01b03909216935090849081106109fc576109fc612b29565b60009182526020808320909101546001600160a01b03858116845260069092526040808420805461ffff1990811690915592909116808452922080549091169055600780549192509080610a5257610a52612bad565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff191690550190556008805480610a9257610a92612bad565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff191690550190555061099e915050565b60005b815151811015610e555760006006600084600001518481518110610af357610af3612b29565b6020908102919091018101516001600160a01b0316825281019190915260400160002054610100900460ff166002811115610b3057610b30612bc3565b14610b97576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e6572206164647265737300000000000000000060448201526064016107e4565b6040805180820190915260ff82168152600160208201528251805160069160009185908110610bc857610bc8612b29565b6020908102919091018101516001600160a01b03168252818101929092526040016000208251815460ff90911660ff19821681178355928401519192839161ffff191617610100836002811115610c2157610c21612bc3565b021790555060009150610c319050565b6006600084602001518481518110610c4b57610c4b612b29565b6020908102919091018101516001600160a01b0316825281019190915260400160002054610100900460ff166002811115610c8857610c88612bc3565b14610cef576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d697474657220616464726573730000000060448201526064016107e4565b6040805180820190915260ff821681526020810160028152506006600084602001518481518110610d2257610d22612b29565b6020908102919091018101516001600160a01b03168252818101929092526040016000208251815460ff90911660ff19821681178355928401519192839161ffff191617610100836002811115610d7b57610d7b612bc3565b021790555050825180516007925083908110610d9957610d99612b29565b6020908102919091018101518254600181018455600093845292829020909201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039093169290921790915582015180516008919083908110610dfd57610dfd612b29565b602090810291909101810151825460018101845560009384529190922001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055610e4e81612bd9565b9050610acd565b5060408101516004805460ff191660ff909216919091179055600580547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff438116820292831785559083048116936001939092600092610ec9928692908216911617612bf3565b92506101000a81548163ffffffff021916908363ffffffff160217905550610f284630600560009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a00151611d72565b6003819055825180516004805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560055460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0598610fc7988b98919763ffffffff909216969095919491939192612c1b565b60405180910390a15050505050505050505050565b610fe4611d0f565b610fec611dff565b565b6001546001600160a01b031633146110485760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016107e4565b60008054336101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff84161784556001805473ffffffffffffffffffffffffffffffffffffffff191690556040516001600160a01b03919093041692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6060600880548060200260200160405190810160405280929190818152602001828054801561112957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161110b575b5050505050905090565b61113b611d0f565b60006111478280612cb1565b915061115890506020830183612cb1565b905081141580611166575080155b1561119d576040517fc52a9bd300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a5460005b8181101561121f57600c6000600a60000183815481106111c5576111c5612b29565b60009182526020808320909101546001600160a01b03168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016905561121881612bd9565b90506111a3565b5082600a61122d8282612e1b565b90505060005b82811015611300576112486020850185612cb1565b8281811061125857611258612b29565b905060200201602081019061126d9190612ee4565b600c600061127b8780612cb1565b8581811061128b5761128b612b29565b90506020020160208101906112a091906125a4565b6001600160a01b03168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff929092169190911790556112f981612bd9565b9050611233565b507fd877a6c59b30961c28d263c0104d975d2ddf1f185e20d5a6adb144d7bc9f16e2836040516113309190612f68565b60405180910390a1505050565b611345611d0f565b610fec611e9b565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c0135916113a391849163ffffffff851691908e908e9081908401838280828437600092019190915250611f2392505050565b6040805183815262ffffff600884901c1660208201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16040805160608101825260035480825260045460ff8082166020850152610100909104169282019290925290831461145e5760405162461bcd60e51b815260206004820152601560248201527f636f6e666967446967657374206d69736d61746368000000000000000000000060448201526064016107e4565b61146c8b8b8b8b8b8b612295565b60007f0000000000000000000000000000000000000000000000000000000000000000156114c9576002826020015183604001516114aa9190613015565b6114b4919061303a565b6114bf906001613015565b60ff1690506114df565b60208201516114d9906001613015565b60ff1690505b88811461152e5760405162461bcd60e51b815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e61747572657300000000000060448201526064016107e4565b88871461157d5760405162461bcd60e51b815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e000060448201526064016107e4565b3360009081526006602090815260408083208151808301909252805460ff808216845292939192918401916101009091041660028111156115c0576115c0612bc3565b60028111156115d1576115d1612bc3565b90525090506002816020015160028111156115ee576115ee612bc3565b14801561162857506008816000015160ff168154811061161057611610612b29565b6000918252602090912001546001600160a01b031633145b6116745760405162461bcd60e51b815260206004820152601860248201527f756e617574686f72697a6564207472616e736d6974746572000000000000000060448201526064016107e4565b50505050506000888860405161168b92919061306a565b6040519081900381206116a2918c9060200161307a565b6040516020818303038152906040528051906020012090506116c26123e1565b604080518082019091526000808252602082015260005b888110156118fe5760006001858884602081106116f8576116f8612b29565b61170591901a601b613015565b8d8d8681811061171757611717612b29565b905060200201358c8c8781811061173057611730612b29565b905060200201356040516000815260200160405260405161176d949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa15801561178f573d6000803e3d6000fd5b505060408051601f198101516001600160a01b03811660009081526006602090815290849020838501909452835460ff808216855292965092945084019161010090041660028111156117e4576117e4612bc3565b60028111156117f5576117f5612bc3565b905250925060018360200151600281111561181257611812612bc3565b1461185f5760405162461bcd60e51b815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e000060448201526064016107e4565b8251849060ff16601f811061187657611876612b29565b6020020151156118c85760405162461bcd60e51b815260206004820152601460248201527f6e6f6e2d756e69717565207369676e617475726500000000000000000000000060448201526064016107e4565b600184846000015160ff16601f81106118e3576118e3612b29565b91151560209092020152506118f781612bd9565b90506116d9565b5050505063ffffffff811061191557611915613096565b505050505050505050565b604080518082019091526060808252602082015260408051600a80546060602082028401810185529383018181529293919284929091849184018282801561199157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611973575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015611a1d57602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116119d85790505b505050505081525050905090565b60408051600180825281830190925260009182919060208083019080368337019050509050611abf8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508b925061045b915050565b81600081518110611ad257611ad2612b29565b6020026020010181815250506000611b1f8287878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525089925061045b915050565b6000818152600960205260409020549091501580611b435750611b4181611bde565b155b15611b5357600092505050611b66565b6000908152600960205260409020549150505b98975050505050505050565b611b7a611d0f565b611b8381612325565b50565b611b8e611d0f565b60005b81811015611bd95760096000848484818110611baf57611baf612b29565b9050602002013581526020019081526020016000206000905580611bd290612bd9565b9050611b91565b505050565b6002546040805130602080830191909152818301859052825180830384018152606083019384905280519101207fff888fb10000000000000000000000000000000000000000000000000000000090925260648101919091526000916001600160a01b03169063ff888fb190608401602060405180830381865afa158015611c6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8e9190612b3f565b92915050565b6000818310611cd6576040805160016020808301919091528183018590526060808301879052835180840390910181526080909201909252805191012061062b565b6040805160016020808301919091528183018690526060808301869052835180840390910181526080909201909252805191012061062b565b60005461010090046001600160a01b03163314610fec5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016107e4565b5050565b6000808a8a8a8a8a8a8a8a8a604051602001611d96999897969594939291906130ac565b60408051601f1981840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b60005460ff16611e515760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107e4565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff1615611eee5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107e4565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e7e3390565b60005460ff1615611f765760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107e4565b600260009054906101000a90046001600160a01b03166001600160a01b03166346f8e6d76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fed9190612b3f565b15612023576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818060200190518101906120399190613220565b805151602082015151919250908114158061205957508160400151518114155b1561209257816040517fb996e0fd0000000000000000000000000000000000000000000000000000000081526004016107e4919061336e565b60005b8181101561223f576000836000015182815181106120b5576120b5612b29565b6020908102919091018101516001600160a01b0381166000908152600c909252604082205490925067ffffffffffffffff169081900361212c576040517fb4fbc1e60000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024016107e4565b60008560200151848151811061214457612144612b29565b60200260200101519050806000015167ffffffffffffffff168267ffffffffffffffff161415806121905750806020015167ffffffffffffffff16816000015167ffffffffffffffff16115b156121cb5780836040517f3389cbd50000000000000000000000000000000000000000000000000000000081526004016107e4929190613427565b60208101516121db906001613462565b6001600160a01b03939093166000908152600c6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9094169390931790925550612238905081612bd9565b9050612095565b50606082015160009081526009602052604090819020429055517f0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef9061228690849061336e565b60405180910390a15050505050565b60006122a2826020612b77565b6122ad856020612b77565b6122b988610144613485565b6122c39190613485565b6122cd9190613485565b6122d8906000613485565b905036811461231c576040517f8e1192e1000000000000000000000000000000000000000000000000000000008152600481018290523660248201526044016107e4565b50505050505050565b336001600160a01b0382160361237d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016107e4565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b604051806103e00160405280601f906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561243957612439612400565b60405290565b6040516080810167ffffffffffffffff8111828210171561243957612439612400565b604051601f8201601f1916810167ffffffffffffffff8111828210171561248b5761248b612400565b604052919050565b600067ffffffffffffffff8211156124ad576124ad612400565b5060051b60200190565b600082601f8301126124c857600080fd5b813560206124dd6124d883612493565b612462565b82815260059290921b840181019181810190868411156124fc57600080fd5b8286015b848110156125175780358352918301918301612500565b509695505050505050565b60008060006060848603121561253757600080fd5b833567ffffffffffffffff8082111561254f57600080fd5b61255b878388016124b7565b9450602086013591508082111561257157600080fd5b5061257e868287016124b7565b925050604084013590509250925092565b6001600160a01b0381168114611b8357600080fd5b6000602082840312156125b657600080fd5b813561062b8161258f565b6000815180845260005b818110156125e7576020818501810151868301820152016125cb565b818111156125f9576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061062b60208301846125c1565b600082601f83011261263257600080fd5b813560206126426124d883612493565b82815260059290921b8401810191818101908684111561266157600080fd5b8286015b848110156125175780356126788161258f565b8352918301918301612665565b803560ff8116811461269657600080fd5b919050565b600082601f8301126126ac57600080fd5b813567ffffffffffffffff8111156126c6576126c6612400565b6126d96020601f19601f84011601612462565b8181528460208386010111156126ee57600080fd5b816020850160208301376000918101602001919091529392505050565b67ffffffffffffffff81168114611b8357600080fd5b80356126968161270b565b60008060008060008060c0878903121561274557600080fd5b863567ffffffffffffffff8082111561275d57600080fd5b6127698a838b01612621565b9750602089013591508082111561277f57600080fd5b61278b8a838b01612621565b965061279960408a01612685565b955060608901359150808211156127af57600080fd5b6127bb8a838b0161269b565b94506127c960808a01612721565b935060a08901359150808211156127df57600080fd5b506127ec89828a0161269b565b9150509295509295509295565b600081518084526020808501945080840160005b838110156128325781516001600160a01b03168752958201959082019060010161280d565b509495945050505050565b60208152600061062b60208301846127f9565b60006020828403121561286257600080fd5b813567ffffffffffffffff81111561287957600080fd5b82016040818503121561062b57600080fd5b60006020828403121561289d57600080fd5b5035919050565b60008083601f8401126128b657600080fd5b50813567ffffffffffffffff8111156128ce57600080fd5b6020830191508360208260051b85010111156128e957600080fd5b9250929050565b60008060008060008060008060e0898b03121561290c57600080fd5b606089018a81111561291d57600080fd5b8998503567ffffffffffffffff8082111561293757600080fd5b818b0191508b601f83011261294b57600080fd5b81358181111561295a57600080fd5b8c602082850101111561296c57600080fd5b6020830199508098505060808b013591508082111561298a57600080fd5b6129968c838d016128a4565b909750955060a08b01359150808211156129af57600080fd5b506129bc8b828c016128a4565b999c989b50969995989497949560c00135949350505050565b6000602080835283516040828501526129f160608501826127f9565b85830151858203601f19016040870152805180835290840192506000918401905b8083101561251757835167ffffffffffffffff168252928401926001929092019190840190612a12565b60008060008060008060008060a0898b031215612a5857600080fd5b883567ffffffffffffffff80821115612a7057600080fd5b612a7c8c838d016128a4565b909a50985060208b0135915080821115612a9557600080fd5b612aa18c838d016128a4565b909850965060408b0135955060608b0135915080821115612ac157600080fd5b50612ace8b828c016128a4565b999c989b50969995989497949560800135949350505050565b60008060208385031215612afa57600080fd5b823567ffffffffffffffff811115612b1157600080fd5b612b1d858286016128a4565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612b5157600080fd5b8151801515811461062b57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612b9157612b91612b61565b500290565b600082821015612ba857612ba8612b61565b500390565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60006000198203612bec57612bec612b61565b5060010190565b600063ffffffff808316818516808303821115612c1257612c12612b61565b01949350505050565b600061012063ffffffff808d1684528b6020850152808b16604085015250806060840152612c4b8184018a6127f9565b90508281036080840152612c5f81896127f9565b905060ff871660a084015282810360c0840152612c7c81876125c1565b905067ffffffffffffffff851660e0840152828103610100840152612ca181856125c1565b9c9b505050505050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612ce657600080fd5b83018035915067ffffffffffffffff821115612d0157600080fd5b6020019150600581901b36038213156128e957600080fd5b5b81811015611d6e5760008155600101612d1a565b60008135611c8e8161270b565b68010000000000000000831115612d5457612d54612400565b805483825580841015612dad578160005260206000206003850160021c810160188660031b168015612d97576000198083018054828460200360031b1c16815550505b50612daa6003840160021c830182612d19565b50505b506000818152602081208391805b8681101561231c57612df3612dcf85612d2e565b845467ffffffffffffffff600386901b81811b801990931693909116901b16178455565b6020840193506008820191506018821115612e1357600091506001830192505b600101612dbb565b612e258283612cb1565b68010000000000000000811115612e3e57612e3e612400565b825481845580821015612e6457836000526020600020612e62828201848301612d19565b505b508260005260208060002060005b83811015612ebd578435612e858161258f565b825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03919091161782559382019360019182019101612e72565b5050612ecb81860186612cb1565b9350915050612ede828260018601612d3b565b50505050565b600060208284031215612ef657600080fd5b813561062b8161270b565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612f3657600080fd5b830160208101925035905067ffffffffffffffff811115612f5657600080fd5b8060051b36038213156128e957600080fd5b6000602080835260608301612f7d8586612f01565b6040868501529182905290600090608086015b81831015612fc0578335612fa38161258f565b6001600160a01b0316815292840192600192909201918401612f90565b612fcc85890189612f01565b888303601f190160408a0152808352945092508401905060005b83811015612517578235612ff98161270b565b67ffffffffffffffff1682529184019190840190600101612fe6565b600060ff821660ff84168060ff0382111561303257613032612b61565b019392505050565b600060ff83168061305b57634e487b7160e01b600052601260045260246000fd5b8060ff84160491505092915050565b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b634e487b7160e01b600052600160045260246000fd5b60006101208b83526001600160a01b038b16602084015267ffffffffffffffff808b1660408501528160608501526130e68285018b6127f9565b915083820360808501526130fa828a6127f9565b915060ff881660a085015283820360c085015261311782886125c1565b90861660e08501528381036101008501529050612ca181856125c1565b600082601f83011261314557600080fd5b815160206131556124d883612493565b82815260069290921b8401810191818101908684111561317457600080fd5b8286015b8481101561251757604081890312156131915760008081fd5b613199612416565b81516131a48161270b565b8152818501516131b38161270b565b81860152835291830191604001613178565b600082601f8301126131d657600080fd5b815160206131e66124d883612493565b82815260059290921b8401810191818101908684111561320557600080fd5b8286015b848110156125175780518352918301918301613209565b6000602080838503121561323357600080fd5b825167ffffffffffffffff8082111561324b57600080fd5b908401906080828703121561325f57600080fd5b61326761243f565b82518281111561327657600080fd5b8301601f8101881361328757600080fd5b80516132956124d882612493565b81815260059190911b8201860190868101908a8311156132b457600080fd5b928701925b828410156132db5783516132cc8161258f565b825292870192908701906132b9565b845250505082840151828111156132f157600080fd5b6132fd88828601613134565b8583015250604083015193508184111561331657600080fd5b613322878585016131c5565b6040820152606083015160608201528094505050505092915050565b600081518084526020808501945080840160005b8381101561283257815187529582019590820190600101613352565b60006020808352835160808285015261338a60a08501826127f9565b905081850151601f19604081878503018188015283835180865286860191508685019550600094505b808510156133f1576133dd828751805167ffffffffffffffff908116835260209182015116910152565b9486019460019490940193908201906133b3565b508189015195508288820301606089015261340c818761333e565b95505050505050606084015160808401528091505092915050565b6060810161344c8285805167ffffffffffffffff908116835260209182015116910152565b6001600160a01b03831660408301529392505050565b600067ffffffffffffffff808316818516808303821115612c1257612c12612b61565b6000821982111561349857613498612b61565b50019056fea164736f6c634300080f000a",
}

var CommitStoreABI = CommitStoreMetaData.ABI

var CommitStoreBin = CommitStoreMetaData.Bin

func DeployCommitStore(auth *bind.TransactOpts, backend bind.ContractBackend, chainId uint64, sourceChainId uint64, afn common.Address, config ICommitStoreCommitStoreConfig) (common.Address, *types.Transaction, *CommitStore, error) {
	parsed, err := CommitStoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommitStoreBin), backend, chainId, sourceChainId, afn, config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CommitStore{CommitStoreCaller: CommitStoreCaller{contract: contract}, CommitStoreTransactor: CommitStoreTransactor{contract: contract}, CommitStoreFilterer: CommitStoreFilterer{contract: contract}}, nil
}

type CommitStore struct {
	address common.Address
	abi     abi.ABI
	CommitStoreCaller
	CommitStoreTransactor
	CommitStoreFilterer
}

type CommitStoreCaller struct {
	contract *bind.BoundContract
}

type CommitStoreTransactor struct {
	contract *bind.BoundContract
}

type CommitStoreFilterer struct {
	contract *bind.BoundContract
}

type CommitStoreSession struct {
	Contract     *CommitStore
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CommitStoreCallerSession struct {
	Contract *CommitStoreCaller
	CallOpts bind.CallOpts
}

type CommitStoreTransactorSession struct {
	Contract     *CommitStoreTransactor
	TransactOpts bind.TransactOpts
}

type CommitStoreRaw struct {
	Contract *CommitStore
}

type CommitStoreCallerRaw struct {
	Contract *CommitStoreCaller
}

type CommitStoreTransactorRaw struct {
	Contract *CommitStoreTransactor
}

func NewCommitStore(address common.Address, backend bind.ContractBackend) (*CommitStore, error) {
	abi, err := abi.JSON(strings.NewReader(CommitStoreABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCommitStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CommitStore{address: address, abi: abi, CommitStoreCaller: CommitStoreCaller{contract: contract}, CommitStoreTransactor: CommitStoreTransactor{contract: contract}, CommitStoreFilterer: CommitStoreFilterer{contract: contract}}, nil
}

func NewCommitStoreCaller(address common.Address, caller bind.ContractCaller) (*CommitStoreCaller, error) {
	contract, err := bindCommitStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommitStoreCaller{contract: contract}, nil
}

func NewCommitStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*CommitStoreTransactor, error) {
	contract, err := bindCommitStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommitStoreTransactor{contract: contract}, nil
}

func NewCommitStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*CommitStoreFilterer, error) {
	contract, err := bindCommitStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommitStoreFilterer{contract: contract}, nil
}

func bindCommitStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CommitStoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_CommitStore *CommitStoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitStore.Contract.CommitStoreCaller.contract.Call(opts, result, method, params...)
}

func (_CommitStore *CommitStoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.Contract.CommitStoreTransactor.contract.Transfer(opts)
}

func (_CommitStore *CommitStoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitStore.Contract.CommitStoreTransactor.contract.Transact(opts, method, params...)
}

func (_CommitStore *CommitStoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitStore.Contract.contract.Call(opts, result, method, params...)
}

func (_CommitStore *CommitStoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.Contract.contract.Transfer(opts)
}

func (_CommitStore *CommitStoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitStore.Contract.contract.Transact(opts, method, params...)
}

func (_CommitStore *CommitStoreCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetAFN() (common.Address, error) {
	return _CommitStore.Contract.GetAFN(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) GetAFN() (common.Address, error) {
	return _CommitStore.Contract.GetAFN(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) GetConfig(opts *bind.CallOpts) (ICommitStoreCommitStoreConfig, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getConfig")

	if err != nil {
		return *new(ICommitStoreCommitStoreConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(ICommitStoreCommitStoreConfig)).(*ICommitStoreCommitStoreConfig)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetConfig() (ICommitStoreCommitStoreConfig, error) {
	return _CommitStore.Contract.GetConfig(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) GetConfig() (ICommitStoreCommitStoreConfig, error) {
	return _CommitStore.Contract.GetConfig(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getExpectedNextSequenceNumber", onRamp)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _CommitStore.Contract.GetExpectedNextSequenceNumber(&_CommitStore.CallOpts, onRamp)
}

func (_CommitStore *CommitStoreCallerSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _CommitStore.Contract.GetExpectedNextSequenceNumber(&_CommitStore.CallOpts, onRamp)
}

func (_CommitStore *CommitStoreCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _CommitStore.Contract.GetMerkleRoot(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _CommitStore.Contract.GetMerkleRoot(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCaller) IChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "i_chainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStore *CommitStoreSession) IChainId() (*big.Int, error) {
	return _CommitStore.Contract.IChainId(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) IChainId() (*big.Int, error) {
	return _CommitStore.Contract.IChainId(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) ISourceChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "i_sourceChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStore *CommitStoreSession) ISourceChainId() (*big.Int, error) {
	return _CommitStore.Contract.ISourceChainId(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) ISourceChainId() (*big.Int, error) {
	return _CommitStore.Contract.ISourceChainId(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) IsAFNHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "isAFNHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStore *CommitStoreSession) IsAFNHealthy() (bool, error) {
	return _CommitStore.Contract.IsAFNHealthy(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) IsAFNHealthy() (bool, error) {
	return _CommitStore.Contract.IsAFNHealthy(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "isBlessed", root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStore *CommitStoreSession) IsBlessed(root [32]byte) (bool, error) {
	return _CommitStore.Contract.IsBlessed(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCallerSession) IsBlessed(root [32]byte) (bool, error) {
	return _CommitStore.Contract.IsBlessed(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_CommitStore *CommitStoreSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _CommitStore.Contract.LatestConfigDetails(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _CommitStore.Contract.LatestConfigDetails(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_CommitStore *CommitStoreSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _CommitStore.Contract.LatestConfigDigestAndEpoch(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _CommitStore.Contract.LatestConfigDigestAndEpoch(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "merkleRoot", leaves, proofs, proofFlagBits)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_CommitStore *CommitStoreSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _CommitStore.Contract.MerkleRoot(&_CommitStore.CallOpts, leaves, proofs, proofFlagBits)
}

func (_CommitStore *CommitStoreCallerSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _CommitStore.Contract.MerkleRoot(&_CommitStore.CallOpts, leaves, proofs, proofFlagBits)
}

func (_CommitStore *CommitStoreCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CommitStore *CommitStoreSession) Owner() (common.Address, error) {
	return _CommitStore.Contract.Owner(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) Owner() (common.Address, error) {
	return _CommitStore.Contract.Owner(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStore *CommitStoreSession) Paused() (bool, error) {
	return _CommitStore.Contract.Paused(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) Paused() (bool, error) {
	return _CommitStore.Contract.Paused(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_CommitStore *CommitStoreSession) Transmitters() ([]common.Address, error) {
	return _CommitStore.Contract.Transmitters(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) Transmitters() ([]common.Address, error) {
	return _CommitStore.Contract.Transmitters(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CommitStore *CommitStoreSession) TypeAndVersion() (string, error) {
	return _CommitStore.Contract.TypeAndVersion(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) TypeAndVersion() (string, error) {
	return _CommitStore.Contract.TypeAndVersion(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "verify", hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStore *CommitStoreSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _CommitStore.Contract.Verify(&_CommitStore.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_CommitStore *CommitStoreCallerSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _CommitStore.Contract.Verify(&_CommitStore.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_CommitStore *CommitStoreTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "acceptOwnership")
}

func (_CommitStore *CommitStoreSession) AcceptOwnership() (*types.Transaction, error) {
	return _CommitStore.Contract.AcceptOwnership(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CommitStore.Contract.AcceptOwnership(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "pause")
}

func (_CommitStore *CommitStoreSession) Pause() (*types.Transaction, error) {
	return _CommitStore.Contract.Pause(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactorSession) Pause() (*types.Transaction, error) {
	return _CommitStore.Contract.Pause(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactor) ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "resetUnblessedRoots", rootToReset)
}

func (_CommitStore *CommitStoreSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.ResetUnblessedRoots(&_CommitStore.TransactOpts, rootToReset)
}

func (_CommitStore *CommitStoreTransactorSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.ResetUnblessedRoots(&_CommitStore.TransactOpts, rootToReset)
}

func (_CommitStore *CommitStoreTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "setAFN", afn)
}

func (_CommitStore *CommitStoreSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _CommitStore.Contract.SetAFN(&_CommitStore.TransactOpts, afn)
}

func (_CommitStore *CommitStoreTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _CommitStore.Contract.SetAFN(&_CommitStore.TransactOpts, afn)
}

func (_CommitStore *CommitStoreTransactor) SetConfig(opts *bind.TransactOpts, config ICommitStoreCommitStoreConfig) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "setConfig", config)
}

func (_CommitStore *CommitStoreSession) SetConfig(config ICommitStoreCommitStoreConfig) (*types.Transaction, error) {
	return _CommitStore.Contract.SetConfig(&_CommitStore.TransactOpts, config)
}

func (_CommitStore *CommitStoreTransactorSession) SetConfig(config ICommitStoreCommitStoreConfig) (*types.Transaction, error) {
	return _CommitStore.Contract.SetConfig(&_CommitStore.TransactOpts, config)
}

func (_CommitStore *CommitStoreTransactor) SetOCR2Config(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "setOCR2Config", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_CommitStore *CommitStoreSession) SetOCR2Config(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStore.Contract.SetOCR2Config(&_CommitStore.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_CommitStore *CommitStoreTransactorSession) SetOCR2Config(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStore.Contract.SetOCR2Config(&_CommitStore.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_CommitStore *CommitStoreTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "transferOwnership", to)
}

func (_CommitStore *CommitStoreSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CommitStore.Contract.TransferOwnership(&_CommitStore.TransactOpts, to)
}

func (_CommitStore *CommitStoreTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CommitStore.Contract.TransferOwnership(&_CommitStore.TransactOpts, to)
}

func (_CommitStore *CommitStoreTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_CommitStore *CommitStoreSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.Transmit(&_CommitStore.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_CommitStore *CommitStoreTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.Transmit(&_CommitStore.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_CommitStore *CommitStoreTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "unpause")
}

func (_CommitStore *CommitStoreSession) Unpause() (*types.Transaction, error) {
	return _CommitStore.Contract.Unpause(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactorSession) Unpause() (*types.Transaction, error) {
	return _CommitStore.Contract.Unpause(&_CommitStore.TransactOpts)
}

type CommitStoreAFNSetIterator struct {
	Event *CommitStoreAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreAFNSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterAFNSet(opts *bind.FilterOpts) (*CommitStoreAFNSetIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreAFNSetIterator{contract: _CommitStore.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *CommitStoreAFNSet) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreAFNSet)
				if err := _CommitStore.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseAFNSet(log types.Log) (*CommitStoreAFNSet, error) {
	event := new(CommitStoreAFNSet)
	if err := _CommitStore.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreCommitStoreConfigSetIterator struct {
	Event *CommitStoreCommitStoreConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreCommitStoreConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreCommitStoreConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreCommitStoreConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreCommitStoreConfigSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreCommitStoreConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreCommitStoreConfigSet struct {
	Config ICommitStoreCommitStoreConfig
	Raw    types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterCommitStoreConfigSet(opts *bind.FilterOpts) (*CommitStoreCommitStoreConfigSetIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "CommitStoreConfigSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreCommitStoreConfigSetIterator{contract: _CommitStore.contract, event: "CommitStoreConfigSet", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchCommitStoreConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreCommitStoreConfigSet) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "CommitStoreConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreCommitStoreConfigSet)
				if err := _CommitStore.contract.UnpackLog(event, "CommitStoreConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseCommitStoreConfigSet(log types.Log) (*CommitStoreCommitStoreConfigSet, error) {
	event := new(CommitStoreCommitStoreConfigSet)
	if err := _CommitStore.contract.UnpackLog(event, "CommitStoreConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreConfigSetIterator struct {
	Event *CommitStoreConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreConfigSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterConfigSet(opts *bind.FilterOpts) (*CommitStoreConfigSetIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreConfigSetIterator{contract: _CommitStore.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreConfigSet) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreConfigSet)
				if err := _CommitStore.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseConfigSet(log types.Log) (*CommitStoreConfigSet, error) {
	event := new(CommitStoreConfigSet)
	if err := _CommitStore.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreOwnershipTransferRequestedIterator struct {
	Event *CommitStoreOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CommitStoreOwnershipTransferRequestedIterator{contract: _CommitStore.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreOwnershipTransferRequested)
				if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseOwnershipTransferRequested(log types.Log) (*CommitStoreOwnershipTransferRequested, error) {
	event := new(CommitStoreOwnershipTransferRequested)
	if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreOwnershipTransferredIterator struct {
	Event *CommitStoreOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CommitStoreOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CommitStoreOwnershipTransferredIterator{contract: _CommitStore.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreOwnershipTransferred)
				if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseOwnershipTransferred(log types.Log) (*CommitStoreOwnershipTransferred, error) {
	event := new(CommitStoreOwnershipTransferred)
	if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStorePausedIterator struct {
	Event *CommitStorePaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStorePausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStorePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStorePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStorePausedIterator) Error() error {
	return it.fail
}

func (it *CommitStorePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStorePaused struct {
	Account common.Address
	Raw     types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterPaused(opts *bind.FilterOpts) (*CommitStorePausedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &CommitStorePausedIterator{contract: _CommitStore.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *CommitStorePaused) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStorePaused)
				if err := _CommitStore.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParsePaused(log types.Log) (*CommitStorePaused, error) {
	event := new(CommitStorePaused)
	if err := _CommitStore.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreReportAcceptedIterator struct {
	Event *CommitStoreReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreReportAccepted struct {
	Report InternalCommitReport
	Raw    types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*CommitStoreReportAcceptedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &CommitStoreReportAcceptedIterator{contract: _CommitStore.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *CommitStoreReportAccepted) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreReportAccepted)
				if err := _CommitStore.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseReportAccepted(log types.Log) (*CommitStoreReportAccepted, error) {
	event := new(CommitStoreReportAccepted)
	if err := _CommitStore.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreTransmittedIterator struct {
	Event *CommitStoreTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreTransmittedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterTransmitted(opts *bind.FilterOpts) (*CommitStoreTransmittedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &CommitStoreTransmittedIterator{contract: _CommitStore.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *CommitStoreTransmitted) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreTransmitted)
				if err := _CommitStore.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseTransmitted(log types.Log) (*CommitStoreTransmitted, error) {
	event := new(CommitStoreTransmitted)
	if err := _CommitStore.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreUnpausedIterator struct {
	Event *CommitStoreUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreUnpausedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterUnpaused(opts *bind.FilterOpts) (*CommitStoreUnpausedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &CommitStoreUnpausedIterator{contract: _CommitStore.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CommitStoreUnpaused) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreUnpaused)
				if err := _CommitStore.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseUnpaused(log types.Log) (*CommitStoreUnpaused, error) {
	event := new(CommitStoreUnpaused)
	if err := _CommitStore.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_CommitStore *CommitStore) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CommitStore.abi.Events["AFNSet"].ID:
		return _CommitStore.ParseAFNSet(log)
	case _CommitStore.abi.Events["CommitStoreConfigSet"].ID:
		return _CommitStore.ParseCommitStoreConfigSet(log)
	case _CommitStore.abi.Events["ConfigSet"].ID:
		return _CommitStore.ParseConfigSet(log)
	case _CommitStore.abi.Events["OwnershipTransferRequested"].ID:
		return _CommitStore.ParseOwnershipTransferRequested(log)
	case _CommitStore.abi.Events["OwnershipTransferred"].ID:
		return _CommitStore.ParseOwnershipTransferred(log)
	case _CommitStore.abi.Events["Paused"].ID:
		return _CommitStore.ParsePaused(log)
	case _CommitStore.abi.Events["ReportAccepted"].ID:
		return _CommitStore.ParseReportAccepted(log)
	case _CommitStore.abi.Events["Transmitted"].ID:
		return _CommitStore.ParseTransmitted(log)
	case _CommitStore.abi.Events["Unpaused"].ID:
		return _CommitStore.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CommitStoreAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (CommitStoreCommitStoreConfigSet) Topic() common.Hash {
	return common.HexToHash("0xd877a6c59b30961c28d263c0104d975d2ddf1f185e20d5a6adb144d7bc9f16e2")
}

func (CommitStoreConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (CommitStoreOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CommitStoreOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (CommitStorePaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (CommitStoreReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef")
}

func (CommitStoreTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (CommitStoreUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_CommitStore *CommitStore) Address() common.Address {
	return _CommitStore.address
}

type CommitStoreInterface interface {
	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetConfig(opts *bind.CallOpts) (ICommitStoreCommitStoreConfig, error)

	GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	IChainId(opts *bind.CallOpts) (*big.Int, error)

	ISourceChainId(opts *bind.CallOpts) (*big.Int, error)

	IsAFNHealthy(opts *bind.CallOpts) (bool, error)

	IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, config ICommitStoreCommitStoreConfig) (*types.Transaction, error)

	SetOCR2Config(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterAFNSet(opts *bind.FilterOpts) (*CommitStoreAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *CommitStoreAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*CommitStoreAFNSet, error)

	FilterCommitStoreConfigSet(opts *bind.FilterOpts) (*CommitStoreCommitStoreConfigSetIterator, error)

	WatchCommitStoreConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreCommitStoreConfigSet) (event.Subscription, error)

	ParseCommitStoreConfigSet(log types.Log) (*CommitStoreCommitStoreConfigSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*CommitStoreConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*CommitStoreConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CommitStoreOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CommitStoreOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*CommitStorePausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *CommitStorePaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*CommitStorePaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*CommitStoreReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *CommitStoreReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*CommitStoreReportAccepted, error)

	FilterTransmitted(opts *bind.FilterOpts) (*CommitStoreTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *CommitStoreTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*CommitStoreTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*CommitStoreUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CommitStoreUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*CommitStoreUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package message_executor_helper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

var MessageExecutorHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"executableMessages\",\"type\":\"bytes\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_offRamp\",\"outputs\":[{\"internalType\":\"contractOffRampInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAccumulatedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162002dff38038062002dff833981016040819052620000349162000188565b80600133806000816200008e5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c157620000c181620000dc565b50505015156080526001600160a01b031660a05250620001ba565b6001600160a01b038116331415620001375760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000085565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000602082840312156200019b57600080fd5b81516001600160a01b0381168114620001b357600080fd5b9392505050565b60805160a051612c18620001e76000396000818161012601526116570152600061058d0152612c186000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80638da5cb5b11610081578063b57671661161005b578063b576716614610220578063e3d0e71214610233578063f2fde38b1461024657600080fd5b80638da5cb5b146101cf578063afcb95d7146101ed578063b1dc65a41461020d57600080fd5b806379ba5097116100b257806379ba509714610182578063814118341461018a57806381ff70481461019f57600080fd5b8063181f5a77146100d9578063583a01321461012157806359e96b5b1461016d575b600080fd5b604080518082018252601581527f4d6573736167654578656375746f7220312e302e300000000000000000000000602082015290516101189190611d0b565b60405180910390f35b6101487f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610118565b61018061017b366004611d40565b610259565b005b6101806102df565b6101926103e1565b6040516101189190611dd2565b6004546002546040805163ffffffff80851682526401000000009094049093166020840152820152606001610118565b60005473ffffffffffffffffffffffffffffffffffffffff16610148565b604080516001815260006020820181905291810191909152606001610118565b61018061021b366004611e31565b610450565b61018061022e36600461209f565b610af9565b610180610241366004612195565b610b08565b610180610254366004612262565b6114ed565b6102616114fe565b61028273ffffffffffffffffffffffffffffffffffffffff84168383611581565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290527f5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa89060600160405180910390a1505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6060600780548060200260200160405190810160405280929190818152602001828054801561044657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161041b575b5050505050905090565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c0135916104a691849163ffffffff851691908e908e908190840183828082843760009201919091525061161392505050565b6040805183815262ffffff600884901c1660208201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16040805160608101825260025480825260035460ff8082166020850152610100909104169282019290925290831461057b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f636f6e666967446967657374206d69736d617463680000000000000000000000604482015260640161035c565b6105898b8b8b8b8b8b611720565b60007f0000000000000000000000000000000000000000000000000000000000000000156105e6576002826020015183604001516105c791906122dd565b6105d19190612302565b6105dc9060016122dd565b60ff1690506105fc565b60208201516105f69060016122dd565b60ff1690505b888114610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e617475726573000000000000604482015260640161035c565b8887146106ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e0000604482015260640161035c565b3360009081526005602090815260408083208151808301909252805460ff808216845292939192918401916101009091041660028111156107115761071161234b565b60028111156107225761072261234b565b905250905060028160200151600281111561073f5761073f61234b565b14801561078657506007816000015160ff16815481106107615761076161227f565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b6107ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f756e617574686f72697a6564207472616e736d69747465720000000000000000604482015260640161035c565b50505050506000888860405161080392919061237a565b60405190819003812061081a918c9060200161238a565b60405160208183030381529060405280519060200120905061083a611c72565b604080518082019091526000808252602082015260005b88811015610ad75760006001858884602081106108705761087061227f565b61087d91901a601b6122dd565b8d8d8681811061088f5761088f61227f565b905060200201358c8c878181106108a8576108a861227f565b90506020020135604051600081526020016040526040516108e5949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610907573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff811660009081526005602090815290849020838501909452835460ff808216855292965092945084019161010090041660028111156109875761098761234b565b60028111156109985761099861234b565b90525092506001836020015160028111156109b5576109b561234b565b14610a1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e0000604482015260640161035c565b8251849060ff16601f8110610a3357610a3361227f565b602002015115610a9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f6e2d756e69717565207369676e6174757265000000000000000000000000604482015260640161035c565b600184846000015160ff16601f8110610aba57610aba61227f565b911515602090920201525080610acf816123a6565b915050610851565b5050505063ffffffff8110610aee57610aee6123df565b505050505050505050565b610b0560008083611613565b50565b855185518560ff16601f831115610b7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e65727300000000000000000000000000000000604482015260640161035c565b60008111610be5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f7369746976650000000000000000000000000000604482015260640161035c565b818314610c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e00000000000000000000000000000000000000000000000000000000606482015260840161035c565b610c7e81600361240e565b8311610ce6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f20686967680000000000000000604482015260640161035c565b610cee6114fe565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b60065415610ee157600654600090610d469060019061244b565b9050600060068281548110610d5d57610d5d61227f565b60009182526020822001546007805473ffffffffffffffffffffffffffffffffffffffff90921693509084908110610d9757610d9761227f565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff85811684526005909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811690915592909116808452922080549091169055600680549192509080610e1757610e17612462565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190556007805480610e8057610e80612462565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550610d2c915050565b60005b8151518110156113485760006005600084600001518481518110610f0a57610f0a61227f565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115610f5457610f5461234b565b14610fbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e65722061646472657373000000000000000000604482015260640161035c565b6040805180820190915260ff82168152600160208201528251805160059160009185908110610fec57610fec61227f565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000161761010083600281111561108d5761108d61234b565b02179055506000915061109d9050565b60056000846020015184815181106110b7576110b761227f565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff1660028111156111015761110161234b565b14611168576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d6974746572206164647265737300000000604482015260640161035c565b6040805180820190915260ff82168152602081016002815250600560008460200151848151811061119b5761119b61227f565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000161761010083600281111561123c5761123c61234b565b02179055505082518051600692508390811061125a5761125a61227f565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90931692909217909155820151805160079190839081106112d6576112d661227f565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905580611340816123a6565b915050610ee4565b506040810151600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600480547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff4381168202928317855590830481169360019390926000926113da928692908216911617612491565b92506101000a81548163ffffffff021916908363ffffffff1602179055506114394630600460009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a001516117d7565b6002819055825180516003805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560045460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05986114d8988b98919763ffffffff9092169690959194919391926124b9565b60405180910390a15050505050505050505050565b6114f56114fe565b610b0581611882565b60005473ffffffffffffffffffffffffffffffffffffffff16331461157f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161035c565b565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261160e908490611978565b505050565b6000818060200190518101906116299190612796565b905060005b815181101561171957600082828151811061164b5761164b61227f565b602002602001015190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633b8d08ef8260400151604051806040016040528085600001518152602001856020015181525060016040518463ffffffff1660e01b81526004016116d39392919061299a565b600060405180830381600087803b1580156116ed57600080fd5b505af1158015611701573d6000803e3d6000fd5b50505050508080611711906123a6565b91505061162e565b5050505050565b600061172d82602061240e565b61173885602061240e565b61174488610144612b20565b61174e9190612b20565b6117589190612b20565b611763906000612b20565b90503681146117ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d617463680000000000000000604482015260640161035c565b50505050505050565b6000808a8a8a8a8a8a8a8a8a6040516020016117fb99989796959493929190612b38565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116331415611902576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161035c565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006119da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a849092919063ffffffff16565b80519091501561160e57808060200190518101906119f89190612bcd565b61160e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161035c565b6060611a938484600085611a9d565b90505b9392505050565b606082471015611b2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161035c565b843b611b97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161035c565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611bc09190612bef565b60006040518083038185875af1925050503d8060008114611bfd576040519150601f19603f3d011682016040523d82523d6000602084013e611c02565b606091505b5091509150611c12828286611c1f565b925050505b949350505050565b60608315611c2e575081611a96565b825115611c3e5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035c9190611d0b565b604051806103e00160405280601f906020820280368337509192915050565b60005b83811015611cac578181015183820152602001611c94565b83811115611cbb576000848401525b50505050565b60008151808452611cd9816020860160208601611c91565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611a966020830184611cc1565b73ffffffffffffffffffffffffffffffffffffffff81168114610b0557600080fd5b600080600060608486031215611d5557600080fd5b8335611d6081611d1e565b92506020840135611d7081611d1e565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015611dc757815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611d95565b509495945050505050565b602081526000611a966020830184611d81565b60008083601f840112611df757600080fd5b50813567ffffffffffffffff811115611e0f57600080fd5b6020830191508360208260051b8501011115611e2a57600080fd5b9250929050565b60008060008060008060008060e0898b031215611e4d57600080fd5b606089018a811115611e5e57600080fd5b8998503567ffffffffffffffff80821115611e7857600080fd5b818b0191508b601f830112611e8c57600080fd5b813581811115611e9b57600080fd5b8c6020828501011115611ead57600080fd5b6020830199508098505060808b0135915080821115611ecb57600080fd5b611ed78c838d01611de5565b909750955060a08b0135915080821115611ef057600080fd5b50611efd8b828c01611de5565b999c989b50969995989497949560c00135949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611f6857611f68611f16565b60405290565b60405160e0810167ffffffffffffffff81118282101715611f6857611f68611f16565b6040516060810167ffffffffffffffff81118282101715611f6857611f68611f16565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611ffb57611ffb611f16565b604052919050565b600067ffffffffffffffff82111561201d5761201d611f16565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261205a57600080fd5b813561206d61206882612003565b611fb4565b81815284602083860101111561208257600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156120b157600080fd5b813567ffffffffffffffff8111156120c857600080fd5b611c1784828501612049565b600067ffffffffffffffff8211156120ee576120ee611f16565b5060051b60200190565b600082601f83011261210957600080fd5b81356020612119612068836120d4565b82815260059290921b8401810191818101908684111561213857600080fd5b8286015b8481101561215c57803561214f81611d1e565b835291830191830161213c565b509695505050505050565b803560ff8116811461217857600080fd5b919050565b803567ffffffffffffffff8116811461217857600080fd5b60008060008060008060c087890312156121ae57600080fd5b863567ffffffffffffffff808211156121c657600080fd5b6121d28a838b016120f8565b975060208901359150808211156121e857600080fd5b6121f48a838b016120f8565b965061220260408a01612167565b9550606089013591508082111561221857600080fd5b6122248a838b01612049565b945061223260808a0161217d565b935060a089013591508082111561224857600080fd5b5061225589828a01612049565b9150509295509295509295565b60006020828403121561227457600080fd5b8135611a9681611d1e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff84168060ff038211156122fa576122fa6122ae565b019392505050565b600060ff83168061233c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156123d8576123d86122ae565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612446576124466122ae565b500290565b60008282101561245d5761245d6122ae565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600063ffffffff8083168185168083038211156124b0576124b06122ae565b01949350505050565b600061012063ffffffff808d1684528b6020850152808b166040850152508060608401526124e98184018a611d81565b905082810360808401526124fd8189611d81565b905060ff871660a084015282810360c084015261251a8187611cc1565b905067ffffffffffffffff851660e084015282810361010084015261253f8185611cc1565b9c9b505050505050505050505050565b805161217881611d1e565b600082601f83011261256b57600080fd5b8151602061257b612068836120d4565b82815260059290921b8401810191818101908684111561259a57600080fd5b8286015b8481101561215c5780516125b181611d1e565b835291830191830161259e565b600082601f8301126125cf57600080fd5b815160206125df612068836120d4565b82815260059290921b840181019181810190868411156125fe57600080fd5b8286015b8481101561215c5780518352918301918301612602565b600082601f83011261262a57600080fd5b815161263861206882612003565b81815284602083860101111561264d57600080fd5b611c17826020830160208701611c91565b60006080828403121561267057600080fd5b612678611f45565b90508151815260208201516020820152604082015161269681611d1e565b6040820152606082015167ffffffffffffffff808211156126b657600080fd5b9083019060e082860312156126ca57600080fd5b6126d2611f6e565b8251828111156126e157600080fd5b6126ed8782860161255a565b82525060208301518281111561270257600080fd5b61270e878286016125be565b6020830152506040830151604082015261272a6060840161254f565b606082015261273b6080840161254f565b608082015260a08301518281111561275257600080fd5b61275e87828601612619565b60a08301525060c08301518281111561277657600080fd5b61278287828601612619565b60c083015250606084015250909392505050565b600060208083850312156127a957600080fd5b825167ffffffffffffffff808211156127c157600080fd5b818501915085601f8301126127d557600080fd5b81516127e3612068826120d4565b81815260059190911b8301840190848101908883111561280257600080fd5b8585015b8381101561290d5780518581111561281d57600080fd5b86016060818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001121561285157600080fd5b612859611f91565b888201518781111561286a57600080fd5b8201603f81018d1361287b57600080fd5b8981015161288b612068826120d4565b81815260059190911b8201604001908b8101908f8311156128ab57600080fd5b6040840193505b828410156128cb5783518252928c0192908c01906128b2565b84525050506040820151898201526060820151878111156128eb57600080fd5b6128f98d8b8386010161265e565b604083015250845250918601918601612806565b5098975050505050505050565b600081518084526020808501945080840160005b83811015611dc75781518752958201959082019060010161292e565b805160408084528151908401819052600091602091908201906060860190845b818110156129865783518352928401929184019160010161296a565b505093820151949091019390935250919050565b606081528351606082015260006020808601516080840152604086015173ffffffffffffffffffffffffffffffffffffffff80821660a086015260608801519150608060c08601526101c08501825160e0808801528181518084526101e0890191508683019350600092505b80831015612a2857835185168252928601926001929092019190860190612a06565b508585015193507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2092508288820301610100890152612a67818561291a565b9350505060408301516101208701526060830151612a9e61014088018273ffffffffffffffffffffffffffffffffffffffff169052565b50608083015173ffffffffffffffffffffffffffffffffffffffff1661016087015260a08301518683038201610180880152612ada8382611cc1565b92505060c0830151925080868303016101a087015250612afa8183611cc1565b91505083810382850152612b0e818761294a565b92505050611c17604083018415159052565b60008219821115612b3357612b336122ae565b500190565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b166040850152816060850152612b7f8285018b611d81565b91508382036080850152612b93828a611d81565b915060ff881660a085015283820360c0850152612bb08288611cc1565b90861660e0850152838103610100850152905061253f8185611cc1565b600060208284031215612bdf57600080fd5b81518015158114611a9657600080fd5b60008251612c01818460208701611c91565b919091019291505056fea164736f6c634300080c000a",
}

var MessageExecutorHelperABI = MessageExecutorHelperMetaData.ABI

var MessageExecutorHelperBin = MessageExecutorHelperMetaData.Bin

func DeployMessageExecutorHelper(auth *bind.TransactOpts, backend bind.ContractBackend, offRamp common.Address) (common.Address, *types.Transaction, *MessageExecutorHelper, error) {
	parsed, err := MessageExecutorHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MessageExecutorHelperBin), backend, offRamp)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MessageExecutorHelper{MessageExecutorHelperCaller: MessageExecutorHelperCaller{contract: contract}, MessageExecutorHelperTransactor: MessageExecutorHelperTransactor{contract: contract}, MessageExecutorHelperFilterer: MessageExecutorHelperFilterer{contract: contract}}, nil
}

type MessageExecutorHelper struct {
	address common.Address
	abi     abi.ABI
	MessageExecutorHelperCaller
	MessageExecutorHelperTransactor
	MessageExecutorHelperFilterer
}

type MessageExecutorHelperCaller struct {
	contract *bind.BoundContract
}

type MessageExecutorHelperTransactor struct {
	contract *bind.BoundContract
}

type MessageExecutorHelperFilterer struct {
	contract *bind.BoundContract
}

type MessageExecutorHelperSession struct {
	Contract     *MessageExecutorHelper
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type MessageExecutorHelperCallerSession struct {
	Contract *MessageExecutorHelperCaller
	CallOpts bind.CallOpts
}

type MessageExecutorHelperTransactorSession struct {
	Contract     *MessageExecutorHelperTransactor
	TransactOpts bind.TransactOpts
}

type MessageExecutorHelperRaw struct {
	Contract *MessageExecutorHelper
}

type MessageExecutorHelperCallerRaw struct {
	Contract *MessageExecutorHelperCaller
}

type MessageExecutorHelperTransactorRaw struct {
	Contract *MessageExecutorHelperTransactor
}

func NewMessageExecutorHelper(address common.Address, backend bind.ContractBackend) (*MessageExecutorHelper, error) {
	abi, err := abi.JSON(strings.NewReader(MessageExecutorHelperABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindMessageExecutorHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelper{address: address, abi: abi, MessageExecutorHelperCaller: MessageExecutorHelperCaller{contract: contract}, MessageExecutorHelperTransactor: MessageExecutorHelperTransactor{contract: contract}, MessageExecutorHelperFilterer: MessageExecutorHelperFilterer{contract: contract}}, nil
}

func NewMessageExecutorHelperCaller(address common.Address, caller bind.ContractCaller) (*MessageExecutorHelperCaller, error) {
	contract, err := bindMessageExecutorHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperCaller{contract: contract}, nil
}

func NewMessageExecutorHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*MessageExecutorHelperTransactor, error) {
	contract, err := bindMessageExecutorHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperTransactor{contract: contract}, nil
}

func NewMessageExecutorHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*MessageExecutorHelperFilterer, error) {
	contract, err := bindMessageExecutorHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperFilterer{contract: contract}, nil
}

func bindMessageExecutorHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MessageExecutorHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageExecutorHelper.Contract.MessageExecutorHelperCaller.contract.Call(opts, result, method, params...)
}

func (_MessageExecutorHelper *MessageExecutorHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.MessageExecutorHelperTransactor.contract.Transfer(opts)
}

func (_MessageExecutorHelper *MessageExecutorHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.MessageExecutorHelperTransactor.contract.Transact(opts, method, params...)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageExecutorHelper.Contract.contract.Call(opts, result, method, params...)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.contract.Transfer(opts)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.contract.Transact(opts, method, params...)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _MessageExecutorHelper.Contract.LatestConfigDetails(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _MessageExecutorHelper.Contract.LatestConfigDetails(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _MessageExecutorHelper.Contract.LatestConfigDigestAndEpoch(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _MessageExecutorHelper.Contract.LatestConfigDigestAndEpoch(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) Owner() (common.Address, error) {
	return _MessageExecutorHelper.Contract.Owner(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) Owner() (common.Address, error) {
	return _MessageExecutorHelper.Contract.Owner(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) SOffRamp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "s_offRamp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) SOffRamp() (common.Address, error) {
	return _MessageExecutorHelper.Contract.SOffRamp(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) SOffRamp() (common.Address, error) {
	return _MessageExecutorHelper.Contract.SOffRamp(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) Transmitters() ([]common.Address, error) {
	return _MessageExecutorHelper.Contract.Transmitters(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) Transmitters() ([]common.Address, error) {
	return _MessageExecutorHelper.Contract.Transmitters(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) TypeAndVersion() (string, error) {
	return _MessageExecutorHelper.Contract.TypeAndVersion(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) TypeAndVersion() (string, error) {
	return _MessageExecutorHelper.Contract.TypeAndVersion(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "acceptOwnership")
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) AcceptOwnership() (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.AcceptOwnership(&_MessageExecutorHelper.TransactOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.AcceptOwnership(&_MessageExecutorHelper.TransactOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) Report(opts *bind.TransactOpts, executableMessages []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "report", executableMessages)
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) Report(executableMessages []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.Report(&_MessageExecutorHelper.TransactOpts, executableMessages)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) Report(executableMessages []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.Report(&_MessageExecutorHelper.TransactOpts, executableMessages)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "setConfig", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.SetConfig(&_MessageExecutorHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.SetConfig(&_MessageExecutorHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "transferOwnership", to)
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.TransferOwnership(&_MessageExecutorHelper.TransactOpts, to)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.TransferOwnership(&_MessageExecutorHelper.TransactOpts, to)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.Transmit(&_MessageExecutorHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.Transmit(&_MessageExecutorHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "withdrawAccumulatedFees", feeToken, recipient, amount)
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.WithdrawAccumulatedFees(&_MessageExecutorHelper.TransactOpts, feeToken, recipient, amount)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.WithdrawAccumulatedFees(&_MessageExecutorHelper.TransactOpts, feeToken, recipient, amount)
}

type MessageExecutorHelperConfigSetIterator struct {
	Event *MessageExecutorHelperConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorHelperConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorHelperConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorHelperConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorHelperConfigSetIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorHelperConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorHelperConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) FilterConfigSet(opts *bind.FilterOpts) (*MessageExecutorHelperConfigSetIterator, error) {

	logs, sub, err := _MessageExecutorHelper.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperConfigSetIterator{contract: _MessageExecutorHelper.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperConfigSet) (event.Subscription, error) {

	logs, sub, err := _MessageExecutorHelper.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorHelperConfigSet)
				if err := _MessageExecutorHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) ParseConfigSet(log types.Log) (*MessageExecutorHelperConfigSet, error) {
	event := new(MessageExecutorHelperConfigSet)
	if err := _MessageExecutorHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorHelperFeesWithdrawnIterator struct {
	Event *MessageExecutorHelperFeesWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorHelperFeesWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorHelperFeesWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorHelperFeesWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorHelperFeesWithdrawnIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorHelperFeesWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorHelperFeesWithdrawn struct {
	FeeToken  common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) FilterFeesWithdrawn(opts *bind.FilterOpts) (*MessageExecutorHelperFeesWithdrawnIterator, error) {

	logs, sub, err := _MessageExecutorHelper.contract.FilterLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperFeesWithdrawnIterator{contract: _MessageExecutorHelper.contract, event: "FeesWithdrawn", logs: logs, sub: sub}, nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperFeesWithdrawn) (event.Subscription, error) {

	logs, sub, err := _MessageExecutorHelper.contract.WatchLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorHelperFeesWithdrawn)
				if err := _MessageExecutorHelper.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) ParseFeesWithdrawn(log types.Log) (*MessageExecutorHelperFeesWithdrawn, error) {
	event := new(MessageExecutorHelperFeesWithdrawn)
	if err := _MessageExecutorHelper.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorHelperOwnershipTransferRequestedIterator struct {
	Event *MessageExecutorHelperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorHelperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorHelperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorHelperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorHelperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorHelperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorHelperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorHelperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutorHelper.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperOwnershipTransferRequestedIterator{contract: _MessageExecutorHelper.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutorHelper.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorHelperOwnershipTransferRequested)
				if err := _MessageExecutorHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) ParseOwnershipTransferRequested(log types.Log) (*MessageExecutorHelperOwnershipTransferRequested, error) {
	event := new(MessageExecutorHelperOwnershipTransferRequested)
	if err := _MessageExecutorHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorHelperOwnershipTransferredIterator struct {
	Event *MessageExecutorHelperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorHelperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorHelperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorHelperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutorHelper.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperOwnershipTransferredIterator{contract: _MessageExecutorHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutorHelper.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorHelperOwnershipTransferred)
				if err := _MessageExecutorHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) ParseOwnershipTransferred(log types.Log) (*MessageExecutorHelperOwnershipTransferred, error) {
	event := new(MessageExecutorHelperOwnershipTransferred)
	if err := _MessageExecutorHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorHelperTransmittedIterator struct {
	Event *MessageExecutorHelperTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorHelperTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorHelperTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorHelperTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorHelperTransmittedIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorHelperTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorHelperTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) FilterTransmitted(opts *bind.FilterOpts) (*MessageExecutorHelperTransmittedIterator, error) {

	logs, sub, err := _MessageExecutorHelper.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperTransmittedIterator{contract: _MessageExecutorHelper.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperTransmitted) (event.Subscription, error) {

	logs, sub, err := _MessageExecutorHelper.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorHelperTransmitted)
				if err := _MessageExecutorHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) ParseTransmitted(log types.Log) (*MessageExecutorHelperTransmitted, error) {
	event := new(MessageExecutorHelperTransmitted)
	if err := _MessageExecutorHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_MessageExecutorHelper *MessageExecutorHelper) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _MessageExecutorHelper.abi.Events["ConfigSet"].ID:
		return _MessageExecutorHelper.ParseConfigSet(log)
	case _MessageExecutorHelper.abi.Events["FeesWithdrawn"].ID:
		return _MessageExecutorHelper.ParseFeesWithdrawn(log)
	case _MessageExecutorHelper.abi.Events["OwnershipTransferRequested"].ID:
		return _MessageExecutorHelper.ParseOwnershipTransferRequested(log)
	case _MessageExecutorHelper.abi.Events["OwnershipTransferred"].ID:
		return _MessageExecutorHelper.ParseOwnershipTransferred(log)
	case _MessageExecutorHelper.abi.Events["Transmitted"].ID:
		return _MessageExecutorHelper.ParseTransmitted(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (MessageExecutorHelperConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (MessageExecutorHelperFeesWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa8")
}

func (MessageExecutorHelperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (MessageExecutorHelperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (MessageExecutorHelperTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (_MessageExecutorHelper *MessageExecutorHelper) Address() common.Address {
	return _MessageExecutorHelper.address
}

type MessageExecutorHelperInterface interface {
	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SOffRamp(opts *bind.CallOpts) (common.Address, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Report(opts *bind.TransactOpts, executableMessages []byte) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*MessageExecutorHelperConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*MessageExecutorHelperConfigSet, error)

	FilterFeesWithdrawn(opts *bind.FilterOpts) (*MessageExecutorHelperFeesWithdrawnIterator, error)

	WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperFeesWithdrawn) (event.Subscription, error)

	ParseFeesWithdrawn(log types.Log) (*MessageExecutorHelperFeesWithdrawn, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorHelperOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*MessageExecutorHelperOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorHelperOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*MessageExecutorHelperOwnershipTransferred, error)

	FilterTransmitted(opts *bind.FilterOpts) (*MessageExecutorHelperTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*MessageExecutorHelperTransmitted, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

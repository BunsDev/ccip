// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package blob_verifier

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type BlobVerifierInterfaceBlobVerifierConfig struct {
	OnRamps          []common.Address
	MinSeqNrByOnRamp []uint64
}

type CCIPInterval struct {
	Min uint64
	Max uint64
}

type CCIPRelayReport struct {
	OnRamps     []common.Address
	Intervals   []CCIPInterval
	MerkleRoots [][32]byte
	RootOfRoots [32]byte
}

var BlobVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeWithoutAFNSignal\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAFNSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadHealthConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfiguration\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval\",\"name\":\"interval\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"InvalidRelayReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StaleAFNHeartbeat\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"UnsupportedOnRamp\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"AFNMaxHeartbeatTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"indexed\":false,\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"BlobVerifierConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOURCE_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSecondsWithoutAFNHeartbeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"isHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootToReset\",\"type\":\"bytes32[]\"}],\"name\":\"resetUnblessedRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setMaxSecondsWithoutAFNHeartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"innerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"innerProofFlagBits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"outerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"outerProofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

var BlobVerifierABI = BlobVerifierMetaData.ABI

var BlobVerifierBin = BlobVerifierMetaData.Bin

func DeployBlobVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, chainId *big.Int, sourceChainId *big.Int, afn common.Address, maxTimeWithoutAFNSignal *big.Int, config BlobVerifierInterfaceBlobVerifierConfig) (common.Address, *types.Transaction, *BlobVerifier, error) {
	parsed, err := BlobVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BlobVerifierBin), backend, chainId, sourceChainId, afn, maxTimeWithoutAFNSignal, config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BlobVerifier{BlobVerifierCaller: BlobVerifierCaller{contract: contract}, BlobVerifierTransactor: BlobVerifierTransactor{contract: contract}, BlobVerifierFilterer: BlobVerifierFilterer{contract: contract}}, nil
}

type BlobVerifier struct {
	address common.Address
	abi     abi.ABI
	BlobVerifierCaller
	BlobVerifierTransactor
	BlobVerifierFilterer
}

type BlobVerifierCaller struct {
	contract *bind.BoundContract
}

type BlobVerifierTransactor struct {
	contract *bind.BoundContract
}

type BlobVerifierFilterer struct {
	contract *bind.BoundContract
}

type BlobVerifierSession struct {
	Contract     *BlobVerifier
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type BlobVerifierCallerSession struct {
	Contract *BlobVerifierCaller
	CallOpts bind.CallOpts
}

type BlobVerifierTransactorSession struct {
	Contract     *BlobVerifierTransactor
	TransactOpts bind.TransactOpts
}

type BlobVerifierRaw struct {
	Contract *BlobVerifier
}

type BlobVerifierCallerRaw struct {
	Contract *BlobVerifierCaller
}

type BlobVerifierTransactorRaw struct {
	Contract *BlobVerifierTransactor
}

func NewBlobVerifier(address common.Address, backend bind.ContractBackend) (*BlobVerifier, error) {
	abi, err := abi.JSON(strings.NewReader(BlobVerifierABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindBlobVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BlobVerifier{address: address, abi: abi, BlobVerifierCaller: BlobVerifierCaller{contract: contract}, BlobVerifierTransactor: BlobVerifierTransactor{contract: contract}, BlobVerifierFilterer: BlobVerifierFilterer{contract: contract}}, nil
}

func NewBlobVerifierCaller(address common.Address, caller bind.ContractCaller) (*BlobVerifierCaller, error) {
	contract, err := bindBlobVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierCaller{contract: contract}, nil
}

func NewBlobVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*BlobVerifierTransactor, error) {
	contract, err := bindBlobVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierTransactor{contract: contract}, nil
}

func NewBlobVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*BlobVerifierFilterer, error) {
	contract, err := bindBlobVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierFilterer{contract: contract}, nil
}

func bindBlobVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BlobVerifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_BlobVerifier *BlobVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlobVerifier.Contract.BlobVerifierCaller.contract.Call(opts, result, method, params...)
}

func (_BlobVerifier *BlobVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifier.Contract.BlobVerifierTransactor.contract.Transfer(opts)
}

func (_BlobVerifier *BlobVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlobVerifier.Contract.BlobVerifierTransactor.contract.Transact(opts, method, params...)
}

func (_BlobVerifier *BlobVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlobVerifier.Contract.contract.Call(opts, result, method, params...)
}

func (_BlobVerifier *BlobVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifier.Contract.contract.Transfer(opts)
}

func (_BlobVerifier *BlobVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlobVerifier.Contract.contract.Transact(opts, method, params...)
}

func (_BlobVerifier *BlobVerifierCaller) CHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) CHAINID() (*big.Int, error) {
	return _BlobVerifier.Contract.CHAINID(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCallerSession) CHAINID() (*big.Int, error) {
	return _BlobVerifier.Contract.CHAINID(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCaller) SOURCECHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "SOURCE_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) SOURCECHAINID() (*big.Int, error) {
	return _BlobVerifier.Contract.SOURCECHAINID(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCallerSession) SOURCECHAINID() (*big.Int, error) {
	return _BlobVerifier.Contract.SOURCECHAINID(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) GetAFN() (common.Address, error) {
	return _BlobVerifier.Contract.GetAFN(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCallerSession) GetAFN() (common.Address, error) {
	return _BlobVerifier.Contract.GetAFN(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCaller) GetConfig(opts *bind.CallOpts) (BlobVerifierInterfaceBlobVerifierConfig, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "getConfig")

	if err != nil {
		return *new(BlobVerifierInterfaceBlobVerifierConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(BlobVerifierInterfaceBlobVerifierConfig)).(*BlobVerifierInterfaceBlobVerifierConfig)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) GetConfig() (BlobVerifierInterfaceBlobVerifierConfig, error) {
	return _BlobVerifier.Contract.GetConfig(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCallerSession) GetConfig() (BlobVerifierInterfaceBlobVerifierConfig, error) {
	return _BlobVerifier.Contract.GetConfig(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCaller) GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "getExpectedNextSequenceNumber", onRamp)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _BlobVerifier.Contract.GetExpectedNextSequenceNumber(&_BlobVerifier.CallOpts, onRamp)
}

func (_BlobVerifier *BlobVerifierCallerSession) GetExpectedNextSequenceNumber(onRamp common.Address) (uint64, error) {
	return _BlobVerifier.Contract.GetExpectedNextSequenceNumber(&_BlobVerifier.CallOpts, onRamp)
}

func (_BlobVerifier *BlobVerifierCaller) GetMaxSecondsWithoutAFNHeartbeat(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "getMaxSecondsWithoutAFNHeartbeat")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) GetMaxSecondsWithoutAFNHeartbeat() (*big.Int, error) {
	return _BlobVerifier.Contract.GetMaxSecondsWithoutAFNHeartbeat(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCallerSession) GetMaxSecondsWithoutAFNHeartbeat() (*big.Int, error) {
	return _BlobVerifier.Contract.GetMaxSecondsWithoutAFNHeartbeat(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _BlobVerifier.Contract.GetMerkleRoot(&_BlobVerifier.CallOpts, root)
}

func (_BlobVerifier *BlobVerifierCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _BlobVerifier.Contract.GetMerkleRoot(&_BlobVerifier.CallOpts, root)
}

func (_BlobVerifier *BlobVerifierCaller) IsHealthy(opts *bind.CallOpts, timeNow *big.Int) (bool, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "isHealthy", timeNow)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) IsHealthy(timeNow *big.Int) (bool, error) {
	return _BlobVerifier.Contract.IsHealthy(&_BlobVerifier.CallOpts, timeNow)
}

func (_BlobVerifier *BlobVerifierCallerSession) IsHealthy(timeNow *big.Int) (bool, error) {
	return _BlobVerifier.Contract.IsHealthy(&_BlobVerifier.CallOpts, timeNow)
}

func (_BlobVerifier *BlobVerifierCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_BlobVerifier *BlobVerifierSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _BlobVerifier.Contract.LatestConfigDetails(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _BlobVerifier.Contract.LatestConfigDetails(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_BlobVerifier *BlobVerifierSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _BlobVerifier.Contract.LatestConfigDigestAndEpoch(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _BlobVerifier.Contract.LatestConfigDigestAndEpoch(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCaller) MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "merkleRoot", leaves, proofs, proofFlagBits)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _BlobVerifier.Contract.MerkleRoot(&_BlobVerifier.CallOpts, leaves, proofs, proofFlagBits)
}

func (_BlobVerifier *BlobVerifierCallerSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _BlobVerifier.Contract.MerkleRoot(&_BlobVerifier.CallOpts, leaves, proofs, proofFlagBits)
}

func (_BlobVerifier *BlobVerifierCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) Owner() (common.Address, error) {
	return _BlobVerifier.Contract.Owner(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCallerSession) Owner() (common.Address, error) {
	return _BlobVerifier.Contract.Owner(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) Paused() (bool, error) {
	return _BlobVerifier.Contract.Paused(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCallerSession) Paused() (bool, error) {
	return _BlobVerifier.Contract.Paused(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) Transmitters() ([]common.Address, error) {
	return _BlobVerifier.Contract.Transmitters(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCallerSession) Transmitters() ([]common.Address, error) {
	return _BlobVerifier.Contract.Transmitters(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) TypeAndVersion() (string, error) {
	return _BlobVerifier.Contract.TypeAndVersion(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCallerSession) TypeAndVersion() (string, error) {
	return _BlobVerifier.Contract.TypeAndVersion(&_BlobVerifier.CallOpts)
}

func (_BlobVerifier *BlobVerifierCaller) Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifier.contract.Call(opts, &out, "verify", hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifier *BlobVerifierSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _BlobVerifier.Contract.Verify(&_BlobVerifier.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_BlobVerifier *BlobVerifierCallerSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _BlobVerifier.Contract.Verify(&_BlobVerifier.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_BlobVerifier *BlobVerifierTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifier.contract.Transact(opts, "acceptOwnership")
}

func (_BlobVerifier *BlobVerifierSession) AcceptOwnership() (*types.Transaction, error) {
	return _BlobVerifier.Contract.AcceptOwnership(&_BlobVerifier.TransactOpts)
}

func (_BlobVerifier *BlobVerifierTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _BlobVerifier.Contract.AcceptOwnership(&_BlobVerifier.TransactOpts)
}

func (_BlobVerifier *BlobVerifierTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifier.contract.Transact(opts, "pause")
}

func (_BlobVerifier *BlobVerifierSession) Pause() (*types.Transaction, error) {
	return _BlobVerifier.Contract.Pause(&_BlobVerifier.TransactOpts)
}

func (_BlobVerifier *BlobVerifierTransactorSession) Pause() (*types.Transaction, error) {
	return _BlobVerifier.Contract.Pause(&_BlobVerifier.TransactOpts)
}

func (_BlobVerifier *BlobVerifierTransactor) ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifier.contract.Transact(opts, "resetUnblessedRoots", rootToReset)
}

func (_BlobVerifier *BlobVerifierSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifier.Contract.ResetUnblessedRoots(&_BlobVerifier.TransactOpts, rootToReset)
}

func (_BlobVerifier *BlobVerifierTransactorSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifier.Contract.ResetUnblessedRoots(&_BlobVerifier.TransactOpts, rootToReset)
}

func (_BlobVerifier *BlobVerifierTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _BlobVerifier.contract.Transact(opts, "setAFN", afn)
}

func (_BlobVerifier *BlobVerifierSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _BlobVerifier.Contract.SetAFN(&_BlobVerifier.TransactOpts, afn)
}

func (_BlobVerifier *BlobVerifierTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _BlobVerifier.Contract.SetAFN(&_BlobVerifier.TransactOpts, afn)
}

func (_BlobVerifier *BlobVerifierTransactor) SetConfig(opts *bind.TransactOpts, config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifier.contract.Transact(opts, "setConfig", config)
}

func (_BlobVerifier *BlobVerifierSession) SetConfig(config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifier.Contract.SetConfig(&_BlobVerifier.TransactOpts, config)
}

func (_BlobVerifier *BlobVerifierTransactorSession) SetConfig(config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifier.Contract.SetConfig(&_BlobVerifier.TransactOpts, config)
}

func (_BlobVerifier *BlobVerifierTransactor) SetConfig0(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifier.contract.Transact(opts, "setConfig0", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifier *BlobVerifierSession) SetConfig0(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifier.Contract.SetConfig0(&_BlobVerifier.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifier *BlobVerifierTransactorSession) SetConfig0(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifier.Contract.SetConfig0(&_BlobVerifier.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifier *BlobVerifierTransactor) SetMaxSecondsWithoutAFNHeartbeat(opts *bind.TransactOpts, newTime *big.Int) (*types.Transaction, error) {
	return _BlobVerifier.contract.Transact(opts, "setMaxSecondsWithoutAFNHeartbeat", newTime)
}

func (_BlobVerifier *BlobVerifierSession) SetMaxSecondsWithoutAFNHeartbeat(newTime *big.Int) (*types.Transaction, error) {
	return _BlobVerifier.Contract.SetMaxSecondsWithoutAFNHeartbeat(&_BlobVerifier.TransactOpts, newTime)
}

func (_BlobVerifier *BlobVerifierTransactorSession) SetMaxSecondsWithoutAFNHeartbeat(newTime *big.Int) (*types.Transaction, error) {
	return _BlobVerifier.Contract.SetMaxSecondsWithoutAFNHeartbeat(&_BlobVerifier.TransactOpts, newTime)
}

func (_BlobVerifier *BlobVerifierTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _BlobVerifier.contract.Transact(opts, "transferOwnership", to)
}

func (_BlobVerifier *BlobVerifierSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _BlobVerifier.Contract.TransferOwnership(&_BlobVerifier.TransactOpts, to)
}

func (_BlobVerifier *BlobVerifierTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _BlobVerifier.Contract.TransferOwnership(&_BlobVerifier.TransactOpts, to)
}

func (_BlobVerifier *BlobVerifierTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifier.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifier *BlobVerifierSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifier.Contract.Transmit(&_BlobVerifier.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifier *BlobVerifierTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifier.Contract.Transmit(&_BlobVerifier.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifier *BlobVerifierTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifier.contract.Transact(opts, "unpause")
}

func (_BlobVerifier *BlobVerifierSession) Unpause() (*types.Transaction, error) {
	return _BlobVerifier.Contract.Unpause(&_BlobVerifier.TransactOpts)
}

func (_BlobVerifier *BlobVerifierTransactorSession) Unpause() (*types.Transaction, error) {
	return _BlobVerifier.Contract.Unpause(&_BlobVerifier.TransactOpts)
}

type BlobVerifierAFNMaxHeartbeatTimeSetIterator struct {
	Event *BlobVerifierAFNMaxHeartbeatTimeSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierAFNMaxHeartbeatTimeSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierAFNMaxHeartbeatTimeSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierAFNMaxHeartbeatTimeSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierAFNMaxHeartbeatTimeSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierAFNMaxHeartbeatTimeSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierAFNMaxHeartbeatTimeSet struct {
	OldTime *big.Int
	NewTime *big.Int
	Raw     types.Log
}

func (_BlobVerifier *BlobVerifierFilterer) FilterAFNMaxHeartbeatTimeSet(opts *bind.FilterOpts) (*BlobVerifierAFNMaxHeartbeatTimeSetIterator, error) {

	logs, sub, err := _BlobVerifier.contract.FilterLogs(opts, "AFNMaxHeartbeatTimeSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierAFNMaxHeartbeatTimeSetIterator{contract: _BlobVerifier.contract, event: "AFNMaxHeartbeatTimeSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifier *BlobVerifierFilterer) WatchAFNMaxHeartbeatTimeSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierAFNMaxHeartbeatTimeSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifier.contract.WatchLogs(opts, "AFNMaxHeartbeatTimeSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierAFNMaxHeartbeatTimeSet)
				if err := _BlobVerifier.contract.UnpackLog(event, "AFNMaxHeartbeatTimeSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifier *BlobVerifierFilterer) ParseAFNMaxHeartbeatTimeSet(log types.Log) (*BlobVerifierAFNMaxHeartbeatTimeSet, error) {
	event := new(BlobVerifierAFNMaxHeartbeatTimeSet)
	if err := _BlobVerifier.contract.UnpackLog(event, "AFNMaxHeartbeatTimeSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierAFNSetIterator struct {
	Event *BlobVerifierAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierAFNSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_BlobVerifier *BlobVerifierFilterer) FilterAFNSet(opts *bind.FilterOpts) (*BlobVerifierAFNSetIterator, error) {

	logs, sub, err := _BlobVerifier.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierAFNSetIterator{contract: _BlobVerifier.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifier *BlobVerifierFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierAFNSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifier.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierAFNSet)
				if err := _BlobVerifier.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifier *BlobVerifierFilterer) ParseAFNSet(log types.Log) (*BlobVerifierAFNSet, error) {
	event := new(BlobVerifierAFNSet)
	if err := _BlobVerifier.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierBlobVerifierConfigSetIterator struct {
	Event *BlobVerifierBlobVerifierConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierBlobVerifierConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierBlobVerifierConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierBlobVerifierConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierBlobVerifierConfigSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierBlobVerifierConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierBlobVerifierConfigSet struct {
	Config BlobVerifierInterfaceBlobVerifierConfig
	Raw    types.Log
}

func (_BlobVerifier *BlobVerifierFilterer) FilterBlobVerifierConfigSet(opts *bind.FilterOpts) (*BlobVerifierBlobVerifierConfigSetIterator, error) {

	logs, sub, err := _BlobVerifier.contract.FilterLogs(opts, "BlobVerifierConfigSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierBlobVerifierConfigSetIterator{contract: _BlobVerifier.contract, event: "BlobVerifierConfigSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifier *BlobVerifierFilterer) WatchBlobVerifierConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierBlobVerifierConfigSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifier.contract.WatchLogs(opts, "BlobVerifierConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierBlobVerifierConfigSet)
				if err := _BlobVerifier.contract.UnpackLog(event, "BlobVerifierConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifier *BlobVerifierFilterer) ParseBlobVerifierConfigSet(log types.Log) (*BlobVerifierBlobVerifierConfigSet, error) {
	event := new(BlobVerifierBlobVerifierConfigSet)
	if err := _BlobVerifier.contract.UnpackLog(event, "BlobVerifierConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierConfigSetIterator struct {
	Event *BlobVerifierConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierConfigSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_BlobVerifier *BlobVerifierFilterer) FilterConfigSet(opts *bind.FilterOpts) (*BlobVerifierConfigSetIterator, error) {

	logs, sub, err := _BlobVerifier.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierConfigSetIterator{contract: _BlobVerifier.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifier *BlobVerifierFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierConfigSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifier.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierConfigSet)
				if err := _BlobVerifier.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifier *BlobVerifierFilterer) ParseConfigSet(log types.Log) (*BlobVerifierConfigSet, error) {
	event := new(BlobVerifierConfigSet)
	if err := _BlobVerifier.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierOwnershipTransferRequestedIterator struct {
	Event *BlobVerifierOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_BlobVerifier *BlobVerifierFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifier.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierOwnershipTransferRequestedIterator{contract: _BlobVerifier.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_BlobVerifier *BlobVerifierFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *BlobVerifierOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifier.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierOwnershipTransferRequested)
				if err := _BlobVerifier.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifier *BlobVerifierFilterer) ParseOwnershipTransferRequested(log types.Log) (*BlobVerifierOwnershipTransferRequested, error) {
	event := new(BlobVerifierOwnershipTransferRequested)
	if err := _BlobVerifier.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierOwnershipTransferredIterator struct {
	Event *BlobVerifierOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_BlobVerifier *BlobVerifierFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifier.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierOwnershipTransferredIterator{contract: _BlobVerifier.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_BlobVerifier *BlobVerifierFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BlobVerifierOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifier.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierOwnershipTransferred)
				if err := _BlobVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifier *BlobVerifierFilterer) ParseOwnershipTransferred(log types.Log) (*BlobVerifierOwnershipTransferred, error) {
	event := new(BlobVerifierOwnershipTransferred)
	if err := _BlobVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierPausedIterator struct {
	Event *BlobVerifierPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierPausedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_BlobVerifier *BlobVerifierFilterer) FilterPaused(opts *bind.FilterOpts) (*BlobVerifierPausedIterator, error) {

	logs, sub, err := _BlobVerifier.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierPausedIterator{contract: _BlobVerifier.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_BlobVerifier *BlobVerifierFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierPaused) (event.Subscription, error) {

	logs, sub, err := _BlobVerifier.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierPaused)
				if err := _BlobVerifier.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifier *BlobVerifierFilterer) ParsePaused(log types.Log) (*BlobVerifierPaused, error) {
	event := new(BlobVerifierPaused)
	if err := _BlobVerifier.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierReportAcceptedIterator struct {
	Event *BlobVerifierReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierReportAccepted struct {
	Report CCIPRelayReport
	Raw    types.Log
}

func (_BlobVerifier *BlobVerifierFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*BlobVerifierReportAcceptedIterator, error) {

	logs, sub, err := _BlobVerifier.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierReportAcceptedIterator{contract: _BlobVerifier.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_BlobVerifier *BlobVerifierFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *BlobVerifierReportAccepted) (event.Subscription, error) {

	logs, sub, err := _BlobVerifier.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierReportAccepted)
				if err := _BlobVerifier.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifier *BlobVerifierFilterer) ParseReportAccepted(log types.Log) (*BlobVerifierReportAccepted, error) {
	event := new(BlobVerifierReportAccepted)
	if err := _BlobVerifier.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierTransmittedIterator struct {
	Event *BlobVerifierTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierTransmittedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_BlobVerifier *BlobVerifierFilterer) FilterTransmitted(opts *bind.FilterOpts) (*BlobVerifierTransmittedIterator, error) {

	logs, sub, err := _BlobVerifier.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierTransmittedIterator{contract: _BlobVerifier.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_BlobVerifier *BlobVerifierFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *BlobVerifierTransmitted) (event.Subscription, error) {

	logs, sub, err := _BlobVerifier.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierTransmitted)
				if err := _BlobVerifier.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifier *BlobVerifierFilterer) ParseTransmitted(log types.Log) (*BlobVerifierTransmitted, error) {
	event := new(BlobVerifierTransmitted)
	if err := _BlobVerifier.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierUnpausedIterator struct {
	Event *BlobVerifierUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierUnpausedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_BlobVerifier *BlobVerifierFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BlobVerifierUnpausedIterator, error) {

	logs, sub, err := _BlobVerifier.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierUnpausedIterator{contract: _BlobVerifier.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_BlobVerifier *BlobVerifierFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierUnpaused) (event.Subscription, error) {

	logs, sub, err := _BlobVerifier.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierUnpaused)
				if err := _BlobVerifier.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifier *BlobVerifierFilterer) ParseUnpaused(log types.Log) (*BlobVerifierUnpaused, error) {
	event := new(BlobVerifierUnpaused)
	if err := _BlobVerifier.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_BlobVerifier *BlobVerifier) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _BlobVerifier.abi.Events["AFNMaxHeartbeatTimeSet"].ID:
		return _BlobVerifier.ParseAFNMaxHeartbeatTimeSet(log)
	case _BlobVerifier.abi.Events["AFNSet"].ID:
		return _BlobVerifier.ParseAFNSet(log)
	case _BlobVerifier.abi.Events["BlobVerifierConfigSet"].ID:
		return _BlobVerifier.ParseBlobVerifierConfigSet(log)
	case _BlobVerifier.abi.Events["ConfigSet"].ID:
		return _BlobVerifier.ParseConfigSet(log)
	case _BlobVerifier.abi.Events["OwnershipTransferRequested"].ID:
		return _BlobVerifier.ParseOwnershipTransferRequested(log)
	case _BlobVerifier.abi.Events["OwnershipTransferred"].ID:
		return _BlobVerifier.ParseOwnershipTransferred(log)
	case _BlobVerifier.abi.Events["Paused"].ID:
		return _BlobVerifier.ParsePaused(log)
	case _BlobVerifier.abi.Events["ReportAccepted"].ID:
		return _BlobVerifier.ParseReportAccepted(log)
	case _BlobVerifier.abi.Events["Transmitted"].ID:
		return _BlobVerifier.ParseTransmitted(log)
	case _BlobVerifier.abi.Events["Unpaused"].ID:
		return _BlobVerifier.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (BlobVerifierAFNMaxHeartbeatTimeSet) Topic() common.Hash {
	return common.HexToHash("0x72e72b3dfd44fb4d803f52b2d895c7347b912da657d0f77599a0afc26956c251")
}

func (BlobVerifierAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (BlobVerifierBlobVerifierConfigSet) Topic() common.Hash {
	return common.HexToHash("0x6a58c52cba3b1b32bf483778bd30d3930b0930f34aa7e416643023a4f8f7130a")
}

func (BlobVerifierConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (BlobVerifierOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (BlobVerifierOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (BlobVerifierPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (BlobVerifierReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef")
}

func (BlobVerifierTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (BlobVerifierUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_BlobVerifier *BlobVerifier) Address() common.Address {
	return _BlobVerifier.address
}

type BlobVerifierInterface interface {
	CHAINID(opts *bind.CallOpts) (*big.Int, error)

	SOURCECHAINID(opts *bind.CallOpts) (*big.Int, error)

	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetConfig(opts *bind.CallOpts) (BlobVerifierInterfaceBlobVerifierConfig, error)

	GetExpectedNextSequenceNumber(opts *bind.CallOpts, onRamp common.Address) (uint64, error)

	GetMaxSecondsWithoutAFNHeartbeat(opts *bind.CallOpts) (*big.Int, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	IsHealthy(opts *bind.CallOpts, timeNow *big.Int) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error)

	SetConfig0(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	SetMaxSecondsWithoutAFNHeartbeat(opts *bind.TransactOpts, newTime *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterAFNMaxHeartbeatTimeSet(opts *bind.FilterOpts) (*BlobVerifierAFNMaxHeartbeatTimeSetIterator, error)

	WatchAFNMaxHeartbeatTimeSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierAFNMaxHeartbeatTimeSet) (event.Subscription, error)

	ParseAFNMaxHeartbeatTimeSet(log types.Log) (*BlobVerifierAFNMaxHeartbeatTimeSet, error)

	FilterAFNSet(opts *bind.FilterOpts) (*BlobVerifierAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*BlobVerifierAFNSet, error)

	FilterBlobVerifierConfigSet(opts *bind.FilterOpts) (*BlobVerifierBlobVerifierConfigSetIterator, error)

	WatchBlobVerifierConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierBlobVerifierConfigSet) (event.Subscription, error)

	ParseBlobVerifierConfigSet(log types.Log) (*BlobVerifierBlobVerifierConfigSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*BlobVerifierConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*BlobVerifierConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *BlobVerifierOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*BlobVerifierOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BlobVerifierOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*BlobVerifierOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*BlobVerifierPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*BlobVerifierPaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*BlobVerifierReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *BlobVerifierReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*BlobVerifierReportAccepted, error)

	FilterTransmitted(opts *bind.FilterOpts) (*BlobVerifierTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *BlobVerifierTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*BlobVerifierTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*BlobVerifierUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*BlobVerifierUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

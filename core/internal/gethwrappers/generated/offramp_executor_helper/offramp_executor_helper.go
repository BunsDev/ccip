// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package offramp_executor_helper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

var OffRampExecutorHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"needFee\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNeedFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOffRamp\",\"outputs\":[{\"internalType\":\"contractOffRampInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"executableMessages\",\"type\":\"bytes\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setNeedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAccumulatedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162002ed138038062002ed183398101604081905262000034916200019e565b8181600133806000816200008f5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c257620000c281620000f3565b50505015156080526001600160a01b039190911660a0526008805460ff191691151591909117905550620001ec9050565b336001600160a01b038216036200014d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000086565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008060408385031215620001b257600080fd5b82516001600160a01b0381168114620001ca57600080fd5b60208401519092508015158114620001e157600080fd5b809150509250929050565b60805160a051612cb8620002196000396000818161023601526116df015260006105c70152612cb86000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063afcb95d71161008c578063c1cc9f0d11610066578063c1cc9f0d14610234578063c2d8841c1461025a578063e3d0e7121461026d578063f2fde38b1461028057600080fd5b8063afcb95d7146101ee578063b1dc65a41461020e578063b57671661461022157600080fd5b806379ba5097116100c857806379ba509714610162578063814118341461016a57806381ff70481461017f5780638da5cb5b146101af57600080fd5b8063181f5a77146100ef5780633f48b73a1461013757806359e96b5b1461014d575b600080fd5b604080518082018252601581527f4f666652616d704578656375746f7220312e302e3000000000000000000000006020820152905161012e9190611d38565b60405180910390f35b60085460ff16604051901515815260200161012e565b61016061015b366004611d6d565b610293565b005b610160610319565b61017261041b565b60405161012e9190611dff565b6004546002546040805163ffffffff8085168252640100000000909404909316602084015282015260600161012e565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012e565b60408051600181526000602082018190529181019190915260600161012e565b61016061021c366004611e5e565b61048a565b61016061022f3660046120cc565b610b33565b7f00000000000000000000000000000000000000000000000000000000000000006101c9565b610160610268366004612117565b610b42565b61016061027b3660046121fe565b610b7b565b61016061028e3660046122cb565b611560565b61029b611571565b6102bc73ffffffffffffffffffffffffffffffffffffffff841683836115f4565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290527f5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa89060600160405180910390a1505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461039f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6060600780548060200260200160405190810160405280929190818152602001828054801561048057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610455575b5050505050905090565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c0135916104e091849163ffffffff851691908e908e908190840183828082843760009201919091525061168692505050565b6040805183815262ffffff600884901c1660208201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16040805160608101825260025480825260035460ff808216602085015261010090910416928201929092529083146105b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f636f6e666967446967657374206d69736d6174636800000000000000000000006044820152606401610396565b6105c38b8b8b8b8b8b611750565b60007f000000000000000000000000000000000000000000000000000000000000000015610620576002826020015183604001516106019190612346565b61060b919061236b565b610616906001612346565b60ff169050610636565b6020820151610630906001612346565b60ff1690505b88811461069f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e6174757265730000000000006044820152606401610396565b888714610708576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e00006044820152606401610396565b3360009081526005602090815260408083208151808301909252805460ff8082168452929391929184019161010090910416600281111561074b5761074b6123b4565b600281111561075c5761075c6123b4565b9052509050600281602001516002811115610779576107796123b4565b1480156107c057506007816000015160ff168154811061079b5761079b6122e8565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f756e617574686f72697a6564207472616e736d697474657200000000000000006044820152606401610396565b50505050506000888860405161083d9291906123e3565b604051908190038120610854918c906020016123f3565b604051602081830303815290604052805190602001209050610874611c9f565b604080518082019091526000808252602082015260005b88811015610b115760006001858884602081106108aa576108aa6122e8565b6108b791901a601b612346565b8d8d868181106108c9576108c96122e8565b905060200201358c8c878181106108e2576108e26122e8565b905060200201356040516000815260200160405260405161091f949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610941573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff811660009081526005602090815290849020838501909452835460ff808216855292965092945084019161010090041660028111156109c1576109c16123b4565b60028111156109d2576109d26123b4565b90525092506001836020015160028111156109ef576109ef6123b4565b14610a56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e00006044820152606401610396565b8251849060ff16601f8110610a6d57610a6d6122e8565b602002015115610ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f6e2d756e69717565207369676e61747572650000000000000000000000006044820152606401610396565b600184846000015160ff16601f8110610af457610af46122e8565b911515602090920201525080610b098161240f565b91505061088b565b5050505063ffffffff8110610b2857610b28612447565b505050505050505050565b610b3f60008083611686565b50565b610b4a611571565b600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b855185518560ff16601f831115610bee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e657273000000000000000000000000000000006044820152606401610396565b60008111610c58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610396565b818314610ce6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e000000000000000000000000000000000000000000000000000000006064820152608401610396565b610cf1816003612476565b8311610d59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610396565b610d61611571565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b60065415610f5457600654600090610db9906001906124b3565b9050600060068281548110610dd057610dd06122e8565b60009182526020822001546007805473ffffffffffffffffffffffffffffffffffffffff90921693509084908110610e0a57610e0a6122e8565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff85811684526005909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811690915592909116808452922080549091169055600680549192509080610e8a57610e8a6124ca565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190556007805480610ef357610ef36124ca565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550610d9f915050565b60005b8151518110156113bb5760006005600084600001518481518110610f7d57610f7d6122e8565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115610fc757610fc76123b4565b1461102e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610396565b6040805180820190915260ff8216815260016020820152825180516005916000918590811061105f5761105f6122e8565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611100576111006123b4565b0217905550600091506111109050565b600560008460200151848151811061112a5761112a6122e8565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115611174576111746123b4565b146111db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610396565b6040805180820190915260ff82168152602081016002815250600560008460200151848151811061120e5761120e6122e8565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016176101008360028111156112af576112af6123b4565b0217905550508251805160069250839081106112cd576112cd6122e8565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921790915582015180516007919083908110611349576113496122e8565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055806113b38161240f565b915050610f57565b506040810151600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600480547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff43811682029283178555908304811693600193909260009261144d9286929082169116176124f9565b92506101000a81548163ffffffff021916908363ffffffff1602179055506114ac4630600460009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a00151611807565b6002819055825180516003805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560045460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e059861154b988b98919763ffffffff909216969095919491939192612521565b60405180910390a15050505050505050505050565b611568611571565b610b3f816118b2565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610396565b565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526116819084906119a7565b505050565b60008180602001905181019061169c91906126c6565b6008546040517f6642031d00000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691636642031d9161171891859160ff16906004016129b5565b600060405180830381600087803b15801561173257600080fd5b505af1158015611746573d6000803e3d6000fd5b5050505050505050565b600061175d826020612476565b611768856020612476565b61177488610144612bc5565b61177e9190612bc5565b6117889190612bc5565b611793906000612bc5565b90503681146117fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d6174636800000000000000006044820152606401610396565b50505050505050565b6000808a8a8a8a8a8a8a8a8a60405160200161182b99989796959493929190612bdd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff821603611931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610396565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000611a09826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ab39092919063ffffffff16565b8051909150156116815780806020019051810190611a279190612c72565b611681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610396565b6060611ac28484600085611acc565b90505b9392505050565b606082471015611b5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610396565b843b611bc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610396565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611bef9190612c8f565b60006040518083038185875af1925050503d8060008114611c2c576040519150601f19603f3d011682016040523d82523d6000602084013e611c31565b606091505b5091509150611c41828286611c4c565b979650505050505050565b60608315611c5b575081611ac5565b825115611c6b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103969190611d38565b604051806103e00160405280601f906020820280368337509192915050565b60005b83811015611cd9578181015183820152602001611cc1565b83811115611ce8576000848401525b50505050565b60008151808452611d06816020860160208601611cbe565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611ac56020830184611cee565b73ffffffffffffffffffffffffffffffffffffffff81168114610b3f57600080fd5b600080600060608486031215611d8257600080fd5b8335611d8d81611d4b565b92506020840135611d9d81611d4b565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015611df457815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611dc2565b509495945050505050565b602081526000611ac56020830184611dae565b60008083601f840112611e2457600080fd5b50813567ffffffffffffffff811115611e3c57600080fd5b6020830191508360208260051b8501011115611e5757600080fd5b9250929050565b60008060008060008060008060e0898b031215611e7a57600080fd5b606089018a811115611e8b57600080fd5b8998503567ffffffffffffffff80821115611ea557600080fd5b818b0191508b601f830112611eb957600080fd5b813581811115611ec857600080fd5b8c6020828501011115611eda57600080fd5b6020830199508098505060808b0135915080821115611ef857600080fd5b611f048c838d01611e12565b909750955060a08b0135915080821115611f1d57600080fd5b50611f2a8b828c01611e12565b999c989b50969995989497949560c00135949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611f9557611f95611f43565b60405290565b6040516080810167ffffffffffffffff81118282101715611f9557611f95611f43565b60405160c0810167ffffffffffffffff81118282101715611f9557611f95611f43565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561202857612028611f43565b604052919050565b600067ffffffffffffffff82111561204a5761204a611f43565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261208757600080fd5b813561209a61209582612030565b611fe1565b8181528460208386010111156120af57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156120de57600080fd5b813567ffffffffffffffff8111156120f557600080fd5b61210184828501612076565b949350505050565b8015158114610b3f57600080fd5b60006020828403121561212957600080fd5b8135611ac581612109565b600067ffffffffffffffff82111561214e5761214e611f43565b5060051b60200190565b600082601f83011261216957600080fd5b8135602061217961209583612134565b82815260059290921b8401810191818101908684111561219857600080fd5b8286015b848110156121bc5780356121af81611d4b565b835291830191830161219c565b509695505050505050565b803560ff811681146121d857600080fd5b919050565b67ffffffffffffffff81168114610b3f57600080fd5b80356121d8816121dd565b60008060008060008060c0878903121561221757600080fd5b863567ffffffffffffffff8082111561222f57600080fd5b61223b8a838b01612158565b9750602089013591508082111561225157600080fd5b61225d8a838b01612158565b965061226b60408a016121c7565b9550606089013591508082111561228157600080fd5b61228d8a838b01612076565b945061229b60808a016121f3565b935060a08901359150808211156122b157600080fd5b506122be89828a01612076565b9150509295509295509295565b6000602082840312156122dd57600080fd5b8135611ac581611d4b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff84168060ff0382111561236357612363612317565b019392505050565b600060ff8316806123a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361244057612440612317565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124ae576124ae612317565b500290565b6000828210156124c5576124c5612317565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600063ffffffff80831681851680830382111561251857612518612317565b01949350505050565b600061012063ffffffff808d1684528b6020850152808b166040850152508060608401526125518184018a611dae565b905082810360808401526125658189611dae565b905060ff871660a084015282810360c08401526125828187611cee565b905067ffffffffffffffff851660e08401528281036101008401526125a78185611cee565b9c9b505050505050505050505050565b80516121d881611d4b565b600082601f8301126125d357600080fd5b815160206125e361209583612134565b82815260059290921b8401810191818101908684111561260257600080fd5b8286015b848110156121bc57805161261981611d4b565b8352918301918301612606565b600082601f83011261263757600080fd5b8151602061264761209583612134565b82815260059290921b8401810191818101908684111561266657600080fd5b8286015b848110156121bc578051835291830191830161266a565b600082601f83011261269257600080fd5b81516126a061209582612030565b8181528460208386010111156126b557600080fd5b612101826020830160208701611cbe565b6000602082840312156126d857600080fd5b815167ffffffffffffffff8111156126ef57600080fd5b60608184018503121561270157600080fd5b612709611f72565b8184015167ffffffffffffffff81111561272257600080fd5b85601f8285880101011261273557600080fd5b80838601015161274761209582612134565b808282526020820191508860208460051b86898c01010101111561276a57600080fd5b602084878a0101015b60208460051b86898c0101010181101561293d57805167ffffffffffffffff81111561279e57600080fd5b8988018601016080818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00112156127d657600080fd5b6127de611f9b565b6020820151815260408201516127f3816121dd565b6020820152606082015161280681611d4b565b6040820152608082015167ffffffffffffffff81111561282557600080fd5b60c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08285018f0301121561285957600080fd5b612861611fbe565b6020828501015167ffffffffffffffff81111561287d57600080fd5b61288e8f60208386890101016125c2565b8252506040828501015167ffffffffffffffff8111156128ad57600080fd5b6128be8f6020838689010101612626565b602083015250838201606081015160408301526128dd906080016125b7565b60608201526128f060a0838601016125b7565b608082015260c0828501015167ffffffffffffffff81111561291157600080fd5b6129228f6020838689010101612681565b60a08301525060608301525084525060209283019201612773565b5084525050508382016020015167ffffffffffffffff81111561295f57600080fd5b61296d868285880101612626565b60208301525092016040908101519083015250919050565b600081518084526020808501945080840160005b83811015611df457815187529582019590820190600101612999565b6000604080835260a080840186516060808588015282825180855260c094508489019150848160051b8a01016020808601955060005b83811015612b6a578b83037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff400185528651805184528281015167ffffffffffffffff16838501528a81015173ffffffffffffffffffffffffffffffffffffffff9081168c86015290870151608088860181905281518187018c9052805161014088018190529293919290860191906000906101608901905b80831015612aa557845184168252938801936001929092019190880190612a83565b508786015193507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80925082898203018f8a0152612ae28185612985565b935050508d8401518c88015289840151612b1460e089018273ffffffffffffffffffffffffffffffffffffffff169052565b509183015173ffffffffffffffffffffffffffffffffffffffff811661010088015291928c0151868203909301610120870152612b518184611cee565b99850199978501979550505060019190910190506129eb565b50808d015197507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08b830301858c0152612ba48289612985565b98909c015160808b0152505050509515159690940195909552949350505050565b60008219821115612bd857612bd8612317565b500190565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b166040850152816060850152612c248285018b611dae565b91508382036080850152612c38828a611dae565b915060ff881660a085015283820360c0850152612c558288611cee565b90861660e085015283810361010085015290506125a78185611cee565b600060208284031215612c8457600080fd5b8151611ac581612109565b60008251612ca1818460208701611cbe565b919091019291505056fea164736f6c634300080d000a",
}

var OffRampExecutorHelperABI = OffRampExecutorHelperMetaData.ABI

var OffRampExecutorHelperBin = OffRampExecutorHelperMetaData.Bin

func DeployOffRampExecutorHelper(auth *bind.TransactOpts, backend bind.ContractBackend, offRamp common.Address, needFee bool) (common.Address, *types.Transaction, *OffRampExecutorHelper, error) {
	parsed, err := OffRampExecutorHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OffRampExecutorHelperBin), backend, offRamp, needFee)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OffRampExecutorHelper{OffRampExecutorHelperCaller: OffRampExecutorHelperCaller{contract: contract}, OffRampExecutorHelperTransactor: OffRampExecutorHelperTransactor{contract: contract}, OffRampExecutorHelperFilterer: OffRampExecutorHelperFilterer{contract: contract}}, nil
}

type OffRampExecutorHelper struct {
	address common.Address
	abi     abi.ABI
	OffRampExecutorHelperCaller
	OffRampExecutorHelperTransactor
	OffRampExecutorHelperFilterer
}

type OffRampExecutorHelperCaller struct {
	contract *bind.BoundContract
}

type OffRampExecutorHelperTransactor struct {
	contract *bind.BoundContract
}

type OffRampExecutorHelperFilterer struct {
	contract *bind.BoundContract
}

type OffRampExecutorHelperSession struct {
	Contract     *OffRampExecutorHelper
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type OffRampExecutorHelperCallerSession struct {
	Contract *OffRampExecutorHelperCaller
	CallOpts bind.CallOpts
}

type OffRampExecutorHelperTransactorSession struct {
	Contract     *OffRampExecutorHelperTransactor
	TransactOpts bind.TransactOpts
}

type OffRampExecutorHelperRaw struct {
	Contract *OffRampExecutorHelper
}

type OffRampExecutorHelperCallerRaw struct {
	Contract *OffRampExecutorHelperCaller
}

type OffRampExecutorHelperTransactorRaw struct {
	Contract *OffRampExecutorHelperTransactor
}

func NewOffRampExecutorHelper(address common.Address, backend bind.ContractBackend) (*OffRampExecutorHelper, error) {
	abi, err := abi.JSON(strings.NewReader(OffRampExecutorHelperABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindOffRampExecutorHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorHelper{address: address, abi: abi, OffRampExecutorHelperCaller: OffRampExecutorHelperCaller{contract: contract}, OffRampExecutorHelperTransactor: OffRampExecutorHelperTransactor{contract: contract}, OffRampExecutorHelperFilterer: OffRampExecutorHelperFilterer{contract: contract}}, nil
}

func NewOffRampExecutorHelperCaller(address common.Address, caller bind.ContractCaller) (*OffRampExecutorHelperCaller, error) {
	contract, err := bindOffRampExecutorHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorHelperCaller{contract: contract}, nil
}

func NewOffRampExecutorHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*OffRampExecutorHelperTransactor, error) {
	contract, err := bindOffRampExecutorHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorHelperTransactor{contract: contract}, nil
}

func NewOffRampExecutorHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*OffRampExecutorHelperFilterer, error) {
	contract, err := bindOffRampExecutorHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorHelperFilterer{contract: contract}, nil
}

func bindOffRampExecutorHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OffRampExecutorHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_OffRampExecutorHelper *OffRampExecutorHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OffRampExecutorHelper.Contract.OffRampExecutorHelperCaller.contract.Call(opts, result, method, params...)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.OffRampExecutorHelperTransactor.contract.Transfer(opts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.OffRampExecutorHelperTransactor.contract.Transact(opts, method, params...)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OffRampExecutorHelper.Contract.contract.Call(opts, result, method, params...)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.contract.Transfer(opts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.contract.Transact(opts, method, params...)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCaller) GetNeedFee(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OffRampExecutorHelper.contract.Call(opts, &out, "getNeedFee")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) GetNeedFee() (bool, error) {
	return _OffRampExecutorHelper.Contract.GetNeedFee(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCallerSession) GetNeedFee() (bool, error) {
	return _OffRampExecutorHelper.Contract.GetNeedFee(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCaller) GetOffRamp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OffRampExecutorHelper.contract.Call(opts, &out, "getOffRamp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) GetOffRamp() (common.Address, error) {
	return _OffRampExecutorHelper.Contract.GetOffRamp(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCallerSession) GetOffRamp() (common.Address, error) {
	return _OffRampExecutorHelper.Contract.GetOffRamp(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _OffRampExecutorHelper.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _OffRampExecutorHelper.Contract.LatestConfigDetails(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _OffRampExecutorHelper.Contract.LatestConfigDetails(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _OffRampExecutorHelper.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _OffRampExecutorHelper.Contract.LatestConfigDigestAndEpoch(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _OffRampExecutorHelper.Contract.LatestConfigDigestAndEpoch(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OffRampExecutorHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) Owner() (common.Address, error) {
	return _OffRampExecutorHelper.Contract.Owner(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCallerSession) Owner() (common.Address, error) {
	return _OffRampExecutorHelper.Contract.Owner(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _OffRampExecutorHelper.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) Transmitters() ([]common.Address, error) {
	return _OffRampExecutorHelper.Contract.Transmitters(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCallerSession) Transmitters() ([]common.Address, error) {
	return _OffRampExecutorHelper.Contract.Transmitters(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _OffRampExecutorHelper.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) TypeAndVersion() (string, error) {
	return _OffRampExecutorHelper.Contract.TypeAndVersion(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperCallerSession) TypeAndVersion() (string, error) {
	return _OffRampExecutorHelper.Contract.TypeAndVersion(&_OffRampExecutorHelper.CallOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OffRampExecutorHelper.contract.Transact(opts, "acceptOwnership")
}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) AcceptOwnership() (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.AcceptOwnership(&_OffRampExecutorHelper.TransactOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.AcceptOwnership(&_OffRampExecutorHelper.TransactOpts)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactor) Report(opts *bind.TransactOpts, executableMessages []byte) (*types.Transaction, error) {
	return _OffRampExecutorHelper.contract.Transact(opts, "report", executableMessages)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) Report(executableMessages []byte) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.Report(&_OffRampExecutorHelper.TransactOpts, executableMessages)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactorSession) Report(executableMessages []byte) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.Report(&_OffRampExecutorHelper.TransactOpts, executableMessages)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactor) SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _OffRampExecutorHelper.contract.Transact(opts, "setConfig", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.SetConfig(&_OffRampExecutorHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.SetConfig(&_OffRampExecutorHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactor) SetNeedFee(opts *bind.TransactOpts, flag bool) (*types.Transaction, error) {
	return _OffRampExecutorHelper.contract.Transact(opts, "setNeedFee", flag)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) SetNeedFee(flag bool) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.SetNeedFee(&_OffRampExecutorHelper.TransactOpts, flag)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactorSession) SetNeedFee(flag bool) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.SetNeedFee(&_OffRampExecutorHelper.TransactOpts, flag)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _OffRampExecutorHelper.contract.Transact(opts, "transferOwnership", to)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.TransferOwnership(&_OffRampExecutorHelper.TransactOpts, to)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.TransferOwnership(&_OffRampExecutorHelper.TransactOpts, to)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _OffRampExecutorHelper.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.Transmit(&_OffRampExecutorHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.Transmit(&_OffRampExecutorHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactor) WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _OffRampExecutorHelper.contract.Transact(opts, "withdrawAccumulatedFees", feeToken, recipient, amount)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.WithdrawAccumulatedFees(&_OffRampExecutorHelper.TransactOpts, feeToken, recipient, amount)
}

func (_OffRampExecutorHelper *OffRampExecutorHelperTransactorSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _OffRampExecutorHelper.Contract.WithdrawAccumulatedFees(&_OffRampExecutorHelper.TransactOpts, feeToken, recipient, amount)
}

type OffRampExecutorHelperConfigSetIterator struct {
	Event *OffRampExecutorHelperConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OffRampExecutorHelperConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OffRampExecutorHelperConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OffRampExecutorHelperConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OffRampExecutorHelperConfigSetIterator) Error() error {
	return it.fail
}

func (it *OffRampExecutorHelperConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OffRampExecutorHelperConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) FilterConfigSet(opts *bind.FilterOpts) (*OffRampExecutorHelperConfigSetIterator, error) {

	logs, sub, err := _OffRampExecutorHelper.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorHelperConfigSetIterator{contract: _OffRampExecutorHelper.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *OffRampExecutorHelperConfigSet) (event.Subscription, error) {

	logs, sub, err := _OffRampExecutorHelper.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OffRampExecutorHelperConfigSet)
				if err := _OffRampExecutorHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) ParseConfigSet(log types.Log) (*OffRampExecutorHelperConfigSet, error) {
	event := new(OffRampExecutorHelperConfigSet)
	if err := _OffRampExecutorHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OffRampExecutorHelperFeesWithdrawnIterator struct {
	Event *OffRampExecutorHelperFeesWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OffRampExecutorHelperFeesWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OffRampExecutorHelperFeesWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OffRampExecutorHelperFeesWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OffRampExecutorHelperFeesWithdrawnIterator) Error() error {
	return it.fail
}

func (it *OffRampExecutorHelperFeesWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OffRampExecutorHelperFeesWithdrawn struct {
	FeeToken  common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) FilterFeesWithdrawn(opts *bind.FilterOpts) (*OffRampExecutorHelperFeesWithdrawnIterator, error) {

	logs, sub, err := _OffRampExecutorHelper.contract.FilterLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorHelperFeesWithdrawnIterator{contract: _OffRampExecutorHelper.contract, event: "FeesWithdrawn", logs: logs, sub: sub}, nil
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *OffRampExecutorHelperFeesWithdrawn) (event.Subscription, error) {

	logs, sub, err := _OffRampExecutorHelper.contract.WatchLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OffRampExecutorHelperFeesWithdrawn)
				if err := _OffRampExecutorHelper.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) ParseFeesWithdrawn(log types.Log) (*OffRampExecutorHelperFeesWithdrawn, error) {
	event := new(OffRampExecutorHelperFeesWithdrawn)
	if err := _OffRampExecutorHelper.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OffRampExecutorHelperOwnershipTransferRequestedIterator struct {
	Event *OffRampExecutorHelperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OffRampExecutorHelperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OffRampExecutorHelperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OffRampExecutorHelperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OffRampExecutorHelperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *OffRampExecutorHelperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OffRampExecutorHelperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OffRampExecutorHelperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OffRampExecutorHelper.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorHelperOwnershipTransferRequestedIterator{contract: _OffRampExecutorHelper.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *OffRampExecutorHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OffRampExecutorHelper.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OffRampExecutorHelperOwnershipTransferRequested)
				if err := _OffRampExecutorHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) ParseOwnershipTransferRequested(log types.Log) (*OffRampExecutorHelperOwnershipTransferRequested, error) {
	event := new(OffRampExecutorHelperOwnershipTransferRequested)
	if err := _OffRampExecutorHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OffRampExecutorHelperOwnershipTransferredIterator struct {
	Event *OffRampExecutorHelperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OffRampExecutorHelperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OffRampExecutorHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OffRampExecutorHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OffRampExecutorHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *OffRampExecutorHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OffRampExecutorHelperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OffRampExecutorHelperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OffRampExecutorHelper.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorHelperOwnershipTransferredIterator{contract: _OffRampExecutorHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OffRampExecutorHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OffRampExecutorHelper.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OffRampExecutorHelperOwnershipTransferred)
				if err := _OffRampExecutorHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) ParseOwnershipTransferred(log types.Log) (*OffRampExecutorHelperOwnershipTransferred, error) {
	event := new(OffRampExecutorHelperOwnershipTransferred)
	if err := _OffRampExecutorHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OffRampExecutorHelperTransmittedIterator struct {
	Event *OffRampExecutorHelperTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OffRampExecutorHelperTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OffRampExecutorHelperTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OffRampExecutorHelperTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OffRampExecutorHelperTransmittedIterator) Error() error {
	return it.fail
}

func (it *OffRampExecutorHelperTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OffRampExecutorHelperTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) FilterTransmitted(opts *bind.FilterOpts) (*OffRampExecutorHelperTransmittedIterator, error) {

	logs, sub, err := _OffRampExecutorHelper.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &OffRampExecutorHelperTransmittedIterator{contract: _OffRampExecutorHelper.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *OffRampExecutorHelperTransmitted) (event.Subscription, error) {

	logs, sub, err := _OffRampExecutorHelper.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OffRampExecutorHelperTransmitted)
				if err := _OffRampExecutorHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OffRampExecutorHelper *OffRampExecutorHelperFilterer) ParseTransmitted(log types.Log) (*OffRampExecutorHelperTransmitted, error) {
	event := new(OffRampExecutorHelperTransmitted)
	if err := _OffRampExecutorHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_OffRampExecutorHelper *OffRampExecutorHelper) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _OffRampExecutorHelper.abi.Events["ConfigSet"].ID:
		return _OffRampExecutorHelper.ParseConfigSet(log)
	case _OffRampExecutorHelper.abi.Events["FeesWithdrawn"].ID:
		return _OffRampExecutorHelper.ParseFeesWithdrawn(log)
	case _OffRampExecutorHelper.abi.Events["OwnershipTransferRequested"].ID:
		return _OffRampExecutorHelper.ParseOwnershipTransferRequested(log)
	case _OffRampExecutorHelper.abi.Events["OwnershipTransferred"].ID:
		return _OffRampExecutorHelper.ParseOwnershipTransferred(log)
	case _OffRampExecutorHelper.abi.Events["Transmitted"].ID:
		return _OffRampExecutorHelper.ParseTransmitted(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (OffRampExecutorHelperConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (OffRampExecutorHelperFeesWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa8")
}

func (OffRampExecutorHelperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (OffRampExecutorHelperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (OffRampExecutorHelperTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (_OffRampExecutorHelper *OffRampExecutorHelper) Address() common.Address {
	return _OffRampExecutorHelper.address
}

type OffRampExecutorHelperInterface interface {
	GetNeedFee(opts *bind.CallOpts) (bool, error)

	GetOffRamp(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Report(opts *bind.TransactOpts, executableMessages []byte) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	SetNeedFee(opts *bind.TransactOpts, flag bool) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*OffRampExecutorHelperConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *OffRampExecutorHelperConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*OffRampExecutorHelperConfigSet, error)

	FilterFeesWithdrawn(opts *bind.FilterOpts) (*OffRampExecutorHelperFeesWithdrawnIterator, error)

	WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *OffRampExecutorHelperFeesWithdrawn) (event.Subscription, error)

	ParseFeesWithdrawn(log types.Log) (*OffRampExecutorHelperFeesWithdrawn, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OffRampExecutorHelperOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *OffRampExecutorHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*OffRampExecutorHelperOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OffRampExecutorHelperOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OffRampExecutorHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*OffRampExecutorHelperOwnershipTransferred, error)

	FilterTransmitted(opts *bind.FilterOpts) (*OffRampExecutorHelperTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *OffRampExecutorHelperTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*OffRampExecutorHelperTransmitted, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

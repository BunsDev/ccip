// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package single_token_offramp

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type CCIPMessage struct {
	SequenceNumber     *big.Int
	SourceChainId      *big.Int
	DestinationChainId *big.Int
	Sender             common.Address
	Payload            CCIPMessagePayload
}

type CCIPMessagePayload struct {
	Receiver common.Address
	Data     []byte
	Tokens   []common.Address
	Amounts  []*big.Int
	Executor common.Address
	Options  []byte
}

type CCIPRelayReport struct {
	MerkleRoot        [32]byte
	MinSequenceNumber *big.Int
	MaxSequenceNumber *big.Int
}

type TokenLimitsTokenBucket struct {
	Rate        *big.Int
	Capacity    *big.Int
	Tokens      *big.Int
	LastUpdated *big.Int
}

var SingleTokenOffRampMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contractPoolInterface\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBucketRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBucketCapacity\",\"type\":\"uint256\"},{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeWithoutAFNSignal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionDelaySeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"AFNMaxHeartbeatTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"encodedConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"}],\"name\":\"CrossChainMessageExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"ExecutionDelaySecondsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"full\",\"type\":\"bool\"}],\"name\":\"NewTokenBucketConstructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minSequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSequenceNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contractPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOURCE_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"full\",\"type\":\"bool\"}],\"name\":\"configureTokenBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"structCCIP.MessagePayload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"internalType\":\"structCCIP.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"generateMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"}],\"name\":\"getExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExecutionDelaySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastReport\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minSequenceNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSequenceNumber\",\"type\":\"uint256\"}],\"internalType\":\"structCCIP.RelayReport\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSecondsWithoutAFNHeartbeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBucket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"structTokenLimits.TokenBucket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"executionDelaySeconds\",\"type\":\"uint256\"}],\"name\":\"setExecutionDelaySeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setMaxSecondsWithoutAFNHeartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101206040523480156200001257600080fd5b506040516200421b3803806200421b833981016040819052620000359162000384565b6000805460ff191681556001908490849033908190816200009d5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0380851661010002610100600160a81b031990921691909117909155811615620000d757620000d78162000245565b5050506001600160a01b0382161580620000ef575080155b156200010e57604051630958ef9b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0393841617905560035590151560f81b608052604080516321df0da760e01b81529051898316928916916321df0da7916004808301926020929190829003018186803b1580156200017357600080fd5b505afa15801562000188573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ae91906200035d565b6001600160a01b031614620001d65760405163936bb5ad60e01b815260040160405180910390fd5b60a089905260c0889052606087811b6001600160601b0319908116610100529087901b1660e0526200021785856001620002f7602090811b620021cd17901c565b80516010556020810151601155604081015160125560600151601355600c55506200042d9650505050505050565b6001600160a01b038116331415620002a05760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000094565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b620003236040518060800160405280600081526020016000815260200160008152602001600081525090565b6000826200033357600062000335565b835b6040805160808101825296875260208701959095529385019390935250504260608301525090565b6000602082840312156200037057600080fd5b81516200037d8162000414565b9392505050565b60008060008060008060008060006101208a8c031215620003a457600080fd5b8951985060208a0151975060408a0151620003bf8162000414565b60608b0151909750620003d28162000414565b8096505060808a0151945060a08a0151935060c08a0151620003f48162000414565b8093505060e08a015191506101008a015190509295985092959850929598565b6001600160a01b03811681146200042a57600080fd5b50565b60805160f81c60a05160c05160e05160601c6101005160601c613d7d6200049e600039600081816103830152818161295e0152612ac701526000818161030f015281816115da0152612a69015260006103b20152600081816102e8015261289f01526000610acc0152613d7d6000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806382bfefc8116100f9578063b1dc65a411610097578063dc53c76e11610071578063dc53c76e14610493578063e3d0e712146104a6578063eefa7a3e146104b9578063f2fde38b1461050f57600080fd5b8063b1dc65a41461045a578063b6608c3b1461046d578063c15d605b1461048057600080fd5b80638da5cb5b116100d35780638da5cb5b146103d45780639504c519146103f7578063a7206cd614610432578063b034909c1461045257600080fd5b806382bfefc81461037e5780638456cb59146103a557806385e1f4d0146103ad57600080fd5b80633f4ba83a116101665780637535d246116101405780637535d2461461030a57806379ba509714610331578063814118341461033957806381ff70481461034e57600080fd5b80633f4ba83a146102d05780635c975abb146102d857806374be2150146102e357600080fd5b80631a830a1e116101a25780631a830a1e14610239578063219475071461024b5780632222dd421461027e5780633a6dcd3e146102bd57600080fd5b80630b514037146101c9578063108ee5fc146101de578063181f5a77146101f1575b600080fd5b6101dc6101d7366004613509565b610522565b005b6101dc6101ec3660046130f1565b610597565b604080518082018252601881527f53696e676c65546f6b656e4f666652616d7020312e312e300000000000000000602082015290516102309190613837565b60405180910390f35b600c545b604051908152602001610230565b61026e6102593660046134b4565b6000908152600b602052604090205460ff1690565b6040519015158152602001610230565b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610230565b61023d6102cb3660046132c0565b610673565b6101dc610784565b60005460ff1661026e565b61023d7f000000000000000000000000000000000000000000000000000000000000000081565b6102987f000000000000000000000000000000000000000000000000000000000000000081565b6101dc610796565b6103416108bd565b60405161023091906137c5565b6006546004546040805163ffffffff80851682526401000000009094049093166020840152820152606001610230565b6102987f000000000000000000000000000000000000000000000000000000000000000081565b6101dc61092c565b61023d7f000000000000000000000000000000000000000000000000000000000000000081565b600054610100900473ffffffffffffffffffffffffffffffffffffffff16610298565b6103ff61093c565b60405161023091908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61023d6104403660046134b4565b6000908152600a602052604090205490565b60035461023d565b6101dc6104683660046131db565b610994565b6101dc61047b3660046134b4565b611038565b6101dc61048e3660046134b4565b6110b5565b6101dc6104a136600461330e565b6110f8565b6101dc6104b436600461310e565b6117d4565b6040805160608082018352600080835260208084018290529284015282518082018452600d54808252600e54828501908152600f5492860192835285519182525193810193909352519282019290925201610230565b6101dc61051d3660046130f1565b6121b9565b61052a612230565b6105358383836121cd565b80516010556020808201516011556040808301516012556060928301516013558051868152918201859052831515908201527ffaf3310019e551542b5c6014c1ae13e2a8d3943d7611d779c4df9b36c111924f910160405180910390a1505050565b61059f612230565b73ffffffffffffffffffffffffffffffffffffffff81166105ec576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd2891015b60405180910390a15050565b600082815b855181101561077b57600086828151811061069557610695613ce2565b602002602001015190506002856106ac9190613be3565b610707576040517f01000000000000000000000000000000000000000000000000000000000000006020820152602181018490526041810182905260610160405160208183030381529060405280519060200120925061075a565b6040517f0100000000000000000000000000000000000000000000000000000000000000602082015260218101829052604181018490526061016040516020818303038152906040528051906020012092505b610765600286613af0565b945050808061077390613baa565b915050610678565b50949350505050565b61078c612230565b6107946122b6565b565b60015473ffffffffffffffffffffffffffffffffffffffff16331461081c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054336101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8416178455600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560405173ffffffffffffffffffffffffffffffffffffffff919093041692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6060600980548060200260200160405190810160405280929190818152602001828054801561092257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116108f7575b5050505050905090565b610934612230565b610794612397565b6109676040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526010548152601154602082015260125491810191909152601354606082015290565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c0135916109e49184918491908e908e908190840183828082843760009201919091525061245792505050565b6040805183815263ffffffff600884901c1660208201527fd78f2a94a6a9ba96eb1197c7833ce19ec0fef80881049b0bd8ced9ee533739e3910160405180910390a16040805160608101825260045480825260055460ff80821660208501526101009091041692820192909252908314610aba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f636f6e666967446967657374206d69736d6174636800000000000000000000006044820152606401610813565b610ac88b8b8b8b8b8b6127e6565b60007f000000000000000000000000000000000000000000000000000000000000000015610b2557600282602001518360400151610b069190613acb565b610b109190613b04565b610b1b906001613acb565b60ff169050610b3b565b6020820151610b35906001613acb565b60ff1690505b888114610ba4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e6174757265730000000000006044820152606401610813565b888714610c0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e00006044820152606401610813565b3360009081526007602090815260408083208151808301909252805460ff80821684529293919291840191610100909104166002811115610c5057610c50613c84565b6002811115610c6157610c61613c84565b9052509050600281602001516002811115610c7e57610c7e613c84565b148015610cc557506009816000015160ff1681548110610ca057610ca0613ce2565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b610d2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f756e617574686f72697a6564207472616e736d697474657200000000000000006044820152606401610813565b505050505060008888604051610d429291906137b5565b604051908190038120610d59918c90602001613799565b604051602081830303815290604052805190602001209050610d79612e7b565b604080518082019091526000808252602082015260005b88811015611016576000600185888460208110610daf57610daf613ce2565b610dbc91901a601b613acb565b8d8d86818110610dce57610dce613ce2565b905060200201358c8c87818110610de757610de7613ce2565b9050602002013560405160008152602001604052604051610e24949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610e46573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff811660009081526007602090815290849020838501909452835460ff80821685529296509294508401916101009004166002811115610ec657610ec6613c84565b6002811115610ed757610ed7613c84565b9052509250600183602001516002811115610ef457610ef4613c84565b14610f5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e00006044820152606401610813565b8251849060ff16601f8110610f7257610f72613ce2565b602002015115610fde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f6e2d756e69717565207369676e61747572650000000000000000000000006044820152606401610813565b600184846000015160ff16601f8110610ff957610ff9613ce2565b91151560209092020152508061100e81613baa565b915050610d90565b5050505063ffffffff811061102d5761102d613bf7565b505050505050505050565b611040612230565b80611077576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380549082905560408051828152602081018490527f72e72b3dfd44fb4d803f52b2d895c7347b912da657d0f77599a0afc26956c2519101610667565b6110bd612230565b600c8190556040518181527ffbb92e09fd0b7bcabafe655657e745c10bcd9812c1e32e205e477a3c5ff74fc09060200160405180910390a150565b60005460ff1615611165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610813565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf72b39b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156111cf57600080fd5b505af11580156111e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112079190613497565b1561123d576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254604080517f343157b4000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163343157b491600480830192606092919082900301818787803b1580156112a957600080fd5b505af11580156112bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e191906134cd565b90506003548160200151426112f69190613b63565b111561132e576040517fa8c8866900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060f81b84604051602001611345919061384a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526113819291602001613751565b60405160208183030381529060405280519060200120905060006113a6868386610673565b6000818152600a6020526040902054909150806113f5578686866040517f31ec415c000000000000000000000000000000000000000000000000000000008152600401610813939291906137d8565b42600c54826114049190613a8b565b1061143b576040517f15c33ba200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516000908152600b602052604090205460ff161561148c5785516040517f6a64e9610000000000000000000000000000000000000000000000000000000081526004810191909152602401610813565b608080870151015173ffffffffffffffffffffffffffffffffffffffff16158015906114d55750608080870151015173ffffffffffffffffffffffffffffffffffffffff163314155b156115125785516040517fd8e90b980000000000000000000000000000000000000000000000000000000081526004810191909152602401610813565b61151b8661289d565b61152486612a43565b85516000908152600b6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556080870151606001518051829061157657611576613ce2565b60200260200101519050611594816010612b9890919063ffffffff16565b6115d8576012546040517f331220f7000000000000000000000000000000000000000000000000000000008152600481019190915260248101829052604401610813565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ea6192a288608001516000015189608001516060015160008151811061163857611638613ce2565b60200260200101516040518363ffffffff1660e01b815260040161167e92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060405180830381600087803b15801561169857600080fd5b505af11580156116ac573d6000803e3d6000fd5b5050506080880151516040517f3a56bb7100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169150633a56bb7190611709908a9060040161384a565b600060405180830381600087803b15801561172357600080fd5b505af1925050508015611734575060015b61179f573d808015611762576040519150601f19603f3d011682016040523d82523d6000602084013e611767565b606091505b5087516040517f6a3fd4f200000000000000000000000000000000000000000000000000000000815261081391908390600401613902565b86516040517fc51bf0f6d90b467e0849da0ad18a4d9144a4b78b9f83202e1c65cd68f72d4a3890600090a25050505050505050565b855185518560ff16601f831115611847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e657273000000000000000000000000000000006044820152606401610813565b600081116118b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610813565b81831461193f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e000000000000000000000000000000000000000000000000000000006064820152608401610813565b61194a816003613b26565b83116119b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610813565b6119ba612230565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b60085415611bad57600854600090611a1290600190613b63565b9050600060088281548110611a2957611a29613ce2565b60009182526020822001546009805473ffffffffffffffffffffffffffffffffffffffff90921693509084908110611a6357611a63613ce2565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff85811684526007909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811690915592909116808452922080549091169055600880549192509080611ae357611ae3613cb3565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190556009805480611b4c57611b4c613cb3565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055506119f8915050565b60005b8151518110156120145760006007600084600001518481518110611bd657611bd6613ce2565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115611c2057611c20613c84565b14611c87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610813565b6040805180820190915260ff82168152600160208201528251805160079160009185908110611cb857611cb8613ce2565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611d5957611d59613c84565b021790555060009150611d699050565b6007600084602001518481518110611d8357611d83613ce2565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115611dcd57611dcd613c84565b14611e34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610813565b6040805180820190915260ff821681526020810160028152506007600084602001518481518110611e6757611e67613ce2565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611f0857611f08613c84565b021790555050825180516008925083908110611f2657611f26613ce2565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921790915582015180516009919083908110611fa257611fa2613ce2565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790558061200c81613baa565b915050611bb0565b506040810151600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600680547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff4381168202928317855590830481169360019390926000926120a6928692908216911617613aa3565b92506101000a81548163ffffffff021916908363ffffffff1602179055506121054630600660009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a00151612bdb565b6004819055825180516005805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560065460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05986121a4988b98919763ffffffff909216969095919491939192613923565b60405180910390a15050505050505050505050565b6121c1612230565b6121ca81612c86565b50565b6121f86040518060800160405280600081526020016000815260200160008152602001600081525090565b600082612206576000612208565b835b6040805160808101825296875260208701959095529385019390935250504260608301525090565b600054610100900473ffffffffffffffffffffffffffffffffffffffff163314610794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610813565b60005460ff16612322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610813565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005460ff1615612404576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610813565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861236d3390565b60005460ff16156124c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610813565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf72b39b6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561252e57600080fd5b505af1158015612542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125669190613497565b1561259c576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254604080517f343157b4000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163343157b491600480830192606092919082900301818787803b15801561260857600080fd5b505af115801561261c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264091906134cd565b90506003548160200151426126559190613b63565b111561268d576040517fa8c8866900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828060200190518101906126a391906134cd565b90508060400151816020015111156126e7576040517f67a3824c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606081018252600d54808252600e546020830152600f5492820192909252901561277057604081015161271f906001613a8b565b82602001511461277057806040015182602001516040517fcc7f1bd0000000000000000000000000000000000000000000000000000000008152600401610813929190918252602082015260400190565b81516000908152600a60209081526040918290204290558351600d8190558185018051600e558386018051600f55845192835290519282019290925290518183015290517f07d7bce06be2a7b0230e4dd0d72523c0407e82419ab1d947c5ddaf59ca36484e9181900360600190a1505050505050565b60006127f3826020613b26565b6127fe856020613b26565b61280a88610144613a8b565b6128149190613a8b565b61281e9190613a8b565b612829906000613a8b565b9050368114612894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d6174636800000000000000006044820152606401610813565b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000008160200151146129025780602001516040517fd44bc9eb00000000000000000000000000000000000000000000000000000000815260040161081391815260200190565b806080015160400151516001141580612925575080608001516060015151600114155b1561295c576040517f4c056b6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168160800151604001516000815181106129ae576129ae613ce2565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146121ca578060800151604001516000815181106129ec576129ec613ce2565b60200260200101516040517fbf16aab6000000000000000000000000000000000000000000000000000000008152600401610813919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60808101515173ffffffffffffffffffffffffffffffffffffffff16301480612abf57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681608001516000015173ffffffffffffffffffffffffffffffffffffffff16145b80612b1d57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681608001516000015173ffffffffffffffffffffffffffffffffffffffff16145b80612b42575060808101515173ffffffffffffffffffffffffffffffffffffffff163b155b156121ca576080810151516040517f9cfea58300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401610813565b6000612ba383612d82565b8183600201541015612bb757506000612bd5565b81836002016000828254612bcb9190613b63565b9091555060019150505b92915050565b6000808a8a8a8a8a8a8a8a8a604051602001612bff9998979695949392919061385d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116331415612d06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610813565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b806001015481600201541115612dc4576040517f9725942a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001015481600201541415612dd75750565b60038101544290811015612e17576040517ff01f197500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000826003015482612e299190613b63565b60018401548454919250612e5591612e419084613b26565b8560020154612e509190613a8b565b612e63565b600284015550600390910155565b6000818310612e725781612e74565b825b9392505050565b604051806103e00160405280601f906020820280368337509192915050565b8035612ea581613d40565b919050565b600082601f830112612ebb57600080fd5b81356020612ed0612ecb83613a67565b613a18565b80838252828201915082860187848660051b8901011115612ef057600080fd5b60005b85811015612f18578135612f0681613d40565b84529284019290840190600101612ef3565b5090979650505050505050565b60008083601f840112612f3757600080fd5b50813567ffffffffffffffff811115612f4f57600080fd5b6020830191508360208260051b8501011115612f6a57600080fd5b9250929050565b600082601f830112612f8257600080fd5b81356020612f92612ecb83613a67565b80838252828201915082860187848660051b8901011115612fb257600080fd5b60005b85811015612f1857813584529284019290840190600101612fb5565b600082601f830112612fe257600080fd5b81356020612ff2612ecb83613a67565b80838252828201915082860187848660051b890101111561301257600080fd5b60005b85811015612f1857813561302881613d40565b84529284019290840190600101613015565b600082601f83011261304b57600080fd5b813567ffffffffffffffff81111561306557613065613d11565b61309660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613a18565b8181528460208386010111156130ab57600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff81168114612ea557600080fd5b803560ff81168114612ea557600080fd5b60006020828403121561310357600080fd5b8135612e7481613d40565b60008060008060008060c0878903121561312757600080fd5b863567ffffffffffffffff8082111561313f57600080fd5b61314b8a838b01612eaa565b9750602089013591508082111561316157600080fd5b61316d8a838b01612eaa565b965061317b60408a016130e0565b9550606089013591508082111561319157600080fd5b61319d8a838b0161303a565b94506131ab60808a016130c8565b935060a08901359150808211156131c157600080fd5b506131ce89828a0161303a565b9150509295509295509295565b60008060008060008060008060e0898b0312156131f757600080fd5b606089018a81111561320857600080fd5b8998503567ffffffffffffffff8082111561322257600080fd5b818b0191508b601f83011261323657600080fd5b81358181111561324557600080fd5b8c602082850101111561325757600080fd5b6020830199508098505060808b013591508082111561327557600080fd5b6132818c838d01612f25565b909750955060a08b013591508082111561329a57600080fd5b506132a78b828c01612f25565b999c989b50969995989497949560c00135949350505050565b6000806000606084860312156132d557600080fd5b833567ffffffffffffffff8111156132ec57600080fd5b6132f886828701612f71565b9660208601359650604090950135949350505050565b60008060006060848603121561332357600080fd5b833567ffffffffffffffff8082111561333b57600080fd5b61334787838801612f71565b9450602086013591508082111561335d57600080fd5b9085019060a0828803121561337157600080fd5b6133796139a9565b823581526020830135602082015260408301356040820152606083013561339f81613d40565b60608201526080830135828111156133b657600080fd5b929092019160c083890312156133cb57600080fd5b6133d36139d2565b6133dc84612e9a565b81526020840135838111156133f057600080fd5b6133fc8a82870161303a565b60208301525060408401358381111561341457600080fd5b6134208a828701612fd1565b60408301525060608401358381111561343857600080fd5b6134448a828701612f71565b60608301525061345660808501612e9a565b608082015260a08401358381111561346d57600080fd5b6134798a82870161303a565b60a08301525060808201529497949650505050604092909201359150565b6000602082840312156134a957600080fd5b8151612e7481613d62565b6000602082840312156134c657600080fd5b5035919050565b6000606082840312156134df57600080fd5b6134e76139f5565b8251815260208301516020820152604083015160408201528091505092915050565b60008060006060848603121561351e57600080fd5b8335925060208401359150604084013561353781613d62565b809150509250925092565b600081518084526020808501945080840160005b8381101561358857815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613556565b509495945050505050565b600081518084526020808501945080840160005b83811015613588578151875295820195908201906001016135a7565b600081518084526135db816020860160208601613b7a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8051825260006020808301518185015260408301516040850152606083015173ffffffffffffffffffffffffffffffffffffffff80821660608701526080850151915060a060808701528082511660a08701528282015160c0808801526136786101608801826135c3565b60408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60898303810160e08b0152815180845291870193506000929091908701905b808410156136de578451861682529387019360019390930192908701906136bc565b5060608601519650818a8203016101008b01526136fb8188613593565b965050608085015193506137286101208a018573ffffffffffffffffffffffffffffffffffffffff169052565b60a0850151945080898703016101408a01525050505061374882826135c3565b95945050505050565b7fff00000000000000000000000000000000000000000000000000000000000000831681526000825161378b816001850160208701613b7a565b919091016001019392505050565b8281526060826020830137600060809190910190815292915050565b8183823760009101908152919050565b602081526000612e746020830184613542565b606080825284519082018190526000906020906080840190828801845b82811015613811578151845292840192908401906001016137f5565b50505083810382850152613825818761360d565b92505050826040830152949350505050565b602081526000612e7460208301846135c3565b602081526000612e74602083018461360d565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b1660408501528160608501526138a48285018b613542565b915083820360808501526138b8828a613542565b915060ff881660a085015283820360c08501526138d582886135c3565b90861660e085015283810361010085015290506138f281856135c3565b9c9b505050505050505050505050565b82815260406020820152600061391b60408301846135c3565b949350505050565b600061012063ffffffff808d1684528b6020850152808b166040850152508060608401526139538184018a613542565b905082810360808401526139678189613542565b905060ff871660a084015282810360c084015261398481876135c3565b905067ffffffffffffffff851660e08401528281036101008401526138f281856135c3565b60405160a0810167ffffffffffffffff811182821017156139cc576139cc613d11565b60405290565b60405160c0810167ffffffffffffffff811182821017156139cc576139cc613d11565b6040516060810167ffffffffffffffff811182821017156139cc576139cc613d11565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613a5f57613a5f613d11565b604052919050565b600067ffffffffffffffff821115613a8157613a81613d11565b5060051b60200190565b60008219821115613a9e57613a9e613c26565b500190565b600063ffffffff808316818516808303821115613ac257613ac2613c26565b01949350505050565b600060ff821660ff84168060ff03821115613ae857613ae8613c26565b019392505050565b600082613aff57613aff613c55565b500490565b600060ff831680613b1757613b17613c55565b8060ff84160491505092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b5e57613b5e613c26565b500290565b600082821015613b7557613b75613c26565b500390565b60005b83811015613b95578181015183820152602001613b7d565b83811115613ba4576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613bdc57613bdc613c26565b5060010190565b600082613bf257613bf2613c55565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146121ca57600080fd5b80151581146121ca57600080fdfea164736f6c6343000806000a",
}

var SingleTokenOffRampABI = SingleTokenOffRampMetaData.ABI

var SingleTokenOffRampBin = SingleTokenOffRampMetaData.Bin

func DeploySingleTokenOffRamp(auth *bind.TransactOpts, backend bind.ContractBackend, sourceChainId *big.Int, chainId *big.Int, token common.Address, pool common.Address, tokenBucketRate *big.Int, tokenBucketCapacity *big.Int, afn common.Address, maxTimeWithoutAFNSignal *big.Int, executionDelaySeconds *big.Int) (common.Address, *types.Transaction, *SingleTokenOffRamp, error) {
	parsed, err := SingleTokenOffRampMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SingleTokenOffRampBin), backend, sourceChainId, chainId, token, pool, tokenBucketRate, tokenBucketCapacity, afn, maxTimeWithoutAFNSignal, executionDelaySeconds)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SingleTokenOffRamp{SingleTokenOffRampCaller: SingleTokenOffRampCaller{contract: contract}, SingleTokenOffRampTransactor: SingleTokenOffRampTransactor{contract: contract}, SingleTokenOffRampFilterer: SingleTokenOffRampFilterer{contract: contract}}, nil
}

type SingleTokenOffRamp struct {
	address common.Address
	abi     abi.ABI
	SingleTokenOffRampCaller
	SingleTokenOffRampTransactor
	SingleTokenOffRampFilterer
}

type SingleTokenOffRampCaller struct {
	contract *bind.BoundContract
}

type SingleTokenOffRampTransactor struct {
	contract *bind.BoundContract
}

type SingleTokenOffRampFilterer struct {
	contract *bind.BoundContract
}

type SingleTokenOffRampSession struct {
	Contract     *SingleTokenOffRamp
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type SingleTokenOffRampCallerSession struct {
	Contract *SingleTokenOffRampCaller
	CallOpts bind.CallOpts
}

type SingleTokenOffRampTransactorSession struct {
	Contract     *SingleTokenOffRampTransactor
	TransactOpts bind.TransactOpts
}

type SingleTokenOffRampRaw struct {
	Contract *SingleTokenOffRamp
}

type SingleTokenOffRampCallerRaw struct {
	Contract *SingleTokenOffRampCaller
}

type SingleTokenOffRampTransactorRaw struct {
	Contract *SingleTokenOffRampTransactor
}

func NewSingleTokenOffRamp(address common.Address, backend bind.ContractBackend) (*SingleTokenOffRamp, error) {
	abi, err := abi.JSON(strings.NewReader(SingleTokenOffRampABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindSingleTokenOffRamp(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRamp{address: address, abi: abi, SingleTokenOffRampCaller: SingleTokenOffRampCaller{contract: contract}, SingleTokenOffRampTransactor: SingleTokenOffRampTransactor{contract: contract}, SingleTokenOffRampFilterer: SingleTokenOffRampFilterer{contract: contract}}, nil
}

func NewSingleTokenOffRampCaller(address common.Address, caller bind.ContractCaller) (*SingleTokenOffRampCaller, error) {
	contract, err := bindSingleTokenOffRamp(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampCaller{contract: contract}, nil
}

func NewSingleTokenOffRampTransactor(address common.Address, transactor bind.ContractTransactor) (*SingleTokenOffRampTransactor, error) {
	contract, err := bindSingleTokenOffRamp(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampTransactor{contract: contract}, nil
}

func NewSingleTokenOffRampFilterer(address common.Address, filterer bind.ContractFilterer) (*SingleTokenOffRampFilterer, error) {
	contract, err := bindSingleTokenOffRamp(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampFilterer{contract: contract}, nil
}

func bindSingleTokenOffRamp(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SingleTokenOffRampABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SingleTokenOffRamp.Contract.SingleTokenOffRampCaller.contract.Call(opts, result, method, params...)
}

func (_SingleTokenOffRamp *SingleTokenOffRampRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.SingleTokenOffRampTransactor.contract.Transfer(opts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.SingleTokenOffRampTransactor.contract.Transact(opts, method, params...)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SingleTokenOffRamp.Contract.contract.Call(opts, result, method, params...)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.contract.Transfer(opts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.contract.Transact(opts, method, params...)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) CHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) CHAINID() (*big.Int, error) {
	return _SingleTokenOffRamp.Contract.CHAINID(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) CHAINID() (*big.Int, error) {
	return _SingleTokenOffRamp.Contract.CHAINID(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) POOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) POOL() (common.Address, error) {
	return _SingleTokenOffRamp.Contract.POOL(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) POOL() (common.Address, error) {
	return _SingleTokenOffRamp.Contract.POOL(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) SOURCECHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "SOURCE_CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) SOURCECHAINID() (*big.Int, error) {
	return _SingleTokenOffRamp.Contract.SOURCECHAINID(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) SOURCECHAINID() (*big.Int, error) {
	return _SingleTokenOffRamp.Contract.SOURCECHAINID(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) TOKEN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "TOKEN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) TOKEN() (common.Address, error) {
	return _SingleTokenOffRamp.Contract.TOKEN(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) TOKEN() (common.Address, error) {
	return _SingleTokenOffRamp.Contract.TOKEN(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) GenerateMerkleRoot(opts *bind.CallOpts, proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "generateMerkleRoot", proof, leaf, index)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) GenerateMerkleRoot(proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error) {
	return _SingleTokenOffRamp.Contract.GenerateMerkleRoot(&_SingleTokenOffRamp.CallOpts, proof, leaf, index)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) GenerateMerkleRoot(proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error) {
	return _SingleTokenOffRamp.Contract.GenerateMerkleRoot(&_SingleTokenOffRamp.CallOpts, proof, leaf, index)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) GetAFN() (common.Address, error) {
	return _SingleTokenOffRamp.Contract.GetAFN(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) GetAFN() (common.Address, error) {
	return _SingleTokenOffRamp.Contract.GetAFN(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) GetExecuted(opts *bind.CallOpts, sequenceNumber *big.Int) (bool, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "getExecuted", sequenceNumber)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) GetExecuted(sequenceNumber *big.Int) (bool, error) {
	return _SingleTokenOffRamp.Contract.GetExecuted(&_SingleTokenOffRamp.CallOpts, sequenceNumber)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) GetExecuted(sequenceNumber *big.Int) (bool, error) {
	return _SingleTokenOffRamp.Contract.GetExecuted(&_SingleTokenOffRamp.CallOpts, sequenceNumber)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) GetExecutionDelaySeconds(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "getExecutionDelaySeconds")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) GetExecutionDelaySeconds() (*big.Int, error) {
	return _SingleTokenOffRamp.Contract.GetExecutionDelaySeconds(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) GetExecutionDelaySeconds() (*big.Int, error) {
	return _SingleTokenOffRamp.Contract.GetExecutionDelaySeconds(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) GetLastReport(opts *bind.CallOpts) (CCIPRelayReport, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "getLastReport")

	if err != nil {
		return *new(CCIPRelayReport), err
	}

	out0 := *abi.ConvertType(out[0], new(CCIPRelayReport)).(*CCIPRelayReport)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) GetLastReport() (CCIPRelayReport, error) {
	return _SingleTokenOffRamp.Contract.GetLastReport(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) GetLastReport() (CCIPRelayReport, error) {
	return _SingleTokenOffRamp.Contract.GetLastReport(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) GetMaxSecondsWithoutAFNHeartbeat(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "getMaxSecondsWithoutAFNHeartbeat")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) GetMaxSecondsWithoutAFNHeartbeat() (*big.Int, error) {
	return _SingleTokenOffRamp.Contract.GetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) GetMaxSecondsWithoutAFNHeartbeat() (*big.Int, error) {
	return _SingleTokenOffRamp.Contract.GetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _SingleTokenOffRamp.Contract.GetMerkleRoot(&_SingleTokenOffRamp.CallOpts, root)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _SingleTokenOffRamp.Contract.GetMerkleRoot(&_SingleTokenOffRamp.CallOpts, root)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) GetTokenBucket(opts *bind.CallOpts) (TokenLimitsTokenBucket, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "getTokenBucket")

	if err != nil {
		return *new(TokenLimitsTokenBucket), err
	}

	out0 := *abi.ConvertType(out[0], new(TokenLimitsTokenBucket)).(*TokenLimitsTokenBucket)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) GetTokenBucket() (TokenLimitsTokenBucket, error) {
	return _SingleTokenOffRamp.Contract.GetTokenBucket(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) GetTokenBucket() (TokenLimitsTokenBucket, error) {
	return _SingleTokenOffRamp.Contract.GetTokenBucket(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _SingleTokenOffRamp.Contract.LatestConfigDetails(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _SingleTokenOffRamp.Contract.LatestConfigDetails(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) Owner() (common.Address, error) {
	return _SingleTokenOffRamp.Contract.Owner(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) Owner() (common.Address, error) {
	return _SingleTokenOffRamp.Contract.Owner(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) Paused() (bool, error) {
	return _SingleTokenOffRamp.Contract.Paused(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) Paused() (bool, error) {
	return _SingleTokenOffRamp.Contract.Paused(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) Transmitters() ([]common.Address, error) {
	return _SingleTokenOffRamp.Contract.Transmitters(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) Transmitters() ([]common.Address, error) {
	return _SingleTokenOffRamp.Contract.Transmitters(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SingleTokenOffRamp.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) TypeAndVersion() (string, error) {
	return _SingleTokenOffRamp.Contract.TypeAndVersion(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampCallerSession) TypeAndVersion() (string, error) {
	return _SingleTokenOffRamp.Contract.TypeAndVersion(&_SingleTokenOffRamp.CallOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRamp.contract.Transact(opts, "acceptOwnership")
}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) AcceptOwnership() (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.AcceptOwnership(&_SingleTokenOffRamp.TransactOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.AcceptOwnership(&_SingleTokenOffRamp.TransactOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactor) ConfigureTokenBucket(opts *bind.TransactOpts, rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error) {
	return _SingleTokenOffRamp.contract.Transact(opts, "configureTokenBucket", rate, capacity, full)
}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) ConfigureTokenBucket(rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.ConfigureTokenBucket(&_SingleTokenOffRamp.TransactOpts, rate, capacity, full)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorSession) ConfigureTokenBucket(rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.ConfigureTokenBucket(&_SingleTokenOffRamp.TransactOpts, rate, capacity, full)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactor) ExecuteTransaction(opts *bind.TransactOpts, proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRamp.contract.Transact(opts, "executeTransaction", proof, message, index)
}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) ExecuteTransaction(proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.ExecuteTransaction(&_SingleTokenOffRamp.TransactOpts, proof, message, index)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorSession) ExecuteTransaction(proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.ExecuteTransaction(&_SingleTokenOffRamp.TransactOpts, proof, message, index)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRamp.contract.Transact(opts, "pause")
}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) Pause() (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.Pause(&_SingleTokenOffRamp.TransactOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorSession) Pause() (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.Pause(&_SingleTokenOffRamp.TransactOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRamp.contract.Transact(opts, "setAFN", afn)
}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.SetAFN(&_SingleTokenOffRamp.TransactOpts, afn)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.SetAFN(&_SingleTokenOffRamp.TransactOpts, afn)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactor) SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _SingleTokenOffRamp.contract.Transact(opts, "setConfig", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.SetConfig(&_SingleTokenOffRamp.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.SetConfig(&_SingleTokenOffRamp.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactor) SetExecutionDelaySeconds(opts *bind.TransactOpts, executionDelaySeconds *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRamp.contract.Transact(opts, "setExecutionDelaySeconds", executionDelaySeconds)
}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) SetExecutionDelaySeconds(executionDelaySeconds *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.SetExecutionDelaySeconds(&_SingleTokenOffRamp.TransactOpts, executionDelaySeconds)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorSession) SetExecutionDelaySeconds(executionDelaySeconds *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.SetExecutionDelaySeconds(&_SingleTokenOffRamp.TransactOpts, executionDelaySeconds)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactor) SetMaxSecondsWithoutAFNHeartbeat(opts *bind.TransactOpts, newTime *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRamp.contract.Transact(opts, "setMaxSecondsWithoutAFNHeartbeat", newTime)
}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) SetMaxSecondsWithoutAFNHeartbeat(newTime *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.SetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRamp.TransactOpts, newTime)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorSession) SetMaxSecondsWithoutAFNHeartbeat(newTime *big.Int) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.SetMaxSecondsWithoutAFNHeartbeat(&_SingleTokenOffRamp.TransactOpts, newTime)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRamp.contract.Transact(opts, "transferOwnership", to)
}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.TransferOwnership(&_SingleTokenOffRamp.TransactOpts, to)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.TransferOwnership(&_SingleTokenOffRamp.TransactOpts, to)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _SingleTokenOffRamp.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.Transmit(&_SingleTokenOffRamp.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.Transmit(&_SingleTokenOffRamp.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SingleTokenOffRamp.contract.Transact(opts, "unpause")
}

func (_SingleTokenOffRamp *SingleTokenOffRampSession) Unpause() (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.Unpause(&_SingleTokenOffRamp.TransactOpts)
}

func (_SingleTokenOffRamp *SingleTokenOffRampTransactorSession) Unpause() (*types.Transaction, error) {
	return _SingleTokenOffRamp.Contract.Unpause(&_SingleTokenOffRamp.TransactOpts)
}

type SingleTokenOffRampAFNMaxHeartbeatTimeSetIterator struct {
	Event *SingleTokenOffRampAFNMaxHeartbeatTimeSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampAFNMaxHeartbeatTimeSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampAFNMaxHeartbeatTimeSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampAFNMaxHeartbeatTimeSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampAFNMaxHeartbeatTimeSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampAFNMaxHeartbeatTimeSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampAFNMaxHeartbeatTimeSet struct {
	OldTime *big.Int
	NewTime *big.Int
	Raw     types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterAFNMaxHeartbeatTimeSet(opts *bind.FilterOpts) (*SingleTokenOffRampAFNMaxHeartbeatTimeSetIterator, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "AFNMaxHeartbeatTimeSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampAFNMaxHeartbeatTimeSetIterator{contract: _SingleTokenOffRamp.contract, event: "AFNMaxHeartbeatTimeSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchAFNMaxHeartbeatTimeSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampAFNMaxHeartbeatTimeSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "AFNMaxHeartbeatTimeSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampAFNMaxHeartbeatTimeSet)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "AFNMaxHeartbeatTimeSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParseAFNMaxHeartbeatTimeSet(log types.Log) (*SingleTokenOffRampAFNMaxHeartbeatTimeSet, error) {
	event := new(SingleTokenOffRampAFNMaxHeartbeatTimeSet)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "AFNMaxHeartbeatTimeSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampAFNSetIterator struct {
	Event *SingleTokenOffRampAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampAFNSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterAFNSet(opts *bind.FilterOpts) (*SingleTokenOffRampAFNSetIterator, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampAFNSetIterator{contract: _SingleTokenOffRamp.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampAFNSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampAFNSet)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParseAFNSet(log types.Log) (*SingleTokenOffRampAFNSet, error) {
	event := new(SingleTokenOffRampAFNSet)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampConfigSetIterator struct {
	Event *SingleTokenOffRampConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampConfigSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	EncodedConfigVersion      uint64
	Encoded                   []byte
	Raw                       types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterConfigSet(opts *bind.FilterOpts) (*SingleTokenOffRampConfigSetIterator, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampConfigSetIterator{contract: _SingleTokenOffRamp.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampConfigSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampConfigSet)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParseConfigSet(log types.Log) (*SingleTokenOffRampConfigSet, error) {
	event := new(SingleTokenOffRampConfigSet)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampCrossChainMessageExecutedIterator struct {
	Event *SingleTokenOffRampCrossChainMessageExecuted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampCrossChainMessageExecutedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampCrossChainMessageExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampCrossChainMessageExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampCrossChainMessageExecutedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampCrossChainMessageExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampCrossChainMessageExecuted struct {
	SequenceNumber *big.Int
	Raw            types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterCrossChainMessageExecuted(opts *bind.FilterOpts, sequenceNumber []*big.Int) (*SingleTokenOffRampCrossChainMessageExecutedIterator, error) {

	var sequenceNumberRule []interface{}
	for _, sequenceNumberItem := range sequenceNumber {
		sequenceNumberRule = append(sequenceNumberRule, sequenceNumberItem)
	}

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "CrossChainMessageExecuted", sequenceNumberRule)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampCrossChainMessageExecutedIterator{contract: _SingleTokenOffRamp.contract, event: "CrossChainMessageExecuted", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchCrossChainMessageExecuted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampCrossChainMessageExecuted, sequenceNumber []*big.Int) (event.Subscription, error) {

	var sequenceNumberRule []interface{}
	for _, sequenceNumberItem := range sequenceNumber {
		sequenceNumberRule = append(sequenceNumberRule, sequenceNumberItem)
	}

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "CrossChainMessageExecuted", sequenceNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampCrossChainMessageExecuted)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "CrossChainMessageExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParseCrossChainMessageExecuted(log types.Log) (*SingleTokenOffRampCrossChainMessageExecuted, error) {
	event := new(SingleTokenOffRampCrossChainMessageExecuted)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "CrossChainMessageExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampExecutionDelaySecondsSetIterator struct {
	Event *SingleTokenOffRampExecutionDelaySecondsSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampExecutionDelaySecondsSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampExecutionDelaySecondsSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampExecutionDelaySecondsSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampExecutionDelaySecondsSetIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampExecutionDelaySecondsSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampExecutionDelaySecondsSet struct {
	Delay *big.Int
	Raw   types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterExecutionDelaySecondsSet(opts *bind.FilterOpts) (*SingleTokenOffRampExecutionDelaySecondsSetIterator, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "ExecutionDelaySecondsSet")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampExecutionDelaySecondsSetIterator{contract: _SingleTokenOffRamp.contract, event: "ExecutionDelaySecondsSet", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchExecutionDelaySecondsSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampExecutionDelaySecondsSet) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "ExecutionDelaySecondsSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampExecutionDelaySecondsSet)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "ExecutionDelaySecondsSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParseExecutionDelaySecondsSet(log types.Log) (*SingleTokenOffRampExecutionDelaySecondsSet, error) {
	event := new(SingleTokenOffRampExecutionDelaySecondsSet)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "ExecutionDelaySecondsSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampNewTokenBucketConstructedIterator struct {
	Event *SingleTokenOffRampNewTokenBucketConstructed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampNewTokenBucketConstructedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampNewTokenBucketConstructed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampNewTokenBucketConstructed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampNewTokenBucketConstructedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampNewTokenBucketConstructedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampNewTokenBucketConstructed struct {
	Rate     *big.Int
	Capacity *big.Int
	Full     bool
	Raw      types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterNewTokenBucketConstructed(opts *bind.FilterOpts) (*SingleTokenOffRampNewTokenBucketConstructedIterator, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "NewTokenBucketConstructed")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampNewTokenBucketConstructedIterator{contract: _SingleTokenOffRamp.contract, event: "NewTokenBucketConstructed", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchNewTokenBucketConstructed(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampNewTokenBucketConstructed) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "NewTokenBucketConstructed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampNewTokenBucketConstructed)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "NewTokenBucketConstructed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParseNewTokenBucketConstructed(log types.Log) (*SingleTokenOffRampNewTokenBucketConstructed, error) {
	event := new(SingleTokenOffRampNewTokenBucketConstructed)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "NewTokenBucketConstructed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampOwnershipTransferRequestedIterator struct {
	Event *SingleTokenOffRampOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampOwnershipTransferRequestedIterator{contract: _SingleTokenOffRamp.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampOwnershipTransferRequested)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParseOwnershipTransferRequested(log types.Log) (*SingleTokenOffRampOwnershipTransferRequested, error) {
	event := new(SingleTokenOffRampOwnershipTransferRequested)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampOwnershipTransferredIterator struct {
	Event *SingleTokenOffRampOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampOwnershipTransferredIterator{contract: _SingleTokenOffRamp.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampOwnershipTransferred)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParseOwnershipTransferred(log types.Log) (*SingleTokenOffRampOwnershipTransferred, error) {
	event := new(SingleTokenOffRampOwnershipTransferred)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampPausedIterator struct {
	Event *SingleTokenOffRampPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampPausedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterPaused(opts *bind.FilterOpts) (*SingleTokenOffRampPausedIterator, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampPausedIterator{contract: _SingleTokenOffRamp.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampPaused) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampPaused)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParsePaused(log types.Log) (*SingleTokenOffRampPaused, error) {
	event := new(SingleTokenOffRampPaused)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampReportAcceptedIterator struct {
	Event *SingleTokenOffRampReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampReportAccepted struct {
	Report CCIPRelayReport
	Raw    types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*SingleTokenOffRampReportAcceptedIterator, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampReportAcceptedIterator{contract: _SingleTokenOffRamp.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampReportAccepted) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampReportAccepted)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParseReportAccepted(log types.Log) (*SingleTokenOffRampReportAccepted, error) {
	event := new(SingleTokenOffRampReportAccepted)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampTransmitedIterator struct {
	Event *SingleTokenOffRampTransmited

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampTransmitedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampTransmited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampTransmited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampTransmitedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampTransmitedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampTransmited struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterTransmited(opts *bind.FilterOpts) (*SingleTokenOffRampTransmitedIterator, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "Transmited")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampTransmitedIterator{contract: _SingleTokenOffRamp.contract, event: "Transmited", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchTransmited(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampTransmited) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "Transmited")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampTransmited)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "Transmited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParseTransmited(log types.Log) (*SingleTokenOffRampTransmited, error) {
	event := new(SingleTokenOffRampTransmited)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "Transmited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SingleTokenOffRampUnpausedIterator struct {
	Event *SingleTokenOffRampUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *SingleTokenOffRampUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SingleTokenOffRampUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(SingleTokenOffRampUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *SingleTokenOffRampUnpausedIterator) Error() error {
	return it.fail
}

func (it *SingleTokenOffRampUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type SingleTokenOffRampUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) FilterUnpaused(opts *bind.FilterOpts) (*SingleTokenOffRampUnpausedIterator, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &SingleTokenOffRampUnpausedIterator{contract: _SingleTokenOffRamp.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampUnpaused) (event.Subscription, error) {

	logs, sub, err := _SingleTokenOffRamp.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(SingleTokenOffRampUnpaused)
				if err := _SingleTokenOffRamp.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_SingleTokenOffRamp *SingleTokenOffRampFilterer) ParseUnpaused(log types.Log) (*SingleTokenOffRampUnpaused, error) {
	event := new(SingleTokenOffRampUnpaused)
	if err := _SingleTokenOffRamp.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}

func (_SingleTokenOffRamp *SingleTokenOffRamp) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _SingleTokenOffRamp.abi.Events["AFNMaxHeartbeatTimeSet"].ID:
		return _SingleTokenOffRamp.ParseAFNMaxHeartbeatTimeSet(log)
	case _SingleTokenOffRamp.abi.Events["AFNSet"].ID:
		return _SingleTokenOffRamp.ParseAFNSet(log)
	case _SingleTokenOffRamp.abi.Events["ConfigSet"].ID:
		return _SingleTokenOffRamp.ParseConfigSet(log)
	case _SingleTokenOffRamp.abi.Events["CrossChainMessageExecuted"].ID:
		return _SingleTokenOffRamp.ParseCrossChainMessageExecuted(log)
	case _SingleTokenOffRamp.abi.Events["ExecutionDelaySecondsSet"].ID:
		return _SingleTokenOffRamp.ParseExecutionDelaySecondsSet(log)
	case _SingleTokenOffRamp.abi.Events["NewTokenBucketConstructed"].ID:
		return _SingleTokenOffRamp.ParseNewTokenBucketConstructed(log)
	case _SingleTokenOffRamp.abi.Events["OwnershipTransferRequested"].ID:
		return _SingleTokenOffRamp.ParseOwnershipTransferRequested(log)
	case _SingleTokenOffRamp.abi.Events["OwnershipTransferred"].ID:
		return _SingleTokenOffRamp.ParseOwnershipTransferred(log)
	case _SingleTokenOffRamp.abi.Events["Paused"].ID:
		return _SingleTokenOffRamp.ParsePaused(log)
	case _SingleTokenOffRamp.abi.Events["ReportAccepted"].ID:
		return _SingleTokenOffRamp.ParseReportAccepted(log)
	case _SingleTokenOffRamp.abi.Events["Transmited"].ID:
		return _SingleTokenOffRamp.ParseTransmited(log)
	case _SingleTokenOffRamp.abi.Events["Unpaused"].ID:
		return _SingleTokenOffRamp.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (SingleTokenOffRampAFNMaxHeartbeatTimeSet) Topic() common.Hash {
	return common.HexToHash("0x72e72b3dfd44fb4d803f52b2d895c7347b912da657d0f77599a0afc26956c251")
}

func (SingleTokenOffRampAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (SingleTokenOffRampConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (SingleTokenOffRampCrossChainMessageExecuted) Topic() common.Hash {
	return common.HexToHash("0xc51bf0f6d90b467e0849da0ad18a4d9144a4b78b9f83202e1c65cd68f72d4a38")
}

func (SingleTokenOffRampExecutionDelaySecondsSet) Topic() common.Hash {
	return common.HexToHash("0xfbb92e09fd0b7bcabafe655657e745c10bcd9812c1e32e205e477a3c5ff74fc0")
}

func (SingleTokenOffRampNewTokenBucketConstructed) Topic() common.Hash {
	return common.HexToHash("0xfaf3310019e551542b5c6014c1ae13e2a8d3943d7611d779c4df9b36c111924f")
}

func (SingleTokenOffRampOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (SingleTokenOffRampOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (SingleTokenOffRampPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (SingleTokenOffRampReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x07d7bce06be2a7b0230e4dd0d72523c0407e82419ab1d947c5ddaf59ca36484e")
}

func (SingleTokenOffRampTransmited) Topic() common.Hash {
	return common.HexToHash("0xd78f2a94a6a9ba96eb1197c7833ce19ec0fef80881049b0bd8ced9ee533739e3")
}

func (SingleTokenOffRampUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_SingleTokenOffRamp *SingleTokenOffRamp) Address() common.Address {
	return _SingleTokenOffRamp.address
}

type SingleTokenOffRampInterface interface {
	CHAINID(opts *bind.CallOpts) (*big.Int, error)

	POOL(opts *bind.CallOpts) (common.Address, error)

	SOURCECHAINID(opts *bind.CallOpts) (*big.Int, error)

	TOKEN(opts *bind.CallOpts) (common.Address, error)

	GenerateMerkleRoot(opts *bind.CallOpts, proof [][32]byte, leaf [32]byte, index *big.Int) ([32]byte, error)

	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetExecuted(opts *bind.CallOpts, sequenceNumber *big.Int) (bool, error)

	GetExecutionDelaySeconds(opts *bind.CallOpts) (*big.Int, error)

	GetLastReport(opts *bind.CallOpts) (CCIPRelayReport, error)

	GetMaxSecondsWithoutAFNHeartbeat(opts *bind.CallOpts) (*big.Int, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	GetTokenBucket(opts *bind.CallOpts) (TokenLimitsTokenBucket, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ConfigureTokenBucket(opts *bind.TransactOpts, rate *big.Int, capacity *big.Int, full bool) (*types.Transaction, error)

	ExecuteTransaction(opts *bind.TransactOpts, proof [][32]byte, message CCIPMessage, index *big.Int) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	SetExecutionDelaySeconds(opts *bind.TransactOpts, executionDelaySeconds *big.Int) (*types.Transaction, error)

	SetMaxSecondsWithoutAFNHeartbeat(opts *bind.TransactOpts, newTime *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterAFNMaxHeartbeatTimeSet(opts *bind.FilterOpts) (*SingleTokenOffRampAFNMaxHeartbeatTimeSetIterator, error)

	WatchAFNMaxHeartbeatTimeSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampAFNMaxHeartbeatTimeSet) (event.Subscription, error)

	ParseAFNMaxHeartbeatTimeSet(log types.Log) (*SingleTokenOffRampAFNMaxHeartbeatTimeSet, error)

	FilterAFNSet(opts *bind.FilterOpts) (*SingleTokenOffRampAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*SingleTokenOffRampAFNSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*SingleTokenOffRampConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*SingleTokenOffRampConfigSet, error)

	FilterCrossChainMessageExecuted(opts *bind.FilterOpts, sequenceNumber []*big.Int) (*SingleTokenOffRampCrossChainMessageExecutedIterator, error)

	WatchCrossChainMessageExecuted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampCrossChainMessageExecuted, sequenceNumber []*big.Int) (event.Subscription, error)

	ParseCrossChainMessageExecuted(log types.Log) (*SingleTokenOffRampCrossChainMessageExecuted, error)

	FilterExecutionDelaySecondsSet(opts *bind.FilterOpts) (*SingleTokenOffRampExecutionDelaySecondsSetIterator, error)

	WatchExecutionDelaySecondsSet(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampExecutionDelaySecondsSet) (event.Subscription, error)

	ParseExecutionDelaySecondsSet(log types.Log) (*SingleTokenOffRampExecutionDelaySecondsSet, error)

	FilterNewTokenBucketConstructed(opts *bind.FilterOpts) (*SingleTokenOffRampNewTokenBucketConstructedIterator, error)

	WatchNewTokenBucketConstructed(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampNewTokenBucketConstructed) (event.Subscription, error)

	ParseNewTokenBucketConstructed(log types.Log) (*SingleTokenOffRampNewTokenBucketConstructed, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*SingleTokenOffRampOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SingleTokenOffRampOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*SingleTokenOffRampOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*SingleTokenOffRampPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*SingleTokenOffRampPaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*SingleTokenOffRampReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*SingleTokenOffRampReportAccepted, error)

	FilterTransmited(opts *bind.FilterOpts) (*SingleTokenOffRampTransmitedIterator, error)

	WatchTransmited(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampTransmited) (event.Subscription, error)

	ParseTransmited(log types.Log) (*SingleTokenOffRampTransmited, error)

	FilterUnpaused(opts *bind.FilterOpts) (*SingleTokenOffRampUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SingleTokenOffRampUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*SingleTokenOffRampUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

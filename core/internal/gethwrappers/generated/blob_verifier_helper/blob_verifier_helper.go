// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package blob_verifier_helper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type BlobVerifierInterfaceBlobVerifierConfig struct {
	SourceChainId    *big.Int
	OnRamps          []common.Address
	MinSeqNrByOnRamp []uint64
}

type CCIPInterval struct {
	Min uint64
	Max uint64
}

type CCIPRelayReport struct {
	OnRamps     []common.Address
	Intervals   []CCIPInterval
	MerkleRoots [][32]byte
	RootOfRoots [32]byte
}

var BlobVerifierHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeWithoutAFNSignal\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAFNSignal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadHealthConfig\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval\",\"name\":\"interval\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"InvalidRelayReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StaleAFNHeartbeat\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"name\":\"UnSupportedOnRamp\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"AFNMaxHeartbeatTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"oldAFN\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractAFNInterface\",\"name\":\"newAFN\",\"type\":\"address\"}],\"name\":\"AFNSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"indexed\":false,\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"BlobVerifierConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCCIP.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rootOfRoots\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structCCIP.RelayReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAFN\",\"outputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSecondsWithoutAFNHeartbeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"isHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rp\",\"type\":\"bytes\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootToReset\",\"type\":\"bytes32[]\"}],\"name\":\"resetUnblessedRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_expectedNextMinByOnRamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractAFNInterface\",\"name\":\"afn\",\"type\":\"address\"}],\"name\":\"setAFN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"onRamps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"minSeqNrByOnRamp\",\"type\":\"uint64[]\"}],\"internalType\":\"structBlobVerifierInterface.BlobVerifierConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setMaxSecondsWithoutAFNHeartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"innerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"innerProofFlagBits\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"outerProofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"outerProofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b506040516200439b3803806200439b83398101604081905262000034916200057c565b6000805460ff191681558490849084908490600190849084903390819081620000a45760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0380851661010002610100600160a81b031990921691909117909155811615620000de57620000de8162000258565b5050506001600160a01b0382161580620000f6575080155b156200011557604051630958ef9b60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b039390931692909217909155600355151560805260a08490528051600b90815560208083015180518493926200016692600c9291019062000309565b50604082015180516200018491600284019160209091019062000373565b5090505060005b600c548110156200024957600d805482908110620001ad57620001ad620006af565b90600052602060002090600491828204019190066008029054906101000a90046001600160401b0316600e6000600b6001018481548110620001f357620001f3620006af565b6000918252602080832091909101546001600160a01b03168352820192909252604001902080546001600160401b0319166001600160401b03929092169190911790556200024181620006c5565b90506200018b565b505050505050505050620006ed565b336001600160a01b03821603620002b25760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016200009b565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b82805482825590600052602060002090810192821562000361579160200282015b828111156200036157825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200032a565b506200036f92915062000428565b5090565b82805482825590600052602060002090600301600490048101928215620003615791602002820160005b83821115620003e957835183826101000a8154816001600160401b0302191690836001600160401b0316021790555092602001926008016020816007010492830192600103026200039d565b80156200041e5782816101000a8154906001600160401b030219169055600801602081600701049283019260010302620003e9565b50506200036f9291505b5b808211156200036f576000815560010162000429565b6001600160a01b03811681146200045557600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000493576200049362000458565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004c457620004c462000458565b604052919050565b60006001600160401b03821115620004e857620004e862000458565b5060051b60200190565b600082601f8301126200050457600080fd5b815160206200051d6200051783620004cc565b62000499565b82815260059290921b840181019181810190868411156200053d57600080fd5b8286015b84811015620005715780516001600160401b0381168114620005635760008081fd5b835291830191830162000541565b509695505050505050565b600080600080608085870312156200059357600080fd5b84519350602080860151620005a8816200043f565b6040870151606088015191955093506001600160401b0380821115620005cd57600080fd5b908701906060828a031215620005e257600080fd5b620005ec6200046e565b8251815283830151828111156200060257600080fd5b8301601f81018b136200061457600080fd5b8051620006256200051782620004cc565b81815260059190911b8201860190868101908d8311156200064557600080fd5b928701925b828410156200067057835162000660816200043f565b825292870192908701906200064a565b80888601525050505060408301519350818411156200068e57600080fd5b6200069c8a858501620004f2565b6040820152969995985093965050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620006e657634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a051613c8862000713600039600061030f01526000610c810152613c886000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80638da5cb5b116100ee578063b6608c3b11610097578063e3d0e71211610071578063e3d0e7121461042d578063e71e65ce14610440578063f2fde38b14610453578063f47a86901461046657600080fd5b8063b6608c3b146103c2578063c3f909d4146103d5578063d7d329ee146103ea57600080fd5b8063b034909c116100c8578063b034909c14610394578063b1dc65a41461039c578063b5767166146103af57600080fd5b80638da5cb5b14610331578063a7206cd614610354578063afcb95d71461037457600080fd5b80635c975abb1161015b57806381ff70481161013557806381ff7048146102bf57806383bccd7d146102ef5780638456cb591461030257806385e1f4d01461030a57600080fd5b80635c975abb1461029757806379ba5097146102a257806381411834146102aa57600080fd5b80632222dd421161018c5780632222dd421461022d5780633f4ba83a1461026c578063567c814b1461027457600080fd5b806307761f3d146101b3578063108ee5fc146101d9578063181f5a77146101ee575b600080fd5b6101c66101c1366004612a89565b610479565b6040519081526020015b60405180910390f35b6101ec6101e7366004612b18565b610638565b005b604080518082018252601281527f426c6f62566572696669657220312e302e300000000000000000000000000000602082015290516101d09190612ba0565b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d0565b6101ec610714565b610287610282366004612bb3565b610726565b60405190151581526020016101d0565b60005460ff16610287565b6101ec61086d565b6102b2610994565b6040516101d09190612c1d565b6006546004546040805163ffffffff808516825264010000000090940490931660208401528201526060016101d0565b6101ec6102fd366004612c30565b610a03565b6101ec610b34565b6101c67f000000000000000000000000000000000000000000000000000000000000000081565b600054610100900473ffffffffffffffffffffffffffffffffffffffff16610247565b6101c6610362366004612bb3565b6000908152600a602052604090205490565b6040805160018152600060208201819052918101919091526060016101d0565b6003546101c6565b6101ec6103aa366004612cb7565b610b44565b6101ec6103bd366004612e2a565b6111ed565b6101ec6103d0366004612bb3565b6111fc565b6103dd61127c565b6040516101d09190612e67565b6104146103f8366004612b18565b600e6020526000908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101d0565b6101ec61043b366004612f91565b6113b7565b6101c661044e36600461305e565b611d9c565b6101ec610461366004612b18565b611eb4565b6101ec610474366004613109565b611ec5565b6000808451905060006001855183610491919061317a565b61049b9190613192565b90506101008111156104ac57600080fd5b60008167ffffffffffffffff8111156104c7576104c7612930565b6040519080825280602002602001820160405280156104f0578160200160208202803683370190505b5090506000806000805b858110156105dc57600189821c8116146105b681610536578b5160018501948d918110610529576105296131a9565b6020026020010151610574565b888610610554578651600186019588918110610529576105296131a9565b8c5160018701968e91811061056b5761056b6131a9565b60200260200101515b89871061059f578751600187019689918110610592576105926131a9565b6020026020010151611f1d565b8d5160018801978f918110610592576105926131a9565b8683815181106105c8576105c86131a9565b6020908102919091010152506001016104fa565b50841561060d578360018603815181106105f8576105f86131a9565b60200260200101519650505050505050610631565b89600081518110610620576106206131a9565b602002602001015196505050505050505b9392505050565b610640611fd8565b73ffffffffffffffffffffffffffffffffffffffff811661068d576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd2891015b60405180910390a15050565b61071c611fd8565b61072461205e565b565b600254604080517fcf72b39b000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163cf72b39b9160048083019260209291908290030181865afa158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ba91906131d8565b1580156108675750600354600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663343157b46040518163ffffffff1660e01b8152600401606060405180830381865afa158015610832573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085691906131fa565b602001516108649084613192565b11155b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054336101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8416178455600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560405173ffffffffffffffffffffffffffffffffffffffff919093041692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b606060098054806020026020016040519081016040528092919081815260200182805480156109f957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116109ce575b5050505050905090565b610a0b611fd8565b80600b610a18828261341b565b90505060005b600c54811015610af957600d805482908110610a3c57610a3c6131a9565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16600e6000600b6001018481548110610a8057610a806131a9565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92909216919091179055610af281613504565b9050610a1e565b507ff6fd57a63b6bb141999904fde020d32c1b1b4b27d5f96b44d6c702eb8821c6e781604051610b2991906135a3565b60405180910390a150565b610b3c611fd8565b61072461213f565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c013591610b9a91849163ffffffff851691908e908e90819084018382808284376000920191909152506121ff92505050565b6040805183815262ffffff600884901c1660208201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16040805160608101825260045480825260055460ff80821660208501526101009091041692820192909252908314610c6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f636f6e666967446967657374206d69736d61746368000000000000000000000060448201526064016108ea565b610c7d8b8b8b8b8b8b6126b0565b60007f000000000000000000000000000000000000000000000000000000000000000015610cda57600282602001518360400151610cbb9190613685565b610cc591906136aa565b610cd0906001613685565b60ff169050610cf0565b6020820151610cea906001613685565b60ff1690505b888114610d59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e61747572657300000000000060448201526064016108ea565b888714610dc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e000060448201526064016108ea565b3360009081526007602090815260408083208151808301909252805460ff80821684529293919291840191610100909104166002811115610e0557610e056136f3565b6002811115610e1657610e166136f3565b9052509050600281602001516002811115610e3357610e336136f3565b148015610e7a57506009816000015160ff1681548110610e5557610e556131a9565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b610ee0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f756e617574686f72697a6564207472616e736d6974746572000000000000000060448201526064016108ea565b505050505060008888604051610ef7929190613722565b604051908190038120610f0e918c90602001613732565b604051602081830303815290604052805190602001209050610f2e612911565b604080518082019091526000808252602082015260005b888110156111cb576000600185888460208110610f6457610f646131a9565b610f7191901a601b613685565b8d8d86818110610f8357610f836131a9565b905060200201358c8c87818110610f9c57610f9c6131a9565b9050602002013560405160008152602001604052604051610fd9949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610ffb573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff811660009081526007602090815290849020838501909452835460ff8082168552929650929450840191610100900416600281111561107b5761107b6136f3565b600281111561108c5761108c6136f3565b90525092506001836020015160028111156110a9576110a96136f3565b14611110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e000060448201526064016108ea565b8251849060ff16601f8110611127576111276131a9565b602002015115611193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f6e2d756e69717565207369676e617475726500000000000000000000000060448201526064016108ea565b600184846000015160ff16601f81106111ae576111ae6131a9565b9115156020909202015250806111c381613504565b915050610f45565b5050505063ffffffff81106111e2576111e261374e565b505050505050505050565b6111f9600080836121ff565b50565b611204611fd8565b8060000361123e576040517f0958ef9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380549082905560408051828152602081018490527f72e72b3dfd44fb4d803f52b2d895c7347b912da657d0f77599a0afc26956c2519101610708565b6112a060405180606001604052806000815260200160608152602001606081525090565b600b604051806060016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561131d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116112f2575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156113a957602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116113645790505b505050505081525050905090565b855185518560ff16601f83111561142a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e6572730000000000000000000000000000000060448201526064016108ea565b60008111611494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f736974697665000000000000000000000000000060448201526064016108ea565b818314611522576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e0000000000000000000000000000000000000000000000000000000060648201526084016108ea565b61152d8160036132be565b8311611595576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f2068696768000000000000000060448201526064016108ea565b61159d611fd8565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b60085415611790576008546000906115f590600190613192565b905060006008828154811061160c5761160c6131a9565b60009182526020822001546009805473ffffffffffffffffffffffffffffffffffffffff90921693509084908110611646576116466131a9565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff85811684526007909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000908116909155929091168084529220805490911690556008805491925090806116c6576116c661377d565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055600980548061172f5761172f61377d565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055506115db915050565b60005b815151811015611bf757600060076000846000015184815181106117b9576117b96131a9565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115611803576118036136f3565b1461186a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e6572206164647265737300000000000000000060448201526064016108ea565b6040805180820190915260ff8216815260016020820152825180516007916000918590811061189b5761189b6131a9565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000161761010083600281111561193c5761193c6136f3565b02179055506000915061194c9050565b6007600084602001518481518110611966576119666131a9565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff1660028111156119b0576119b06136f3565b14611a17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d697474657220616464726573730000000060448201526064016108ea565b6040805180820190915260ff821681526020810160028152506007600084602001518481518110611a4a57611a4a6131a9565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611aeb57611aeb6136f3565b021790555050825180516008925083908110611b0957611b096131a9565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921790915582015180516009919083908110611b8557611b856131a9565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905580611bef81613504565b915050611793565b506040810151600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600680547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff438116820292831785559083048116936001939092600092611c899286929082169116176137ac565b92506101000a81548163ffffffff021916908363ffffffff160217905550611ce84630600660009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a0015161276b565b6004819055825180516005805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560065460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0598611d87988b98919763ffffffff9092169690959194919391926137d4565b60405180910390a15050505050505050505050565b600080611e0e8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152508b9250610479915050565b60408051600180825281830190925291925060009190602080830190803683370190505090508181600081518110611e4857611e486131a9565b6020026020010181815250506000611e95828888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a9250610479915050565b6000908152600a60205260409020549c9b505050505050505050505050565b611ebc611fd8565b6111f981612816565b611ecd611fd8565b60005b81811015611f1857600a6000848484818110611eee57611eee6131a9565b9050602002013581526020019081526020016000206000905580611f1190613504565b9050611ed0565b505050565b6000818310611f7f57604080517f01000000000000000000000000000000000000000000000000000000000000006020808301919091526021820185905260418083018790528351808403909101815260619092019092528051910120610631565b604080517f01000000000000000000000000000000000000000000000000000000000000006020808301919091526021820186905260418083018690528351808403909101815260619092019092528051910120610631565b600054610100900473ffffffffffffffffffffffffffffffffffffffff163314610724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016108ea565b60005460ff166120ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108ea565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005460ff16156121ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016108ea565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121153390565b60005460ff161561226c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016108ea565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf72b39b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fd91906131d8565b15612333576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254604080517f343157b4000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163343157b49160048083019260609291908290030181865afa1580156123a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c791906131fa565b90506003548160200151426123dc9190613192565b1115612414576040517fa8c8866900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008280602001905181019061242a9190613956565b805151602082015151919250908114158061244a57508160400151518114155b1561248357816040517fa13dc2f80000000000000000000000000000000000000000000000000000000081526004016108ea9190613aa4565b60005b81811015612659576000836000015182815181106124a6576124a66131a9565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff81166000908152600e8352604081205492870151805192945067ffffffffffffffff909316929091859081106124ff576124ff6131a9565b602002602001015190508167ffffffffffffffff16600003612565576040517feed397ef00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016108ea565b805167ffffffffffffffff838116911614158061259d5750806020015167ffffffffffffffff16816000015167ffffffffffffffff16115b156125d85780836040517f3389cbd50000000000000000000000000000000000000000000000000000000081526004016108ea929190613b7b565b60208101516125e8906001613bc3565b73ffffffffffffffffffffffffffffffffffffffff939093166000908152600e6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9094169390931790925550612652905081613504565b9050612486565b5060608201516000908152600a602052604090819020429055517f0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef906126a0908490613aa4565b60405180910390a1505050505050565b60006126bd8260206132be565b6126c88560206132be565b6126d48861014461317a565b6126de919061317a565b6126e8919061317a565b6126f390600061317a565b905036811461275e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d61746368000000000000000060448201526064016108ea565b50505050505050565b5050565b6000808a8a8a8a8a8a8a8a8a60405160200161278f99989796959493929190613be6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff821603612895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016108ea565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929361010090910416917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b604051806103e00160405280601f906020820280368337509192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561298257612982612930565b60405290565b6040516080810167ffffffffffffffff8111828210171561298257612982612930565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156129f2576129f2612930565b604052919050565b600067ffffffffffffffff821115612a1457612a14612930565b5060051b60200190565b600082601f830112612a2f57600080fd5b81356020612a44612a3f836129fa565b6129ab565b82815260059290921b84018101918181019086841115612a6357600080fd5b8286015b84811015612a7e5780358352918301918301612a67565b509695505050505050565b600080600060608486031215612a9e57600080fd5b833567ffffffffffffffff80821115612ab657600080fd5b612ac287838801612a1e565b94506020860135915080821115612ad857600080fd5b50612ae586828701612a1e565b925050604084013590509250925092565b73ffffffffffffffffffffffffffffffffffffffff811681146111f957600080fd5b600060208284031215612b2a57600080fd5b813561063181612af6565b6000815180845260005b81811015612b5b57602081850181015186830182015201612b3f565b81811115612b6d576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106316020830184612b35565b600060208284031215612bc557600080fd5b5035919050565b600081518084526020808501945080840160005b83811015612c1257815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612be0565b509495945050505050565b6020815260006106316020830184612bcc565b600060208284031215612c4257600080fd5b813567ffffffffffffffff811115612c5957600080fd5b82016060818503121561063157600080fd5b60008083601f840112612c7d57600080fd5b50813567ffffffffffffffff811115612c9557600080fd5b6020830191508360208260051b8501011115612cb057600080fd5b9250929050565b60008060008060008060008060e0898b031215612cd357600080fd5b606089018a811115612ce457600080fd5b8998503567ffffffffffffffff80821115612cfe57600080fd5b818b0191508b601f830112612d1257600080fd5b813581811115612d2157600080fd5b8c6020828501011115612d3357600080fd5b6020830199508098505060808b0135915080821115612d5157600080fd5b612d5d8c838d01612c6b565b909750955060a08b0135915080821115612d7657600080fd5b50612d838b828c01612c6b565b999c989b50969995989497949560c00135949350505050565b600082601f830112612dad57600080fd5b813567ffffffffffffffff811115612dc757612dc7612930565b612df860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016129ab565b818152846020838601011115612e0d57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612e3c57600080fd5b813567ffffffffffffffff811115612e5357600080fd5b612e5f84828501612d9c565b949350505050565b600060208083528351818401528084015160606040850152612e8c6080850182612bcc565b60408601518582037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0016060870152805180835290840192506000918401905b80831015612a7e57835167ffffffffffffffff168252928401926001929092019190840190612ecc565b600082601f830112612f0757600080fd5b81356020612f17612a3f836129fa565b82815260059290921b84018101918181019086841115612f3657600080fd5b8286015b84811015612a7e578035612f4d81612af6565b8352918301918301612f3a565b803560ff81168114612f6b57600080fd5b919050565b67ffffffffffffffff811681146111f957600080fd5b8035612f6b81612f70565b60008060008060008060c08789031215612faa57600080fd5b863567ffffffffffffffff80821115612fc257600080fd5b612fce8a838b01612ef6565b97506020890135915080821115612fe457600080fd5b612ff08a838b01612ef6565b9650612ffe60408a01612f5a565b9550606089013591508082111561301457600080fd5b6130208a838b01612d9c565b945061302e60808a01612f86565b935060a089013591508082111561304457600080fd5b5061305189828a01612d9c565b9150509295509295509295565b60008060008060008060008060a0898b03121561307a57600080fd5b883567ffffffffffffffff8082111561309257600080fd5b61309e8c838d01612c6b565b909a50985060208b01359150808211156130b757600080fd5b6130c38c838d01612c6b565b909850965060408b0135955060608b01359150808211156130e357600080fd5b506130f08b828c01612c6b565b999c989b50969995989497949560800135949350505050565b6000806020838503121561311c57600080fd5b823567ffffffffffffffff81111561313357600080fd5b61313f85828601612c6b565b90969095509350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561318d5761318d61314b565b500190565b6000828210156131a4576131a461314b565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156131ea57600080fd5b8151801515811461063157600080fd5b60006060828403121561320c57600080fd5b6040516060810181811067ffffffffffffffff8211171561322f5761322f612930565b80604052508251815260208301516020820152604083015160408201528091505092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261328b57600080fd5b83018035915067ffffffffffffffff8211156132a657600080fd5b6020019150600581901b3603821315612cb057600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132f6576132f661314b565b500290565b5b8181101561276757600081556001016132fc565b6000813561086781612f70565b6801000000000000000083111561333657613336612930565b8054838255808410156133ad578160005260206000206003850160021c810160188660031b168015613397577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8083018054828460200360031b1c16815550505b506133aa6003840160021c8301826132fb565b50505b506000818152602081208391805b8681101561275e576133f36133cf85613310565b845467ffffffffffffffff600386901b81811b801990931693909116901b16178455565b602084019350600882019150601882111561341357600091506001830192505b6001016133bb565b813581556001808201602061343281860186613256565b6801000000000000000081111561344b5761344b612930565b83548185558082101561347057846000528360002061346e8282018483016132fb565b505b506000938452828420935b818110156134dd57823561348e81612af6565b85547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff919091161785559385019391830191850161347b565b5050505050506134f06040830183613256565b6134fe81836002860161331d565b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036135355761353561314b565b5060010190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261357157600080fd5b830160208101925035905067ffffffffffffffff81111561359157600080fd5b8060051b3603821315612cb057600080fd5b60006020808352608083018435828501526135c08286018661353c565b60606040870152918290529060009060a086015b818310156136115783356135e781612af6565b73ffffffffffffffffffffffffffffffffffffffff168152928401926001929092019184016135d4565b61361e604089018961353c565b8883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00160608a0152808352945092508401905060005b83811015612a7e57823561366981612f70565b67ffffffffffffffff1682529184019190840190600101613656565b600060ff821660ff84168060ff038211156136a2576136a261314b565b019392505050565b600060ff8316806136e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600063ffffffff8083168185168083038211156137cb576137cb61314b565b01949350505050565b600061012063ffffffff808d1684528b6020850152808b166040850152508060608401526138048184018a612bcc565b905082810360808401526138188189612bcc565b905060ff871660a084015282810360c08401526138358187612b35565b905067ffffffffffffffff851660e084015282810361010084015261385a8185612b35565b9c9b505050505050505050505050565b600082601f83011261387b57600080fd5b8151602061388b612a3f836129fa565b82815260069290921b840181019181810190868411156138aa57600080fd5b8286015b84811015612a7e57604081890312156138c75760008081fd5b6138cf61295f565b81516138da81612f70565b8152818501516138e981612f70565b818601528352918301916040016138ae565b600082601f83011261390c57600080fd5b8151602061391c612a3f836129fa565b82815260059290921b8401810191818101908684111561393b57600080fd5b8286015b84811015612a7e578051835291830191830161393f565b6000602080838503121561396957600080fd5b825167ffffffffffffffff8082111561398157600080fd5b908401906080828703121561399557600080fd5b61399d612988565b8251828111156139ac57600080fd5b8301601f810188136139bd57600080fd5b80516139cb612a3f826129fa565b81815260059190911b8201860190868101908a8311156139ea57600080fd5b928701925b82841015613a11578351613a0281612af6565b825292870192908701906139ef565b84525050508284015182811115613a2757600080fd5b613a338882860161386a565b85830152506040830151935081841115613a4c57600080fd5b613a58878585016138fb565b6040820152606083015160608201528094505050505092915050565b600081518084526020808501945080840160005b83811015612c1257815187529582019590820190600101613a88565b600060208083528351608082850152613ac060a0850182612bcc565b9050818501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0604081878503018188015283835180865286860191508685019550600094505b80851015613b4557613b31828751805167ffffffffffffffff908116835260209182015116910152565b948601946001949094019390820190613b07565b5081890151955082888203016060890152613b608187613a74565b95505050505050606084015160808401528091505092915050565b60608101613ba08285805167ffffffffffffffff908116835260209182015116910152565b73ffffffffffffffffffffffffffffffffffffffff831660408301529392505050565b600067ffffffffffffffff8083168185168083038211156137cb576137cb61314b565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b166040850152816060850152613c2d8285018b612bcc565b91508382036080850152613c41828a612bcc565b915060ff881660a085015283820360c0850152613c5e8288612b35565b90861660e0850152838103610100850152905061385a8185612b3556fea164736f6c634300080f000a",
}

var BlobVerifierHelperABI = BlobVerifierHelperMetaData.ABI

var BlobVerifierHelperBin = BlobVerifierHelperMetaData.Bin

func DeployBlobVerifierHelper(auth *bind.TransactOpts, backend bind.ContractBackend, chainId *big.Int, afn common.Address, maxTimeWithoutAFNSignal *big.Int, config BlobVerifierInterfaceBlobVerifierConfig) (common.Address, *types.Transaction, *BlobVerifierHelper, error) {
	parsed, err := BlobVerifierHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BlobVerifierHelperBin), backend, chainId, afn, maxTimeWithoutAFNSignal, config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BlobVerifierHelper{BlobVerifierHelperCaller: BlobVerifierHelperCaller{contract: contract}, BlobVerifierHelperTransactor: BlobVerifierHelperTransactor{contract: contract}, BlobVerifierHelperFilterer: BlobVerifierHelperFilterer{contract: contract}}, nil
}

type BlobVerifierHelper struct {
	address common.Address
	abi     abi.ABI
	BlobVerifierHelperCaller
	BlobVerifierHelperTransactor
	BlobVerifierHelperFilterer
}

type BlobVerifierHelperCaller struct {
	contract *bind.BoundContract
}

type BlobVerifierHelperTransactor struct {
	contract *bind.BoundContract
}

type BlobVerifierHelperFilterer struct {
	contract *bind.BoundContract
}

type BlobVerifierHelperSession struct {
	Contract     *BlobVerifierHelper
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type BlobVerifierHelperCallerSession struct {
	Contract *BlobVerifierHelperCaller
	CallOpts bind.CallOpts
}

type BlobVerifierHelperTransactorSession struct {
	Contract     *BlobVerifierHelperTransactor
	TransactOpts bind.TransactOpts
}

type BlobVerifierHelperRaw struct {
	Contract *BlobVerifierHelper
}

type BlobVerifierHelperCallerRaw struct {
	Contract *BlobVerifierHelperCaller
}

type BlobVerifierHelperTransactorRaw struct {
	Contract *BlobVerifierHelperTransactor
}

func NewBlobVerifierHelper(address common.Address, backend bind.ContractBackend) (*BlobVerifierHelper, error) {
	abi, err := abi.JSON(strings.NewReader(BlobVerifierHelperABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindBlobVerifierHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelper{address: address, abi: abi, BlobVerifierHelperCaller: BlobVerifierHelperCaller{contract: contract}, BlobVerifierHelperTransactor: BlobVerifierHelperTransactor{contract: contract}, BlobVerifierHelperFilterer: BlobVerifierHelperFilterer{contract: contract}}, nil
}

func NewBlobVerifierHelperCaller(address common.Address, caller bind.ContractCaller) (*BlobVerifierHelperCaller, error) {
	contract, err := bindBlobVerifierHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperCaller{contract: contract}, nil
}

func NewBlobVerifierHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*BlobVerifierHelperTransactor, error) {
	contract, err := bindBlobVerifierHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperTransactor{contract: contract}, nil
}

func NewBlobVerifierHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*BlobVerifierHelperFilterer, error) {
	contract, err := bindBlobVerifierHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperFilterer{contract: contract}, nil
}

func bindBlobVerifierHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BlobVerifierHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlobVerifierHelper.Contract.BlobVerifierHelperCaller.contract.Call(opts, result, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.BlobVerifierHelperTransactor.contract.Transfer(opts)
}

func (_BlobVerifierHelper *BlobVerifierHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.BlobVerifierHelperTransactor.contract.Transact(opts, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlobVerifierHelper.Contract.contract.Call(opts, result, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.contract.Transfer(opts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.contract.Transact(opts, method, params...)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) CHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) CHAINID() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.CHAINID(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) CHAINID() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.CHAINID(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetAFN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getAFN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetAFN() (common.Address, error) {
	return _BlobVerifierHelper.Contract.GetAFN(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetAFN() (common.Address, error) {
	return _BlobVerifierHelper.Contract.GetAFN(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetConfig(opts *bind.CallOpts) (BlobVerifierInterfaceBlobVerifierConfig, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getConfig")

	if err != nil {
		return *new(BlobVerifierInterfaceBlobVerifierConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(BlobVerifierInterfaceBlobVerifierConfig)).(*BlobVerifierInterfaceBlobVerifierConfig)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetConfig() (BlobVerifierInterfaceBlobVerifierConfig, error) {
	return _BlobVerifierHelper.Contract.GetConfig(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetConfig() (BlobVerifierInterfaceBlobVerifierConfig, error) {
	return _BlobVerifierHelper.Contract.GetConfig(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetMaxSecondsWithoutAFNHeartbeat(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getMaxSecondsWithoutAFNHeartbeat")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetMaxSecondsWithoutAFNHeartbeat() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.GetMaxSecondsWithoutAFNHeartbeat(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetMaxSecondsWithoutAFNHeartbeat() (*big.Int, error) {
	return _BlobVerifierHelper.Contract.GetMaxSecondsWithoutAFNHeartbeat(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.GetMerkleRoot(&_BlobVerifierHelper.CallOpts, root)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.GetMerkleRoot(&_BlobVerifierHelper.CallOpts, root)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) IsHealthy(opts *bind.CallOpts, timeNow *big.Int) (bool, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "isHealthy", timeNow)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) IsHealthy(timeNow *big.Int) (bool, error) {
	return _BlobVerifierHelper.Contract.IsHealthy(&_BlobVerifierHelper.CallOpts, timeNow)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) IsHealthy(timeNow *big.Int) (bool, error) {
	return _BlobVerifierHelper.Contract.IsHealthy(&_BlobVerifierHelper.CallOpts, timeNow)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDetails(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDetails(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDigestAndEpoch(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _BlobVerifierHelper.Contract.LatestConfigDigestAndEpoch(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "merkleRoot", leaves, proofs, proofFlagBits)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _BlobVerifierHelper.Contract.MerkleRoot(&_BlobVerifierHelper.CallOpts, leaves, proofs, proofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) MerkleRoot(leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error) {
	return _BlobVerifierHelper.Contract.MerkleRoot(&_BlobVerifierHelper.CallOpts, leaves, proofs, proofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Owner() (common.Address, error) {
	return _BlobVerifierHelper.Contract.Owner(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Owner() (common.Address, error) {
	return _BlobVerifierHelper.Contract.Owner(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Paused() (bool, error) {
	return _BlobVerifierHelper.Contract.Paused(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Paused() (bool, error) {
	return _BlobVerifierHelper.Contract.Paused(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) SExpectedNextMinByOnRamp(opts *bind.CallOpts, arg0 common.Address) (uint64, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "s_expectedNextMinByOnRamp", arg0)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SExpectedNextMinByOnRamp(arg0 common.Address) (uint64, error) {
	return _BlobVerifierHelper.Contract.SExpectedNextMinByOnRamp(&_BlobVerifierHelper.CallOpts, arg0)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) SExpectedNextMinByOnRamp(arg0 common.Address) (uint64, error) {
	return _BlobVerifierHelper.Contract.SExpectedNextMinByOnRamp(&_BlobVerifierHelper.CallOpts, arg0)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Transmitters() ([]common.Address, error) {
	return _BlobVerifierHelper.Contract.Transmitters(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Transmitters() ([]common.Address, error) {
	return _BlobVerifierHelper.Contract.Transmitters(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) TypeAndVersion() (string, error) {
	return _BlobVerifierHelper.Contract.TypeAndVersion(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) TypeAndVersion() (string, error) {
	return _BlobVerifierHelper.Contract.TypeAndVersion(&_BlobVerifierHelper.CallOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperCaller) Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BlobVerifierHelper.contract.Call(opts, &out, "verify", hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.Verify(&_BlobVerifierHelper.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperCallerSession) Verify(hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error) {
	return _BlobVerifierHelper.Contract.Verify(&_BlobVerifierHelper.CallOpts, hashedLeaves, innerProofs, innerProofFlagBits, outerProofs, outerProofFlagBits)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "acceptOwnership")
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) AcceptOwnership() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.AcceptOwnership(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.AcceptOwnership(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "pause")
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Pause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Pause(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Pause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Pause(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Report(opts *bind.TransactOpts, rp []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "report", rp)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Report(rp []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Report(&_BlobVerifierHelper.TransactOpts, rp)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Report(rp []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Report(&_BlobVerifierHelper.TransactOpts, rp)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "resetUnblessedRoots", rootToReset)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.ResetUnblessedRoots(&_BlobVerifierHelper.TransactOpts, rootToReset)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.ResetUnblessedRoots(&_BlobVerifierHelper.TransactOpts, rootToReset)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "setAFN", afn)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetAFN(&_BlobVerifierHelper.TransactOpts, afn)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) SetAFN(afn common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetAFN(&_BlobVerifierHelper.TransactOpts, afn)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) SetConfig(opts *bind.TransactOpts, config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "setConfig", config)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SetConfig(config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig(&_BlobVerifierHelper.TransactOpts, config)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) SetConfig(config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig(&_BlobVerifierHelper.TransactOpts, config)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) SetConfig0(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "setConfig0", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SetConfig0(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig0(&_BlobVerifierHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) SetConfig0(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetConfig0(&_BlobVerifierHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) SetMaxSecondsWithoutAFNHeartbeat(opts *bind.TransactOpts, newTime *big.Int) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "setMaxSecondsWithoutAFNHeartbeat", newTime)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) SetMaxSecondsWithoutAFNHeartbeat(newTime *big.Int) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetMaxSecondsWithoutAFNHeartbeat(&_BlobVerifierHelper.TransactOpts, newTime)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) SetMaxSecondsWithoutAFNHeartbeat(newTime *big.Int) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.SetMaxSecondsWithoutAFNHeartbeat(&_BlobVerifierHelper.TransactOpts, newTime)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "transferOwnership", to)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.TransferOwnership(&_BlobVerifierHelper.TransactOpts, to)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.TransferOwnership(&_BlobVerifierHelper.TransactOpts, to)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Transmit(&_BlobVerifierHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Transmit(&_BlobVerifierHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlobVerifierHelper.contract.Transact(opts, "unpause")
}

func (_BlobVerifierHelper *BlobVerifierHelperSession) Unpause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Unpause(&_BlobVerifierHelper.TransactOpts)
}

func (_BlobVerifierHelper *BlobVerifierHelperTransactorSession) Unpause() (*types.Transaction, error) {
	return _BlobVerifierHelper.Contract.Unpause(&_BlobVerifierHelper.TransactOpts)
}

type BlobVerifierHelperAFNMaxHeartbeatTimeSetIterator struct {
	Event *BlobVerifierHelperAFNMaxHeartbeatTimeSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperAFNMaxHeartbeatTimeSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperAFNMaxHeartbeatTimeSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperAFNMaxHeartbeatTimeSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperAFNMaxHeartbeatTimeSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperAFNMaxHeartbeatTimeSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperAFNMaxHeartbeatTimeSet struct {
	OldTime *big.Int
	NewTime *big.Int
	Raw     types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterAFNMaxHeartbeatTimeSet(opts *bind.FilterOpts) (*BlobVerifierHelperAFNMaxHeartbeatTimeSetIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "AFNMaxHeartbeatTimeSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperAFNMaxHeartbeatTimeSetIterator{contract: _BlobVerifierHelper.contract, event: "AFNMaxHeartbeatTimeSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchAFNMaxHeartbeatTimeSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperAFNMaxHeartbeatTimeSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "AFNMaxHeartbeatTimeSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperAFNMaxHeartbeatTimeSet)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "AFNMaxHeartbeatTimeSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseAFNMaxHeartbeatTimeSet(log types.Log) (*BlobVerifierHelperAFNMaxHeartbeatTimeSet, error) {
	event := new(BlobVerifierHelperAFNMaxHeartbeatTimeSet)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "AFNMaxHeartbeatTimeSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperAFNSetIterator struct {
	Event *BlobVerifierHelperAFNSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperAFNSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperAFNSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperAFNSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperAFNSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperAFNSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperAFNSet struct {
	OldAFN common.Address
	NewAFN common.Address
	Raw    types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterAFNSet(opts *bind.FilterOpts) (*BlobVerifierHelperAFNSetIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperAFNSetIterator{contract: _BlobVerifierHelper.contract, event: "AFNSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchAFNSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperAFNSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "AFNSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperAFNSet)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseAFNSet(log types.Log) (*BlobVerifierHelperAFNSet, error) {
	event := new(BlobVerifierHelperAFNSet)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "AFNSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperBlobVerifierConfigSetIterator struct {
	Event *BlobVerifierHelperBlobVerifierConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperBlobVerifierConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperBlobVerifierConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperBlobVerifierConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperBlobVerifierConfigSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperBlobVerifierConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperBlobVerifierConfigSet struct {
	Config BlobVerifierInterfaceBlobVerifierConfig
	Raw    types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterBlobVerifierConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperBlobVerifierConfigSetIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "BlobVerifierConfigSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperBlobVerifierConfigSetIterator{contract: _BlobVerifierHelper.contract, event: "BlobVerifierConfigSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchBlobVerifierConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperBlobVerifierConfigSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "BlobVerifierConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperBlobVerifierConfigSet)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "BlobVerifierConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseBlobVerifierConfigSet(log types.Log) (*BlobVerifierHelperBlobVerifierConfigSet, error) {
	event := new(BlobVerifierHelperBlobVerifierConfigSet)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "BlobVerifierConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperConfigSetIterator struct {
	Event *BlobVerifierHelperConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperConfigSetIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperConfigSetIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperConfigSetIterator{contract: _BlobVerifierHelper.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperConfigSet) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperConfigSet)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseConfigSet(log types.Log) (*BlobVerifierHelperConfigSet, error) {
	event := new(BlobVerifierHelperConfigSet)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperOwnershipTransferRequestedIterator struct {
	Event *BlobVerifierHelperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperOwnershipTransferRequestedIterator{contract: _BlobVerifierHelper.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperOwnershipTransferRequested)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseOwnershipTransferRequested(log types.Log) (*BlobVerifierHelperOwnershipTransferRequested, error) {
	event := new(BlobVerifierHelperOwnershipTransferRequested)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperOwnershipTransferredIterator struct {
	Event *BlobVerifierHelperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperOwnershipTransferredIterator{contract: _BlobVerifierHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperOwnershipTransferred)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseOwnershipTransferred(log types.Log) (*BlobVerifierHelperOwnershipTransferred, error) {
	event := new(BlobVerifierHelperOwnershipTransferred)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperPausedIterator struct {
	Event *BlobVerifierHelperPaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperPausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperPausedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperPaused struct {
	Account common.Address
	Raw     types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterPaused(opts *bind.FilterOpts) (*BlobVerifierHelperPausedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperPausedIterator{contract: _BlobVerifierHelper.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperPaused) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperPaused)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParsePaused(log types.Log) (*BlobVerifierHelperPaused, error) {
	event := new(BlobVerifierHelperPaused)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperReportAcceptedIterator struct {
	Event *BlobVerifierHelperReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperReportAccepted struct {
	Report CCIPRelayReport
	Raw    types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*BlobVerifierHelperReportAcceptedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperReportAcceptedIterator{contract: _BlobVerifierHelper.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperReportAccepted) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperReportAccepted)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseReportAccepted(log types.Log) (*BlobVerifierHelperReportAccepted, error) {
	event := new(BlobVerifierHelperReportAccepted)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperTransmittedIterator struct {
	Event *BlobVerifierHelperTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperTransmittedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterTransmitted(opts *bind.FilterOpts) (*BlobVerifierHelperTransmittedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperTransmittedIterator{contract: _BlobVerifierHelper.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperTransmitted) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperTransmitted)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseTransmitted(log types.Log) (*BlobVerifierHelperTransmitted, error) {
	event := new(BlobVerifierHelperTransmitted)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type BlobVerifierHelperUnpausedIterator struct {
	Event *BlobVerifierHelperUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *BlobVerifierHelperUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlobVerifierHelperUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(BlobVerifierHelperUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *BlobVerifierHelperUnpausedIterator) Error() error {
	return it.fail
}

func (it *BlobVerifierHelperUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type BlobVerifierHelperUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BlobVerifierHelperUnpausedIterator, error) {

	logs, sub, err := _BlobVerifierHelper.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BlobVerifierHelperUnpausedIterator{contract: _BlobVerifierHelper.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperUnpaused) (event.Subscription, error) {

	logs, sub, err := _BlobVerifierHelper.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(BlobVerifierHelperUnpaused)
				if err := _BlobVerifierHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_BlobVerifierHelper *BlobVerifierHelperFilterer) ParseUnpaused(log types.Log) (*BlobVerifierHelperUnpaused, error) {
	event := new(BlobVerifierHelperUnpaused)
	if err := _BlobVerifierHelper.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_BlobVerifierHelper *BlobVerifierHelper) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _BlobVerifierHelper.abi.Events["AFNMaxHeartbeatTimeSet"].ID:
		return _BlobVerifierHelper.ParseAFNMaxHeartbeatTimeSet(log)
	case _BlobVerifierHelper.abi.Events["AFNSet"].ID:
		return _BlobVerifierHelper.ParseAFNSet(log)
	case _BlobVerifierHelper.abi.Events["BlobVerifierConfigSet"].ID:
		return _BlobVerifierHelper.ParseBlobVerifierConfigSet(log)
	case _BlobVerifierHelper.abi.Events["ConfigSet"].ID:
		return _BlobVerifierHelper.ParseConfigSet(log)
	case _BlobVerifierHelper.abi.Events["OwnershipTransferRequested"].ID:
		return _BlobVerifierHelper.ParseOwnershipTransferRequested(log)
	case _BlobVerifierHelper.abi.Events["OwnershipTransferred"].ID:
		return _BlobVerifierHelper.ParseOwnershipTransferred(log)
	case _BlobVerifierHelper.abi.Events["Paused"].ID:
		return _BlobVerifierHelper.ParsePaused(log)
	case _BlobVerifierHelper.abi.Events["ReportAccepted"].ID:
		return _BlobVerifierHelper.ParseReportAccepted(log)
	case _BlobVerifierHelper.abi.Events["Transmitted"].ID:
		return _BlobVerifierHelper.ParseTransmitted(log)
	case _BlobVerifierHelper.abi.Events["Unpaused"].ID:
		return _BlobVerifierHelper.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (BlobVerifierHelperAFNMaxHeartbeatTimeSet) Topic() common.Hash {
	return common.HexToHash("0x72e72b3dfd44fb4d803f52b2d895c7347b912da657d0f77599a0afc26956c251")
}

func (BlobVerifierHelperAFNSet) Topic() common.Hash {
	return common.HexToHash("0x2378f30feefb413d2caee0417ec344de95ab13977e41d6ce944d0a6d2d25bd28")
}

func (BlobVerifierHelperBlobVerifierConfigSet) Topic() common.Hash {
	return common.HexToHash("0xf6fd57a63b6bb141999904fde020d32c1b1b4b27d5f96b44d6c702eb8821c6e7")
}

func (BlobVerifierHelperConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (BlobVerifierHelperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (BlobVerifierHelperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (BlobVerifierHelperPaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (BlobVerifierHelperReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x0702c04973906f5f7aabafd294e61fd96ef0516a28bc9d4df26804ba46a8c9ef")
}

func (BlobVerifierHelperTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (BlobVerifierHelperUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_BlobVerifierHelper *BlobVerifierHelper) Address() common.Address {
	return _BlobVerifierHelper.address
}

type BlobVerifierHelperInterface interface {
	CHAINID(opts *bind.CallOpts) (*big.Int, error)

	GetAFN(opts *bind.CallOpts) (common.Address, error)

	GetConfig(opts *bind.CallOpts) (BlobVerifierInterfaceBlobVerifierConfig, error)

	GetMaxSecondsWithoutAFNHeartbeat(opts *bind.CallOpts) (*big.Int, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	IsHealthy(opts *bind.CallOpts, timeNow *big.Int) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	MerkleRoot(opts *bind.CallOpts, leaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) ([32]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	SExpectedNextMinByOnRamp(opts *bind.CallOpts, arg0 common.Address) (uint64, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, innerProofs [][32]byte, innerProofFlagBits *big.Int, outerProofs [][32]byte, outerProofFlagBits *big.Int) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	Report(opts *bind.TransactOpts, rp []byte) (*types.Transaction, error)

	ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error)

	SetAFN(opts *bind.TransactOpts, afn common.Address) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, config BlobVerifierInterfaceBlobVerifierConfig) (*types.Transaction, error)

	SetConfig0(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	SetMaxSecondsWithoutAFNHeartbeat(opts *bind.TransactOpts, newTime *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterAFNMaxHeartbeatTimeSet(opts *bind.FilterOpts) (*BlobVerifierHelperAFNMaxHeartbeatTimeSetIterator, error)

	WatchAFNMaxHeartbeatTimeSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperAFNMaxHeartbeatTimeSet) (event.Subscription, error)

	ParseAFNMaxHeartbeatTimeSet(log types.Log) (*BlobVerifierHelperAFNMaxHeartbeatTimeSet, error)

	FilterAFNSet(opts *bind.FilterOpts) (*BlobVerifierHelperAFNSetIterator, error)

	WatchAFNSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperAFNSet) (event.Subscription, error)

	ParseAFNSet(log types.Log) (*BlobVerifierHelperAFNSet, error)

	FilterBlobVerifierConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperBlobVerifierConfigSetIterator, error)

	WatchBlobVerifierConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperBlobVerifierConfigSet) (event.Subscription, error)

	ParseBlobVerifierConfigSet(log types.Log) (*BlobVerifierHelperBlobVerifierConfigSet, error)

	FilterConfigSet(opts *bind.FilterOpts) (*BlobVerifierHelperConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*BlobVerifierHelperConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*BlobVerifierHelperOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*BlobVerifierHelperOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*BlobVerifierHelperOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*BlobVerifierHelperPausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperPaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*BlobVerifierHelperPaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*BlobVerifierHelperReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*BlobVerifierHelperReportAccepted, error)

	FilterTransmitted(opts *bind.FilterOpts) (*BlobVerifierHelperTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*BlobVerifierHelperTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*BlobVerifierHelperUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BlobVerifierHelperUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*BlobVerifierHelperUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package commit_store

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type CommitStoreCommitReport struct {
	PriceUpdates InternalPriceUpdates
	Interval     CommitStoreInterval
	MerkleRoot   [32]byte
}

type CommitStoreDynamicConfig struct {
	PriceRegistry common.Address
	Afn           common.Address
}

type CommitStoreInterval struct {
	Min uint64
	Max uint64
}

type CommitStoreStaticConfig struct {
	ChainId       uint64
	SourceChainId uint64
	OnRamp        common.Address
}

type InternalPriceUpdates struct {
	TokenPriceUpdates []InternalTokenPriceUpdate
	DestChainId       uint64
	UsdPerUnitGas     *big.Int
}

type InternalTokenPriceUpdate struct {
	SourceToken common.Address
	UsdPerToken *big.Int
}

var CommitStoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"internalType\":\"structCommitStore.StaticConfig\",\"name\":\"staticConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afn\",\"type\":\"address\"}],\"internalType\":\"structCommitStore.DynamicConfig\",\"name\":\"dynamicConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAFNSignal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ConfigDigestMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCommitStoreConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCommitStore.Interval\",\"name\":\"interval\",\"type\":\"tuple\"}],\"name\":\"InvalidInterval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonUniqueSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesOutOfRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedTransmitter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongMessageLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongNumberOfSignatures\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structCommitStore.StaticConfig\",\"name\":\"staticConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afn\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structCommitStore.DynamicConfig\",\"name\":\"dynamicConfig\",\"type\":\"tuple\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"usdPerToken\",\"type\":\"uint128\"}],\"internalType\":\"structInternal.TokenPriceUpdate[]\",\"name\":\"tokenPriceUpdates\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"destChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"usdPerUnitGas\",\"type\":\"uint128\"}],\"internalType\":\"structInternal.PriceUpdates\",\"name\":\"priceUpdates\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"min\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"internalType\":\"structCommitStore.Interval\",\"name\":\"interval\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structCommitStore.CommitReport\",\"name\":\"report\",\"type\":\"tuple\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RootRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDynamicConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afn\",\"type\":\"address\"}],\"internalType\":\"structCommitStore.DynamicConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"onRamp\",\"type\":\"address\"}],\"internalType\":\"structCommitStore.StaticConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAFNHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"isBlessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootToReset\",\"type\":\"bytes32[]\"}],\"name\":\"resetUnblessedRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afn\",\"type\":\"address\"}],\"internalType\":\"structCommitStore.DynamicConfig\",\"name\":\"dynamicConfig\",\"type\":\"tuple\"}],\"name\":\"setDynamicConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"minSeqNr\",\"type\":\"uint64\"}],\"name\":\"setMinSeqNr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setOCR2Config\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e0604052600b80546001600160401b03191660011790553480156200002457600080fd5b50604051620035c0380380620035c08339810160408190526200004791620003ab565b33806000816200009e5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000d157620000d1816200018b565b50506001805460ff60a01b191690555080516001600160a01b0316158062000104575060408201516001600160a01b0316155b8062000118575081516001600160401b0316155b806200012f575060208201516001600160401b0316155b156200014e57604051631fc5f15f60e11b815260040160405180910390fd5b81516001600160401b0390811660805260208301511660a05260408201516001600160a01b031660c052620001838162000236565b505062000486565b336001600160a01b03821603620001e55760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000095565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60208101516001600160a01b0316158062000259575080516001600160a01b0316155b156200027857604051631fc5f15f60e11b815260040160405180910390fd5b8051600880546001600160a01b03199081166001600160a01b03938416179091556020808401805160098054909416908516179092556040805160608082018352608080516001600160401b0390811680855260a08051831686890190815260c0518b1696880196875287519283525190921696810196909652925187169385019390935286518616908401529251909316928101929092527f4b4b9b37763b78c5a0701b5980dbb19a9104b78dfd1fcaa85c6260f01244bd42910160405180910390a150565b604080519081016001600160401b03811182821017156200037057634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160401b03811681146200038e57600080fd5b919050565b80516001600160a01b03811681146200038e57600080fd5b60008082840360a0811215620003c057600080fd5b6060811215620003cf57600080fd5b604051606081016001600160401b03811182821017156200040057634e487b7160e01b600052604160045260246000fd5b6040526200040e8562000376565b81526200041e6020860162000376565b6020820152620004316040860162000393565b6040820152809350506040605f19820112156200044d57600080fd5b50620004586200033f565b620004666060850162000393565b8152620004766080850162000393565b6020820152809150509250929050565b60805160a05160c0516130f5620004cb600039600081816102140152611d1a0152600081816101e40152611cf10152600081816101b40152611ccc01526130f56000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806381ff7048116100d8578063ad7a22f81161008c578063f2fde38b11610066578063f2fde38b14610489578063f47a86901461049c578063ff888fb1146104af57600080fd5b8063ad7a22f814610443578063afcb95d714610456578063b1dc65a41461047657600080fd5b8063869b7f62116100bd578063869b7f62146103e85780638da5cb5b146103fb578063a7206cd61461042357600080fd5b806381ff7048146103b05780638456cb59146103e057600080fd5b80633f4ba83a1161013a578063666cab8d11610114578063666cab8d146103455780637437ff9f1461035a57806379ba5097146103a857600080fd5b80633f4ba83a146102fe5780634120fccd146103065780635c975abb1461032257600080fd5b8063181f5a771161016b578063181f5a771461027f5780631ef38174146102c857806332048875146102dd57600080fd5b806306285c6914610187578063147809b314610267575b600080fd5b610251604080516060810182526000808252602082018190529181019190915260405180606001604052807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815250905090565b60405161025e9190612318565b60405180910390f35b61026f6104c2565b604051901515815260200161025e565b6102bb6040518060400160405280601181526020017f436f6d6d697453746f726520312e302e3000000000000000000000000000000081525081565b60405161025e91906123c9565b6102db6102d6366004612625565b61055c565b005b6102f06102eb36600461273e565b610cda565b60405190815260200161025e565b6102db610e21565b600b5460405167ffffffffffffffff909116815260200161025e565b60015474010000000000000000000000000000000000000000900460ff1661026f565b61034d610e33565b60405161025e9190612803565b6040805180820182526000808252602091820152815180830190925260085473ffffffffffffffffffffffffffffffffffffffff9081168352600954169082015260405161025e9190612816565b6102db610ea2565b6004546002546040805163ffffffff8085168252640100000000909404909316602084015282015260600161025e565b6102db610f9f565b6102db6103f6366004612847565b610faf565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161025e565b6102f06104313660046128a6565b6000908152600a602052604090205490565b6102db6104513660046128bf565b610fc3565b60408051600181526000602082018190529181019190915260600161025e565b6102db6104843660046128dc565b611006565b6102db6104973660046129c1565b61158e565b6102db6104aa3660046129de565b61159f565b61026f6104bd3660046128a6565b61163e565b600954604080517f46f8e6d7000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916346f8e6d79160048083019260209291908290030181865afa158015610532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105569190612a20565b15905090565b855185518560ff16601f8311156105d4576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e6572730000000000000000000000000000000060448201526064015b60405180910390fd5b8060000361063e576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f736974697665000000000000000000000000000060448201526064016105cb565b8183146106cc576040517f89a61989000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e0000000000000000000000000000000000000000000000000000000060648201526084016105cb565b6106d7816003612a71565b831161073f576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f2068696768000000000000000060448201526064016105cb565b610747611701565b60065460005b8181101561084357600560006006838154811061076c5761076c612aae565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169055600780546005929190849081106107dc576107dc612aae565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016905561083c81612add565b905061074d565b50895160005b81811015610b825760008c828151811061086557610865612aae565b602002602001015190506000600281111561088257610882612b15565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff1660028111156108c1576108c1612b15565b14610928576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e6572206164647265737300000000000000000060448201526064016105cb565b6040805180820190915260ff83168152602081016001905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016176101008360028111156109d8576109d8612b15565b021790555090505060008c83815181106109f4576109f4612aae565b6020026020010151905060006002811115610a1157610a11612b15565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610100900460ff166002811115610a5057610a50612b15565b14610ab7576040517f89a6198900000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d697474657220616464726573730000000060448201526064016105cb565b6040805180820190915260ff84168152602081016002905273ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115610b6757610b67612b15565b0217905550905050505080610b7b90612add565b9050610849565b508a51610b969060069060208e019061225a565b508951610baa9060079060208d019061225a565b506003805460ff838116610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000909216908c161717905560048054610c30914691309190600090610c029063ffffffff16612b44565b91906101000a81548163ffffffff021916908363ffffffff160217905563ffffffff168e8e8e8e8e8e611782565b600260000181905550600060048054906101000a900463ffffffff169050436004806101000a81548163ffffffff021916908363ffffffff1602179055507f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0581600260000154600460009054906101000a900463ffffffff168f8f8f8f8f8f604051610cc499989796959493929190612b67565b60405180910390a1505050505050505050505050565b60015460009074010000000000000000000000000000000000000000900460ff1615610d62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016105cb565b6000610dd387878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808b0282810182019093528a82529093508a92508991829185019084908082843760009201919091525088925061182d915050565b6000818152600a60205260409020549091501580610df75750610df58161163e565b155b15610e06576000915050610e18565b6000908152600a602052604090205490505b95945050505050565b610e29611701565b610e31611a04565b565b60606007805480602002602001604051908101604052809291908181526020018280548015610e9857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610e6d575b5050505050905090565b60015473ffffffffffffffffffffffffffffffffffffffff163314610f23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016105cb565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610fa7611701565b610e31611afd565b610fb7611701565b610fc081611be9565b50565b610fcb611701565b600b80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92909216919091179055565b61104587878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d7a92505050565b6040805160608101825260025480825260035460ff8082166020850152610100909104169282019290925289359182146110b85780516040517f93df584c0000000000000000000000000000000000000000000000000000000081526004810191909152602481018390526044016105cb565b6040805183815260208c81013560081c63ffffffff16908201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16002816020015182604001516111139190612bfd565b61111d9190612c22565b611128906001612bfd565b60ff168614611163576040517f71253a2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85841461119c576040517fa75d88af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526005602090815260408083208151808301909252805460ff808216845292939192918401916101009091041660028111156111df576111df612b15565b60028111156111f0576111f0612b15565b905250905060028160200151600281111561120d5761120d612b15565b14801561125457506007816000015160ff168154811061122f5761122f612aae565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b61128a576040517fda0f08e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000611298856020612a71565b6112a3886020612a71565b6112af8b610144612c6b565b6112b99190612c6b565b6112c39190612c6b565b9050368114611307576040517f8e1192e1000000000000000000000000000000000000000000000000000000008152600481018290523660248201526044016105cb565b506000898960405161131a929190612c83565b604051908190038120611331918d90602001612c93565b6040516020818303038152906040528051906020012090506113516122e4565b8760005b8181101561157e57600060018589846020811061137457611374612aae565b61138191901a601b612bfd565b8e8e8681811061139357611393612aae565b905060200201358d8d878181106113ac576113ac612aae565b90506020020135604051600081526020016040526040516113e9949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa15801561140b573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff8116600090815260056020908152848220848601909552845460ff808216865293975091955092939284019161010090910416600281111561148e5761148e612b15565b600281111561149f5761149f612b15565b90525090506001816020015160028111156114bc576114bc612b15565b146114f3576040517fca31867a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051859060ff16601f811061150a5761150a612aae565b602002015115611546576040517ff67bc7c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600185826000015160ff16601f811061156157611561612aae565b9115156020909202015250611577905081612add565b9050611355565b5050505050505050505050505050565b611596611701565b610fc0816120ea565b6115a7611701565b60005b818110156116395760008383838181106115c6576115c6612aae565b9050602002013590506115d88161163e565b611628576000818152600a602052604080822091909155517f202f1139a3e334b6056064c0e9b19fd07e44a88d8f6e5ded571b24cf8c371f129061161f9083815260200190565b60405180910390a15b5061163281612add565b90506115aa565b505050565b6009546040805130602080830191909152818301859052825180830384018152606083019384905280519101207fff888fb100000000000000000000000000000000000000000000000000000000909252606481019190915260009173ffffffffffffffffffffffffffffffffffffffff169063ff888fb190608401602060405180830381865afa1580156116d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fb9190612a20565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016105cb565b6000808a8a8a8a8a8a8a8a8a6040516020016117a699989796959493929190612caf565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b6000808451905060006001855183010390508060000361186b578560008151811061185a5761185a612aae565b6020026020010151925050506119fd565b6101008111156118a7576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008167ffffffffffffffff8111156118c2576118c26123dc565b6040519080825280602002602001820160405280156118eb578160200160208202803683370190505b50905060008080805b858110156119d6576119b16001828b901c16600114611931578a5160018401938c91811061192457611924612aae565b602002602001015161196f565b87851061194f57855160018501948791811061192457611924612aae565b8b5160018601958d91811061196657611966612aae565b60200260200101515b88861061199a57865160018601958891811061198d5761198d612aae565b60200260200101516121df565b8c5160018701968e91811061198d5761198d612aae565b8582815181106119c3576119c3612aae565b60209081029190910101526001016118f4565b508360018603815181106119ec576119ec612aae565b602002602001015196505050505050505b9392505050565b60015474010000000000000000000000000000000000000000900460ff16611a88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016105cb565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60015474010000000000000000000000000000000000000000900460ff1615611b82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016105cb565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ad33390565b602081015173ffffffffffffffffffffffffffffffffffffffff161580611c255750805173ffffffffffffffffffffffffffffffffffffffff16155b15611c5c576040517f3f8be2be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516008805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556020808401516009805491851691909316179091556040805160608101825267ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016928101929092527f00000000000000000000000000000000000000000000000000000000000000009092168183015290517f4b4b9b37763b78c5a0701b5980dbb19a9104b78dfd1fcaa85c6260f01244bd4291611d6f918490612d44565b60405180910390a150565b60015474010000000000000000000000000000000000000000900460ff1615611dff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016105cb565b600954604080517f46f8e6d7000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216916346f8e6d7916004808201926020929091908290030181865afa158015611e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e939190612a20565b15611ec9576040517e7b22b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081806020019051810190611edf9190612e21565b80515151909150151580611f01575080516020015167ffffffffffffffff1615155b15611f9b5760085481516040517f3c03ec3c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691633c03ec3c91611f5c91600401613028565b600060405180830381600087803b158015611f7657600080fd5b505af1158015611f8a573d6000803e3d6000fd5b505050506040810151611f9b575050565b602081015151600b5467ffffffffffffffff9081169116141580611fd6575060208082015190810151905167ffffffffffffffff9182169116115b156120135780602001516040517fbb1ae18d0000000000000000000000000000000000000000000000000000000081526004016105cb919061303b565b604081015161204e576040517f504570e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808201510151612061906001613060565b600b80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff929092169190911790556040818101516000908152600a602052819020429055517f3cbd5cf9fd597d6a1acd16b35fb034bd3f9d1061cdd5a7b2c75962a0cde76c6e906120de90839061308c565b60405180910390a15050565b3373ffffffffffffffffffffffffffffffffffffffff821603612169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016105cb565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600081831061222157604080516001602080830191909152818301859052606080830187905283518084039091018152608090920190925280519101206119fd565b604080516001602080830191909152818301869052606080830186905283518084039091018152608090920190925280519101206119fd565b8280548282559060005260206000209081019282156122d4579160200282015b828111156122d457825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061227a565b506122e0929150612303565b5090565b604051806103e00160405280601f906020820280368337509192915050565b5b808211156122e05760008155600101612304565b815167ffffffffffffffff90811682526020808401519091169082015260408083015173ffffffffffffffffffffffffffffffffffffffff1690820152606081016116fb565b6000815180845260005b8181101561238457602081850181015186830182015201612368565b81811115612396576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006119fd602083018461235e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561242e5761242e6123dc565b60405290565b6040516060810167ffffffffffffffff8111828210171561242e5761242e6123dc565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561249e5761249e6123dc565b604052919050565b600067ffffffffffffffff8211156124c0576124c06123dc565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff81168114610fc057600080fd5b600082601f8301126124fd57600080fd5b8135602061251261250d836124a6565b612457565b82815260059290921b8401810191818101908684111561253157600080fd5b8286015b84811015612555578035612548816124ca565b8352918301918301612535565b509695505050505050565b803560ff8116811461257157600080fd5b919050565b600082601f83011261258757600080fd5b813567ffffffffffffffff8111156125a1576125a16123dc565b6125d260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612457565b8181528460208386010111156125e757600080fd5b816020850160208301376000918101602001919091529392505050565b67ffffffffffffffff81168114610fc057600080fd5b803561257181612604565b60008060008060008060c0878903121561263e57600080fd5b863567ffffffffffffffff8082111561265657600080fd5b6126628a838b016124ec565b9750602089013591508082111561267857600080fd5b6126848a838b016124ec565b965061269260408a01612560565b955060608901359150808211156126a857600080fd5b6126b48a838b01612576565b94506126c260808a0161261a565b935060a08901359150808211156126d857600080fd5b506126e589828a01612576565b9150509295509295509295565b60008083601f84011261270457600080fd5b50813567ffffffffffffffff81111561271c57600080fd5b6020830191508360208260051b850101111561273757600080fd5b9250929050565b60008060008060006060868803121561275657600080fd5b853567ffffffffffffffff8082111561276e57600080fd5b61277a89838a016126f2565b9097509550602088013591508082111561279357600080fd5b506127a0888289016126f2565b96999598509660400135949350505050565b600081518084526020808501945080840160005b838110156127f857815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016127c6565b509495945050505050565b6020815260006119fd60208301846127b2565b604081016116fb8284805173ffffffffffffffffffffffffffffffffffffffff908116835260209182015116910152565b60006040828403121561285957600080fd5b6040516040810181811067ffffffffffffffff8211171561287c5761287c6123dc565b604052823561288a816124ca565b8152602083013561289a816124ca565b60208201529392505050565b6000602082840312156128b857600080fd5b5035919050565b6000602082840312156128d157600080fd5b81356119fd81612604565b60008060008060008060008060e0898b0312156128f857600080fd5b606089018a81111561290957600080fd5b8998503567ffffffffffffffff8082111561292357600080fd5b818b0191508b601f83011261293757600080fd5b81358181111561294657600080fd5b8c602082850101111561295857600080fd5b6020830199508098505060808b013591508082111561297657600080fd5b6129828c838d016126f2565b909750955060a08b013591508082111561299b57600080fd5b506129a88b828c016126f2565b999c989b50969995989497949560c00135949350505050565b6000602082840312156129d357600080fd5b81356119fd816124ca565b600080602083850312156129f157600080fd5b823567ffffffffffffffff811115612a0857600080fd5b612a14858286016126f2565b90969095509350505050565b600060208284031215612a3257600080fd5b815180151581146119fd57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612aa957612aa9612a42565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b0e57612b0e612a42565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600063ffffffff808316818103612b5d57612b5d612a42565b6001019392505050565b600061012063ffffffff808d1684528b6020850152808b16604085015250806060840152612b978184018a6127b2565b90508281036080840152612bab81896127b2565b905060ff871660a084015282810360c0840152612bc8818761235e565b905067ffffffffffffffff851660e0840152828103610100840152612bed818561235e565b9c9b505050505050505050505050565b600060ff821660ff84168060ff03821115612c1a57612c1a612a42565b019392505050565b600060ff831680612c5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b60008219821115612c7e57612c7e612a42565b500190565b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b166040850152816060850152612cf68285018b6127b2565b91508382036080850152612d0a828a6127b2565b915060ff881660a085015283820360c0850152612d27828861235e565b90861660e08501528381036101008501529050612bed818561235e565b825167ffffffffffffffff90811682526020808501519091169082015260408084015173ffffffffffffffffffffffffffffffffffffffff169082015260a08101825173ffffffffffffffffffffffffffffffffffffffff908116606084015260208401511660808301526119fd565b80516fffffffffffffffffffffffffffffffff8116811461257157600080fd5b805161257181612604565b600060408284031215612df157600080fd5b612df961240b565b90508151612e0681612604565b81526020820151612e1681612604565b602082015292915050565b60006020808385031215612e3457600080fd5b825167ffffffffffffffff80821115612e4c57600080fd5b9084019060808287031215612e6057600080fd5b612e68612434565b825182811115612e7757600080fd5b830160608189031215612e8957600080fd5b612e91612434565b815184811115612ea057600080fd5b82019350601f84018913612eb357600080fd5b8351612ec161250d826124a6565b81815260069190911b8501870190878101908b831115612ee057600080fd5b958801955b82871015612f34576040878d031215612efe5760008081fd5b612f0661240b565b8751612f11816124ca565b8152612f1e888b01612db4565b818b015282526040969096019590880190612ee5565b835250612f449050828701612dd4565b86820152612f5460408301612db4565b6040820152825250612f6887848601612ddf565b93810193909352506060015160408201529392505050565b805160608084528151908401819052600091602091908201906080860190845b81811015612fef578351805173ffffffffffffffffffffffffffffffffffffffff1684528501516fffffffffffffffffffffffffffffffff168584015292840192604090920191600101612fa0565b505067ffffffffffffffff83860151168387015260408501519250610e1860408701846fffffffffffffffffffffffffffffffff169052565b6020815260006119fd6020830184612f80565b604081016116fb8284805167ffffffffffffffff908116835260209182015116910152565b600067ffffffffffffffff80831681851680830382111561308357613083612a42565b01949350505050565b6020815260008251608060208401526130a860a0840182612f80565b905060208401516130d36040850182805167ffffffffffffffff908116835260209182015116910152565b5060408401516080840152809150509291505056fea164736f6c634300080f000a",
}

var CommitStoreABI = CommitStoreMetaData.ABI

var CommitStoreBin = CommitStoreMetaData.Bin

func DeployCommitStore(auth *bind.TransactOpts, backend bind.ContractBackend, staticConfig CommitStoreStaticConfig, dynamicConfig CommitStoreDynamicConfig) (common.Address, *types.Transaction, *CommitStore, error) {
	parsed, err := CommitStoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommitStoreBin), backend, staticConfig, dynamicConfig)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CommitStore{CommitStoreCaller: CommitStoreCaller{contract: contract}, CommitStoreTransactor: CommitStoreTransactor{contract: contract}, CommitStoreFilterer: CommitStoreFilterer{contract: contract}}, nil
}

type CommitStore struct {
	address common.Address
	abi     abi.ABI
	CommitStoreCaller
	CommitStoreTransactor
	CommitStoreFilterer
}

type CommitStoreCaller struct {
	contract *bind.BoundContract
}

type CommitStoreTransactor struct {
	contract *bind.BoundContract
}

type CommitStoreFilterer struct {
	contract *bind.BoundContract
}

type CommitStoreSession struct {
	Contract     *CommitStore
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type CommitStoreCallerSession struct {
	Contract *CommitStoreCaller
	CallOpts bind.CallOpts
}

type CommitStoreTransactorSession struct {
	Contract     *CommitStoreTransactor
	TransactOpts bind.TransactOpts
}

type CommitStoreRaw struct {
	Contract *CommitStore
}

type CommitStoreCallerRaw struct {
	Contract *CommitStoreCaller
}

type CommitStoreTransactorRaw struct {
	Contract *CommitStoreTransactor
}

func NewCommitStore(address common.Address, backend bind.ContractBackend) (*CommitStore, error) {
	abi, err := abi.JSON(strings.NewReader(CommitStoreABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindCommitStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CommitStore{address: address, abi: abi, CommitStoreCaller: CommitStoreCaller{contract: contract}, CommitStoreTransactor: CommitStoreTransactor{contract: contract}, CommitStoreFilterer: CommitStoreFilterer{contract: contract}}, nil
}

func NewCommitStoreCaller(address common.Address, caller bind.ContractCaller) (*CommitStoreCaller, error) {
	contract, err := bindCommitStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommitStoreCaller{contract: contract}, nil
}

func NewCommitStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*CommitStoreTransactor, error) {
	contract, err := bindCommitStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommitStoreTransactor{contract: contract}, nil
}

func NewCommitStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*CommitStoreFilterer, error) {
	contract, err := bindCommitStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommitStoreFilterer{contract: contract}, nil
}

func bindCommitStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CommitStoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_CommitStore *CommitStoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitStore.Contract.CommitStoreCaller.contract.Call(opts, result, method, params...)
}

func (_CommitStore *CommitStoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.Contract.CommitStoreTransactor.contract.Transfer(opts)
}

func (_CommitStore *CommitStoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitStore.Contract.CommitStoreTransactor.contract.Transact(opts, method, params...)
}

func (_CommitStore *CommitStoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitStore.Contract.contract.Call(opts, result, method, params...)
}

func (_CommitStore *CommitStoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.Contract.contract.Transfer(opts)
}

func (_CommitStore *CommitStoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitStore.Contract.contract.Transact(opts, method, params...)
}

func (_CommitStore *CommitStoreCaller) GetDynamicConfig(opts *bind.CallOpts) (CommitStoreDynamicConfig, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getDynamicConfig")

	if err != nil {
		return *new(CommitStoreDynamicConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(CommitStoreDynamicConfig)).(*CommitStoreDynamicConfig)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetDynamicConfig() (CommitStoreDynamicConfig, error) {
	return _CommitStore.Contract.GetDynamicConfig(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) GetDynamicConfig() (CommitStoreDynamicConfig, error) {
	return _CommitStore.Contract.GetDynamicConfig(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) GetExpectedNextSequenceNumber(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getExpectedNextSequenceNumber")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetExpectedNextSequenceNumber() (uint64, error) {
	return _CommitStore.Contract.GetExpectedNextSequenceNumber(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) GetExpectedNextSequenceNumber() (uint64, error) {
	return _CommitStore.Contract.GetExpectedNextSequenceNumber(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getMerkleRoot", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _CommitStore.Contract.GetMerkleRoot(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCallerSession) GetMerkleRoot(root [32]byte) (*big.Int, error) {
	return _CommitStore.Contract.GetMerkleRoot(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCaller) GetStaticConfig(opts *bind.CallOpts) (CommitStoreStaticConfig, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getStaticConfig")

	if err != nil {
		return *new(CommitStoreStaticConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(CommitStoreStaticConfig)).(*CommitStoreStaticConfig)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetStaticConfig() (CommitStoreStaticConfig, error) {
	return _CommitStore.Contract.GetStaticConfig(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) GetStaticConfig() (CommitStoreStaticConfig, error) {
	return _CommitStore.Contract.GetStaticConfig(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) GetTransmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "getTransmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_CommitStore *CommitStoreSession) GetTransmitters() ([]common.Address, error) {
	return _CommitStore.Contract.GetTransmitters(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) GetTransmitters() ([]common.Address, error) {
	return _CommitStore.Contract.GetTransmitters(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) IsAFNHealthy(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "isAFNHealthy")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStore *CommitStoreSession) IsAFNHealthy() (bool, error) {
	return _CommitStore.Contract.IsAFNHealthy(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) IsAFNHealthy() (bool, error) {
	return _CommitStore.Contract.IsAFNHealthy(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "isBlessed", root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStore *CommitStoreSession) IsBlessed(root [32]byte) (bool, error) {
	return _CommitStore.Contract.IsBlessed(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCallerSession) IsBlessed(root [32]byte) (bool, error) {
	return _CommitStore.Contract.IsBlessed(&_CommitStore.CallOpts, root)
}

func (_CommitStore *CommitStoreCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_CommitStore *CommitStoreSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _CommitStore.Contract.LatestConfigDetails(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _CommitStore.Contract.LatestConfigDetails(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_CommitStore *CommitStoreSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _CommitStore.Contract.LatestConfigDigestAndEpoch(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _CommitStore.Contract.LatestConfigDigestAndEpoch(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_CommitStore *CommitStoreSession) Owner() (common.Address, error) {
	return _CommitStore.Contract.Owner(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) Owner() (common.Address, error) {
	return _CommitStore.Contract.Owner(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_CommitStore *CommitStoreSession) Paused() (bool, error) {
	return _CommitStore.Contract.Paused(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) Paused() (bool, error) {
	return _CommitStore.Contract.Paused(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_CommitStore *CommitStoreSession) TypeAndVersion() (string, error) {
	return _CommitStore.Contract.TypeAndVersion(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCallerSession) TypeAndVersion() (string, error) {
	return _CommitStore.Contract.TypeAndVersion(&_CommitStore.CallOpts)
}

func (_CommitStore *CommitStoreCaller) Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _CommitStore.contract.Call(opts, &out, "verify", hashedLeaves, proofs, proofFlagBits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_CommitStore *CommitStoreSession) Verify(hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	return _CommitStore.Contract.Verify(&_CommitStore.CallOpts, hashedLeaves, proofs, proofFlagBits)
}

func (_CommitStore *CommitStoreCallerSession) Verify(hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error) {
	return _CommitStore.Contract.Verify(&_CommitStore.CallOpts, hashedLeaves, proofs, proofFlagBits)
}

func (_CommitStore *CommitStoreTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "acceptOwnership")
}

func (_CommitStore *CommitStoreSession) AcceptOwnership() (*types.Transaction, error) {
	return _CommitStore.Contract.AcceptOwnership(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _CommitStore.Contract.AcceptOwnership(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "pause")
}

func (_CommitStore *CommitStoreSession) Pause() (*types.Transaction, error) {
	return _CommitStore.Contract.Pause(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactorSession) Pause() (*types.Transaction, error) {
	return _CommitStore.Contract.Pause(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactor) ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "resetUnblessedRoots", rootToReset)
}

func (_CommitStore *CommitStoreSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.ResetUnblessedRoots(&_CommitStore.TransactOpts, rootToReset)
}

func (_CommitStore *CommitStoreTransactorSession) ResetUnblessedRoots(rootToReset [][32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.ResetUnblessedRoots(&_CommitStore.TransactOpts, rootToReset)
}

func (_CommitStore *CommitStoreTransactor) SetDynamicConfig(opts *bind.TransactOpts, dynamicConfig CommitStoreDynamicConfig) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "setDynamicConfig", dynamicConfig)
}

func (_CommitStore *CommitStoreSession) SetDynamicConfig(dynamicConfig CommitStoreDynamicConfig) (*types.Transaction, error) {
	return _CommitStore.Contract.SetDynamicConfig(&_CommitStore.TransactOpts, dynamicConfig)
}

func (_CommitStore *CommitStoreTransactorSession) SetDynamicConfig(dynamicConfig CommitStoreDynamicConfig) (*types.Transaction, error) {
	return _CommitStore.Contract.SetDynamicConfig(&_CommitStore.TransactOpts, dynamicConfig)
}

func (_CommitStore *CommitStoreTransactor) SetMinSeqNr(opts *bind.TransactOpts, minSeqNr uint64) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "setMinSeqNr", minSeqNr)
}

func (_CommitStore *CommitStoreSession) SetMinSeqNr(minSeqNr uint64) (*types.Transaction, error) {
	return _CommitStore.Contract.SetMinSeqNr(&_CommitStore.TransactOpts, minSeqNr)
}

func (_CommitStore *CommitStoreTransactorSession) SetMinSeqNr(minSeqNr uint64) (*types.Transaction, error) {
	return _CommitStore.Contract.SetMinSeqNr(&_CommitStore.TransactOpts, minSeqNr)
}

func (_CommitStore *CommitStoreTransactor) SetOCR2Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "setOCR2Config", signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_CommitStore *CommitStoreSession) SetOCR2Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStore.Contract.SetOCR2Config(&_CommitStore.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_CommitStore *CommitStoreTransactorSession) SetOCR2Config(signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	return _CommitStore.Contract.SetOCR2Config(&_CommitStore.TransactOpts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
}

func (_CommitStore *CommitStoreTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "transferOwnership", to)
}

func (_CommitStore *CommitStoreSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CommitStore.Contract.TransferOwnership(&_CommitStore.TransactOpts, to)
}

func (_CommitStore *CommitStoreTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _CommitStore.Contract.TransferOwnership(&_CommitStore.TransactOpts, to)
}

func (_CommitStore *CommitStoreTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_CommitStore *CommitStoreSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.Transmit(&_CommitStore.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_CommitStore *CommitStoreTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _CommitStore.Contract.Transmit(&_CommitStore.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_CommitStore *CommitStoreTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitStore.contract.Transact(opts, "unpause")
}

func (_CommitStore *CommitStoreSession) Unpause() (*types.Transaction, error) {
	return _CommitStore.Contract.Unpause(&_CommitStore.TransactOpts)
}

func (_CommitStore *CommitStoreTransactorSession) Unpause() (*types.Transaction, error) {
	return _CommitStore.Contract.Unpause(&_CommitStore.TransactOpts)
}

type CommitStoreConfigSetIterator struct {
	Event *CommitStoreConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreConfigSetIterator) Error() error {
	return it.fail
}

func (it *CommitStoreConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreConfigSet struct {
	StaticConfig  CommitStoreStaticConfig
	DynamicConfig CommitStoreDynamicConfig
	Raw           types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterConfigSet(opts *bind.FilterOpts) (*CommitStoreConfigSetIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &CommitStoreConfigSetIterator{contract: _CommitStore.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreConfigSet) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreConfigSet)
				if err := _CommitStore.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseConfigSet(log types.Log) (*CommitStoreConfigSet, error) {
	event := new(CommitStoreConfigSet)
	if err := _CommitStore.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreConfigSet0Iterator struct {
	Event *CommitStoreConfigSet0

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreConfigSet0Iterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreConfigSet0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreConfigSet0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreConfigSet0Iterator) Error() error {
	return it.fail
}

func (it *CommitStoreConfigSet0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreConfigSet0 struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterConfigSet0(opts *bind.FilterOpts) (*CommitStoreConfigSet0Iterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "ConfigSet0")
	if err != nil {
		return nil, err
	}
	return &CommitStoreConfigSet0Iterator{contract: _CommitStore.contract, event: "ConfigSet0", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchConfigSet0(opts *bind.WatchOpts, sink chan<- *CommitStoreConfigSet0) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "ConfigSet0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreConfigSet0)
				if err := _CommitStore.contract.UnpackLog(event, "ConfigSet0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseConfigSet0(log types.Log) (*CommitStoreConfigSet0, error) {
	event := new(CommitStoreConfigSet0)
	if err := _CommitStore.contract.UnpackLog(event, "ConfigSet0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreOwnershipTransferRequestedIterator struct {
	Event *CommitStoreOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CommitStoreOwnershipTransferRequestedIterator{contract: _CommitStore.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreOwnershipTransferRequested)
				if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseOwnershipTransferRequested(log types.Log) (*CommitStoreOwnershipTransferRequested, error) {
	event := new(CommitStoreOwnershipTransferRequested)
	if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreOwnershipTransferredIterator struct {
	Event *CommitStoreOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *CommitStoreOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CommitStoreOwnershipTransferredIterator{contract: _CommitStore.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreOwnershipTransferred)
				if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseOwnershipTransferred(log types.Log) (*CommitStoreOwnershipTransferred, error) {
	event := new(CommitStoreOwnershipTransferred)
	if err := _CommitStore.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStorePausedIterator struct {
	Event *CommitStorePaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStorePausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStorePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStorePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStorePausedIterator) Error() error {
	return it.fail
}

func (it *CommitStorePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStorePaused struct {
	Account common.Address
	Raw     types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterPaused(opts *bind.FilterOpts) (*CommitStorePausedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &CommitStorePausedIterator{contract: _CommitStore.contract, event: "Paused", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *CommitStorePaused) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStorePaused)
				if err := _CommitStore.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParsePaused(log types.Log) (*CommitStorePaused, error) {
	event := new(CommitStorePaused)
	if err := _CommitStore.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreReportAcceptedIterator struct {
	Event *CommitStoreReportAccepted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreReportAcceptedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreReportAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreReportAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreReportAcceptedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreReportAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreReportAccepted struct {
	Report CommitStoreCommitReport
	Raw    types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterReportAccepted(opts *bind.FilterOpts) (*CommitStoreReportAcceptedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return &CommitStoreReportAcceptedIterator{contract: _CommitStore.contract, event: "ReportAccepted", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *CommitStoreReportAccepted) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "ReportAccepted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreReportAccepted)
				if err := _CommitStore.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseReportAccepted(log types.Log) (*CommitStoreReportAccepted, error) {
	event := new(CommitStoreReportAccepted)
	if err := _CommitStore.contract.UnpackLog(event, "ReportAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreRootRemovedIterator struct {
	Event *CommitStoreRootRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreRootRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreRootRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreRootRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreRootRemovedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreRootRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreRootRemoved struct {
	Root [32]byte
	Raw  types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterRootRemoved(opts *bind.FilterOpts) (*CommitStoreRootRemovedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "RootRemoved")
	if err != nil {
		return nil, err
	}
	return &CommitStoreRootRemovedIterator{contract: _CommitStore.contract, event: "RootRemoved", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchRootRemoved(opts *bind.WatchOpts, sink chan<- *CommitStoreRootRemoved) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "RootRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreRootRemoved)
				if err := _CommitStore.contract.UnpackLog(event, "RootRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseRootRemoved(log types.Log) (*CommitStoreRootRemoved, error) {
	event := new(CommitStoreRootRemoved)
	if err := _CommitStore.contract.UnpackLog(event, "RootRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreTransmittedIterator struct {
	Event *CommitStoreTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreTransmittedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterTransmitted(opts *bind.FilterOpts) (*CommitStoreTransmittedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &CommitStoreTransmittedIterator{contract: _CommitStore.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *CommitStoreTransmitted) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreTransmitted)
				if err := _CommitStore.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseTransmitted(log types.Log) (*CommitStoreTransmitted, error) {
	event := new(CommitStoreTransmitted)
	if err := _CommitStore.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type CommitStoreUnpausedIterator struct {
	Event *CommitStoreUnpaused

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *CommitStoreUnpausedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitStoreUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(CommitStoreUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *CommitStoreUnpausedIterator) Error() error {
	return it.fail
}

func (it *CommitStoreUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type CommitStoreUnpaused struct {
	Account common.Address
	Raw     types.Log
}

func (_CommitStore *CommitStoreFilterer) FilterUnpaused(opts *bind.FilterOpts) (*CommitStoreUnpausedIterator, error) {

	logs, sub, err := _CommitStore.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &CommitStoreUnpausedIterator{contract: _CommitStore.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

func (_CommitStore *CommitStoreFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CommitStoreUnpaused) (event.Subscription, error) {

	logs, sub, err := _CommitStore.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(CommitStoreUnpaused)
				if err := _CommitStore.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_CommitStore *CommitStoreFilterer) ParseUnpaused(log types.Log) (*CommitStoreUnpaused, error) {
	event := new(CommitStoreUnpaused)
	if err := _CommitStore.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_CommitStore *CommitStore) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _CommitStore.abi.Events["ConfigSet"].ID:
		return _CommitStore.ParseConfigSet(log)
	case _CommitStore.abi.Events["ConfigSet0"].ID:
		return _CommitStore.ParseConfigSet0(log)
	case _CommitStore.abi.Events["OwnershipTransferRequested"].ID:
		return _CommitStore.ParseOwnershipTransferRequested(log)
	case _CommitStore.abi.Events["OwnershipTransferred"].ID:
		return _CommitStore.ParseOwnershipTransferred(log)
	case _CommitStore.abi.Events["Paused"].ID:
		return _CommitStore.ParsePaused(log)
	case _CommitStore.abi.Events["ReportAccepted"].ID:
		return _CommitStore.ParseReportAccepted(log)
	case _CommitStore.abi.Events["RootRemoved"].ID:
		return _CommitStore.ParseRootRemoved(log)
	case _CommitStore.abi.Events["Transmitted"].ID:
		return _CommitStore.ParseTransmitted(log)
	case _CommitStore.abi.Events["Unpaused"].ID:
		return _CommitStore.ParseUnpaused(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (CommitStoreConfigSet) Topic() common.Hash {
	return common.HexToHash("0x4b4b9b37763b78c5a0701b5980dbb19a9104b78dfd1fcaa85c6260f01244bd42")
}

func (CommitStoreConfigSet0) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (CommitStoreOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (CommitStoreOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (CommitStorePaused) Topic() common.Hash {
	return common.HexToHash("0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258")
}

func (CommitStoreReportAccepted) Topic() common.Hash {
	return common.HexToHash("0x3cbd5cf9fd597d6a1acd16b35fb034bd3f9d1061cdd5a7b2c75962a0cde76c6e")
}

func (CommitStoreRootRemoved) Topic() common.Hash {
	return common.HexToHash("0x202f1139a3e334b6056064c0e9b19fd07e44a88d8f6e5ded571b24cf8c371f12")
}

func (CommitStoreTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (CommitStoreUnpaused) Topic() common.Hash {
	return common.HexToHash("0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa")
}

func (_CommitStore *CommitStore) Address() common.Address {
	return _CommitStore.address
}

type CommitStoreInterface interface {
	GetDynamicConfig(opts *bind.CallOpts) (CommitStoreDynamicConfig, error)

	GetExpectedNextSequenceNumber(opts *bind.CallOpts) (uint64, error)

	GetMerkleRoot(opts *bind.CallOpts, root [32]byte) (*big.Int, error)

	GetStaticConfig(opts *bind.CallOpts) (CommitStoreStaticConfig, error)

	GetTransmitters(opts *bind.CallOpts) ([]common.Address, error)

	IsAFNHealthy(opts *bind.CallOpts) (bool, error)

	IsBlessed(opts *bind.CallOpts, root [32]byte) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts) (bool, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	Verify(opts *bind.CallOpts, hashedLeaves [][32]byte, proofs [][32]byte, proofFlagBits *big.Int) (*big.Int, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts) (*types.Transaction, error)

	ResetUnblessedRoots(opts *bind.TransactOpts, rootToReset [][32]byte) (*types.Transaction, error)

	SetDynamicConfig(opts *bind.TransactOpts, dynamicConfig CommitStoreDynamicConfig) (*types.Transaction, error)

	SetMinSeqNr(opts *bind.TransactOpts, minSeqNr uint64) (*types.Transaction, error)

	SetOCR2Config(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*CommitStoreConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *CommitStoreConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*CommitStoreConfigSet, error)

	FilterConfigSet0(opts *bind.FilterOpts) (*CommitStoreConfigSet0Iterator, error)

	WatchConfigSet0(opts *bind.WatchOpts, sink chan<- *CommitStoreConfigSet0) (event.Subscription, error)

	ParseConfigSet0(log types.Log) (*CommitStoreConfigSet0, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*CommitStoreOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*CommitStoreOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitStoreOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*CommitStoreOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts) (*CommitStorePausedIterator, error)

	WatchPaused(opts *bind.WatchOpts, sink chan<- *CommitStorePaused) (event.Subscription, error)

	ParsePaused(log types.Log) (*CommitStorePaused, error)

	FilterReportAccepted(opts *bind.FilterOpts) (*CommitStoreReportAcceptedIterator, error)

	WatchReportAccepted(opts *bind.WatchOpts, sink chan<- *CommitStoreReportAccepted) (event.Subscription, error)

	ParseReportAccepted(log types.Log) (*CommitStoreReportAccepted, error)

	FilterRootRemoved(opts *bind.FilterOpts) (*CommitStoreRootRemovedIterator, error)

	WatchRootRemoved(opts *bind.WatchOpts, sink chan<- *CommitStoreRootRemoved) (event.Subscription, error)

	ParseRootRemoved(log types.Log) (*CommitStoreRootRemoved, error)

	FilterTransmitted(opts *bind.FilterOpts) (*CommitStoreTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *CommitStoreTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*CommitStoreTransmitted, error)

	FilterUnpaused(opts *bind.FilterOpts) (*CommitStoreUnpausedIterator, error)

	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CommitStoreUnpaused) (event.Subscription, error)

	ParseUnpaused(log types.Log) (*CommitStoreUnpaused, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

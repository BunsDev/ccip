// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package optimism_l1

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

var OptimismL1MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_messenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ERC20BridgeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ERC20BridgeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ERC20DepositInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ERC20WithdrawalFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ETHBridgeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ETHBridgeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ETHDepositInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ETHWithdrawalFinalized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSENGER\",\"outputs\":[{\"internalType\":\"contractCrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTHER_BRIDGE\",\"outputs\":[{\"internalType\":\"contractStandardBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"bridgeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"bridgeERC20To\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"bridgeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"bridgeETHTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"depositERC20To\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"depositETHTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_localToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"finalizeBridgeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"finalizeBridgeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"finalizeERC20Withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"finalizeETHWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2TokenBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"contractCrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162002eed38038062002eed8339810160408190526200003491620001be565b6001600160a01b03811660805273420000000000000000000000000000000000001060a0526200006560006200006c565b50620001f0565b600054610100900460ff16158080156200008d5750600054600160ff909116105b80620000bd5750620000aa30620001af60201b6200056f1760201c565b158015620000bd575060005460ff166001145b620001255760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff19166001179055801562000149576000805461ff0019166101001790555b603280546001600160a01b0319166001600160a01b0384161790558015620001ab576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001600160a01b03163b151590565b600060208284031215620001d157600080fd5b81516001600160a01b0381168114620001e957600080fd5b9392505050565b60805160a051612c7c62000271600039600081816103e70152818161049e015281816105e001528181610b30015281816117070152611db90152600081816102f6015281816104d4015281816105b60152818161061701528181610b0601528181610b6701528181610e63015281816116ca0152611d7d0152612c7c6000f3fe6080604052600436106101795760003560e01c8063838b2520116100cb5780639a2ac6d51161007f578063c4d66de811610059578063c4d66de81461053c578063c89701a21461048f578063e11013dd1461055c57600080fd5b80639a2ac6d5146104f6578063a9f9e67514610509578063b1a1a8821461052957600080fd5b80638f601f66116100b05780638f601f661461044957806391c49bf81461048f578063927ede2d146104c257600080fd5b8063838b252014610409578063870876231461042957600080fd5b80633cb747bf1161012d57806358a997f61161010757806358a997f6146103905780635c975abb146103b05780637f46ddb2146103d557600080fd5b80633cb747bf146102e7578063540abf731461031a57806354fd4d501461033a57600080fd5b80631532ec341161015e5780631532ec341461026a5780631635f5fd1461027d57806335e80ab31461029057600080fd5b80630166a07a1461023757806309fc88431461025757600080fd5b3661023257333b15610212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f5374616e646172644272696467653a2066756e6374696f6e2063616e206f6e6c60448201527f792062652063616c6c65642066726f6d20616e20454f4100000000000000000060648201526084015b60405180910390fd5b610230333362030d406040518060200160405280600081525061058b565b005b600080fd5b34801561024357600080fd5b506102306102523660046126c3565b61059e565b610230610265366004612774565b610a03565b6102306102783660046127c7565b610ada565b61023061028b3660046127c7565b610aee565b34801561029c57600080fd5b506032546102bd9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156102f357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102bd565b34801561032657600080fd5b5061023061033536600461283a565b611032565b34801561034657600080fd5b506103836040518060400160405280600581526020017f322e302e3000000000000000000000000000000000000000000000000000000081525081565b6040516102de9190612927565b34801561039c57600080fd5b506102306103ab36600461293a565b611077565b3480156103bc57600080fd5b506103c561114b565b60405190151581526020016102de565b3480156103e157600080fd5b506102bd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561041557600080fd5b5061023061042436600461283a565b6111e4565b34801561043557600080fd5b5061023061044436600461293a565b611229565b34801561045557600080fd5b506104816104643660046129bd565b600260209081526000928352604080842090915290825290205481565b6040519081526020016102de565b34801561049b57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102bd565b3480156104ce57600080fd5b506102bd7f000000000000000000000000000000000000000000000000000000000000000081565b6102306105043660046129f6565b6112fd565b34801561051557600080fd5b506102306105243660046126c3565b61133f565b610230610537366004612774565b61134e565b34801561054857600080fd5b50610230610557366004612a59565b61141f565b61023061056a3660046129f6565b6115ea565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b610598848434858561162d565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480156106bc57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a49190612a76565b73ffffffffffffffffffffffffffffffffffffffff16145b61076e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f5374616e646172644272696467653a2066756e6374696f6e2063616e206f6e6c60448201527f792062652063616c6c65642066726f6d20746865206f7468657220627269646760648201527f6500000000000000000000000000000000000000000000000000000000000000608482015260a401610209565b61077661114b565b156107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5374616e646172644272696467653a20706175736564000000000000000000006044820152606401610209565b6107e687611811565b15610934576107f58787611873565b6108a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f5374616e646172644272696467653a2077726f6e672072656d6f746520746f6b60448201527f656e20666f72204f7074696d69736d204d696e7461626c65204552433230206c60648201527f6f63616c20746f6b656e00000000000000000000000000000000000000000000608482015260a401610209565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590528816906340c10f1990604401600060405180830381600087803b15801561091757600080fd5b505af115801561092b573d6000803e3d6000fd5b505050506109b6565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152600260209081526040808320938a1683529290522054610972908490612ac2565b73ffffffffffffffffffffffffffffffffffffffff8089166000818152600260209081526040808320948c16835293905291909120919091556109b6908585611993565b6109fa878787878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a6792505050565b50505050505050565b333b15610a92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f5374616e646172644272696467653a2066756e6374696f6e2063616e206f6e6c60448201527f792062652063616c6c65642066726f6d20616e20454f410000000000000000006064820152608401610209565b610ad53333348686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061162d92505050565b505050565b610ae78585858585610aee565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015610c0c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf49190612a76565b73ffffffffffffffffffffffffffffffffffffffff16145b610cbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f5374616e646172644272696467653a2066756e6374696f6e2063616e206f6e6c60448201527f792062652063616c6c65642066726f6d20746865206f7468657220627269646760648201527f6500000000000000000000000000000000000000000000000000000000000000608482015260a401610209565b610cc661114b565b15610d2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5374616e646172644272696467653a20706175736564000000000000000000006044820152606401610209565b823414610dbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f5374616e646172644272696467653a20616d6f756e742073656e7420646f657360448201527f206e6f74206d6174636820616d6f756e742072657175697265640000000000006064820152608401610209565b3073ffffffffffffffffffffffffffffffffffffffff851603610e61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5374616e646172644272696467653a2063616e6e6f742073656e6420746f207360448201527f656c6600000000000000000000000000000000000000000000000000000000006064820152608401610209565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610f3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f5374616e646172644272696467653a2063616e6e6f742073656e6420746f206d60448201527f657373656e6765720000000000000000000000000000000000000000000000006064820152608401610209565b610f7e85858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611af592505050565b6000610f9b855a8660405180602001604052806000815250611b68565b90508061102a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5374616e646172644272696467653a20455448207472616e736665722066616960448201527f6c656400000000000000000000000000000000000000000000000000000000006064820152608401610209565b505050505050565b6109fa87873388888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b8292505050565b333b15611106576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f5374616e646172644272696467653a2066756e6374696f6e2063616e206f6e6c60448201527f792062652063616c6c65642066726f6d20616e20454f410000000000000000006064820152608401610209565b61102a86863333888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ec992505050565b603254604080517f5c975abb000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691635c975abb9160048083019260209291908290030181865afa1580156111bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111df9190612ad9565b905090565b6109fa87873388888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ec992505050565b333b156112b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f5374616e646172644272696467653a2066756e6374696f6e2063616e206f6e6c60448201527f792062652063616c6c65642066726f6d20616e20454f410000000000000000006064820152608401610209565b61102a86863333888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b8292505050565b61059833858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061058b92505050565b6109fa8787878787878761059e565b333b156113dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f5374616e646172644272696467653a2066756e6374696f6e2063616e206f6e6c60448201527f792062652063616c6c65642066726f6d20616e20454f410000000000000000006064820152608401610209565b610ad533338585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061058b92505050565b600054610100900460ff161580801561143f5750600054600160ff909116105b806114595750303b158015611459575060005460ff166001145b6114e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610209565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561154357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b603280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841617905580156115e657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6105983385348686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061162d92505050565b8234146116bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5374616e646172644272696467653a206272696467696e6720455448206d757360448201527f7420696e636c7564652073756666696369656e74204554482076616c756500006064820152608401610209565b6116c885858584611ed8565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633dbb202b847f0000000000000000000000000000000000000000000000000000000000000000631635f5fd60e01b898989886040516024016117459493929190612afb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e086901b90921682526117d892918890600401612b44565b6000604051808303818588803b1580156117f157600080fd5b505af1158015611805573d6000803e3d6000fd5b50505050505050505050565b600061183d827f1d1d8b6300000000000000000000000000000000000000000000000000000000611f4b565b8061186d575061186d827fec4fc8e300000000000000000000000000000000000000000000000000000000611f4b565b92915050565b600061189f837f1d1d8b6300000000000000000000000000000000000000000000000000000000611f4b565b15611948578273ffffffffffffffffffffffffffffffffffffffff1663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119139190612a76565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614905061186d565b8273ffffffffffffffffffffffffffffffffffffffff1663d6c0b2c46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118ef573d6000803e3d6000fd5b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610ad59084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611f6e565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f3ceee06c1e37648fcbb6ed52e17b3e1f275a1f8c7b22a84b2b84732431e046b3868686604051611adf93929190612b89565b60405180910390a461102a86868686868661207a565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f2ac69ee804d9a7a0984249f508dfab7cb2534b465b6ce1580f99a38ba9c5e6318484604051611b54929190612bc7565b60405180910390a361059884848484612102565b600080600080845160208601878a8af19695505050505050565b611b8b87611811565b15611cd957611b9a8787611873565b611c4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f5374616e646172644272696467653a2077726f6e672072656d6f746520746f6b60448201527f656e20666f72204f7074696d69736d204d696e7461626c65204552433230206c60648201527f6f63616c20746f6b656e00000000000000000000000000000000000000000000608482015260a401610209565b6040517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015260248201859052881690639dc29fac90604401600060405180830381600087803b158015611cbc57600080fd5b505af1158015611cd0573d6000803e3d6000fd5b50505050611d6d565b611cfb73ffffffffffffffffffffffffffffffffffffffff881686308661216f565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152600260209081526040808320938a1683529290522054611d39908490612be0565b73ffffffffffffffffffffffffffffffffffffffff8089166000908152600260209081526040808320938b16835292905220555b611d7b8787878787866121cd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633dbb202b7f0000000000000000000000000000000000000000000000000000000000000000630166a07a60e01b898b8a8a8a89604051602401611dfb96959493929190612bf8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009485161790525160e085901b9092168252611e8e92918790600401612b44565b600060405180830381600087803b158015611ea857600080fd5b505af1158015611ebc573d6000803e3d6000fd5b5050505050505050505050565b6109fa87878787878787611b82565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f35d79ab81f2b2017e19afb5c5571778877782d7a8786f5907f93b0f4702f4f238484604051611f37929190612bc7565b60405180910390a36105988484848461225b565b6000611f56836122ba565b8015611f675750611f67838361231e565b9392505050565b6000611fd0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166123ed9092919063ffffffff16565b805190915015610ad55780806020019051810190611fee9190612ad9565b610ad5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610209565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fd59c65b35445225835c83f50b6ede06a7be047d22e357073e250d9af537518cd8686866040516120f293929190612b89565b60405180910390a4505050505050565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f31b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83d8484604051612161929190612bc7565b60405180910390a350505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526105989085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016119e5565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f718594027abd4eaed59f95162563e0cc6d0e8d5b86b1c7be8b1b0ac3343d039686868660405161224593929190612b89565b60405180910390a461102a868686868686612404565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af58484604051612161929190612bc7565b60006122e6827f01ffc9a70000000000000000000000000000000000000000000000000000000061231e565b801561186d5750612317827fffffffff0000000000000000000000000000000000000000000000000000000061231e565b1592915050565b604080517fffffffff000000000000000000000000000000000000000000000000000000008316602480830191909152825180830390910181526044909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000178152825160009392849283928392918391908a617530fa92503d915060005190508280156123d6575060208210155b80156123e25750600081115b979650505050505050565b60606123fc848460008561247c565b949350505050565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f7ff126db8024424bbfd9826e8ab82ff59136289ea440b04b39a0df1b03b9cabf8686866040516120f293929190612b89565b60608247101561250e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610209565b73ffffffffffffffffffffffffffffffffffffffff85163b61258c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610209565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516125b59190612c53565b60006040518083038185875af1925050503d80600081146125f2576040519150601f19603f3d011682016040523d82523d6000602084013e6125f7565b606091505b50915091506123e282828660608315612611575081611f67565b8251156126215782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102099190612927565b73ffffffffffffffffffffffffffffffffffffffff8116811461267757600080fd5b50565b60008083601f84011261268c57600080fd5b50813567ffffffffffffffff8111156126a457600080fd5b6020830191508360208285010111156126bc57600080fd5b9250929050565b600080600080600080600060c0888a0312156126de57600080fd5b87356126e981612655565b965060208801356126f981612655565b9550604088013561270981612655565b9450606088013561271981612655565b93506080880135925060a088013567ffffffffffffffff81111561273c57600080fd5b6127488a828b0161267a565b989b979a50959850939692959293505050565b803563ffffffff8116811461276f57600080fd5b919050565b60008060006040848603121561278957600080fd5b6127928461275b565b9250602084013567ffffffffffffffff8111156127ae57600080fd5b6127ba8682870161267a565b9497909650939450505050565b6000806000806000608086880312156127df57600080fd5b85356127ea81612655565b945060208601356127fa81612655565b935060408601359250606086013567ffffffffffffffff81111561281d57600080fd5b6128298882890161267a565b969995985093965092949392505050565b600080600080600080600060c0888a03121561285557600080fd5b873561286081612655565b9650602088013561287081612655565b9550604088013561288081612655565b9450606088013593506128956080890161275b565b925060a088013567ffffffffffffffff81111561273c57600080fd5b60005b838110156128cc5781810151838201526020016128b4565b838111156105985750506000910152565b600081518084526128f58160208601602086016128b1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611f6760208301846128dd565b60008060008060008060a0878903121561295357600080fd5b863561295e81612655565b9550602087013561296e81612655565b9450604087013593506129836060880161275b565b9250608087013567ffffffffffffffff81111561299f57600080fd5b6129ab89828a0161267a565b979a9699509497509295939492505050565b600080604083850312156129d057600080fd5b82356129db81612655565b915060208301356129eb81612655565b809150509250929050565b60008060008060608587031215612a0c57600080fd5b8435612a1781612655565b9350612a256020860161275b565b9250604085013567ffffffffffffffff811115612a4157600080fd5b612a4d8782880161267a565b95989497509550505050565b600060208284031215612a6b57600080fd5b8135611f6781612655565b600060208284031215612a8857600080fd5b8151611f6781612655565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015612ad457612ad4612a93565b500390565b600060208284031215612aeb57600080fd5b81518015158114611f6757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152612b3a60808301846128dd565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152606060208201526000612b7360608301856128dd565b905063ffffffff83166040830152949350505050565b73ffffffffffffffffffffffffffffffffffffffff84168152826020820152606060408201526000612bbe60608301846128dd565b95945050505050565b8281526040602082015260006123fc60408301846128dd565b60008219821115612bf357612bf3612a93565b500190565b600073ffffffffffffffffffffffffffffffffffffffff80891683528088166020840152808716604084015280861660608401525083608083015260c060a0830152612c4760c08301846128dd565b98975050505050505050565b60008251612c658184602087016128b1565b919091019291505056fea164736f6c634300080f000a",
}

var OptimismL1ABI = OptimismL1MetaData.ABI

var OptimismL1Bin = OptimismL1MetaData.Bin

func DeployOptimismL1(auth *bind.TransactOpts, backend bind.ContractBackend, _messenger common.Address) (common.Address, *types.Transaction, *OptimismL1, error) {
	parsed, err := OptimismL1MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OptimismL1Bin), backend, _messenger)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OptimismL1{address: address, abi: *parsed, OptimismL1Caller: OptimismL1Caller{contract: contract}, OptimismL1Transactor: OptimismL1Transactor{contract: contract}, OptimismL1Filterer: OptimismL1Filterer{contract: contract}}, nil
}

type OptimismL1 struct {
	address common.Address
	abi     abi.ABI
	OptimismL1Caller
	OptimismL1Transactor
	OptimismL1Filterer
}

type OptimismL1Caller struct {
	contract *bind.BoundContract
}

type OptimismL1Transactor struct {
	contract *bind.BoundContract
}

type OptimismL1Filterer struct {
	contract *bind.BoundContract
}

type OptimismL1Session struct {
	Contract     *OptimismL1
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type OptimismL1CallerSession struct {
	Contract *OptimismL1Caller
	CallOpts bind.CallOpts
}

type OptimismL1TransactorSession struct {
	Contract     *OptimismL1Transactor
	TransactOpts bind.TransactOpts
}

type OptimismL1Raw struct {
	Contract *OptimismL1
}

type OptimismL1CallerRaw struct {
	Contract *OptimismL1Caller
}

type OptimismL1TransactorRaw struct {
	Contract *OptimismL1Transactor
}

func NewOptimismL1(address common.Address, backend bind.ContractBackend) (*OptimismL1, error) {
	abi, err := abi.JSON(strings.NewReader(OptimismL1ABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindOptimismL1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OptimismL1{address: address, abi: abi, OptimismL1Caller: OptimismL1Caller{contract: contract}, OptimismL1Transactor: OptimismL1Transactor{contract: contract}, OptimismL1Filterer: OptimismL1Filterer{contract: contract}}, nil
}

func NewOptimismL1Caller(address common.Address, caller bind.ContractCaller) (*OptimismL1Caller, error) {
	contract, err := bindOptimismL1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OptimismL1Caller{contract: contract}, nil
}

func NewOptimismL1Transactor(address common.Address, transactor bind.ContractTransactor) (*OptimismL1Transactor, error) {
	contract, err := bindOptimismL1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OptimismL1Transactor{contract: contract}, nil
}

func NewOptimismL1Filterer(address common.Address, filterer bind.ContractFilterer) (*OptimismL1Filterer, error) {
	contract, err := bindOptimismL1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OptimismL1Filterer{contract: contract}, nil
}

func bindOptimismL1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OptimismL1MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_OptimismL1 *OptimismL1Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OptimismL1.Contract.OptimismL1Caller.contract.Call(opts, result, method, params...)
}

func (_OptimismL1 *OptimismL1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OptimismL1.Contract.OptimismL1Transactor.contract.Transfer(opts)
}

func (_OptimismL1 *OptimismL1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OptimismL1.Contract.OptimismL1Transactor.contract.Transact(opts, method, params...)
}

func (_OptimismL1 *OptimismL1CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OptimismL1.Contract.contract.Call(opts, result, method, params...)
}

func (_OptimismL1 *OptimismL1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OptimismL1.Contract.contract.Transfer(opts)
}

func (_OptimismL1 *OptimismL1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OptimismL1.Contract.contract.Transact(opts, method, params...)
}

func (_OptimismL1 *OptimismL1Caller) MESSENGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OptimismL1.contract.Call(opts, &out, "MESSENGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_OptimismL1 *OptimismL1Session) MESSENGER() (common.Address, error) {
	return _OptimismL1.Contract.MESSENGER(&_OptimismL1.CallOpts)
}

func (_OptimismL1 *OptimismL1CallerSession) MESSENGER() (common.Address, error) {
	return _OptimismL1.Contract.MESSENGER(&_OptimismL1.CallOpts)
}

func (_OptimismL1 *OptimismL1Caller) OTHERBRIDGE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OptimismL1.contract.Call(opts, &out, "OTHER_BRIDGE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_OptimismL1 *OptimismL1Session) OTHERBRIDGE() (common.Address, error) {
	return _OptimismL1.Contract.OTHERBRIDGE(&_OptimismL1.CallOpts)
}

func (_OptimismL1 *OptimismL1CallerSession) OTHERBRIDGE() (common.Address, error) {
	return _OptimismL1.Contract.OTHERBRIDGE(&_OptimismL1.CallOpts)
}

func (_OptimismL1 *OptimismL1Caller) Deposits(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _OptimismL1.contract.Call(opts, &out, "deposits", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_OptimismL1 *OptimismL1Session) Deposits(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _OptimismL1.Contract.Deposits(&_OptimismL1.CallOpts, arg0, arg1)
}

func (_OptimismL1 *OptimismL1CallerSession) Deposits(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _OptimismL1.Contract.Deposits(&_OptimismL1.CallOpts, arg0, arg1)
}

func (_OptimismL1 *OptimismL1Caller) L2TokenBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OptimismL1.contract.Call(opts, &out, "l2TokenBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_OptimismL1 *OptimismL1Session) L2TokenBridge() (common.Address, error) {
	return _OptimismL1.Contract.L2TokenBridge(&_OptimismL1.CallOpts)
}

func (_OptimismL1 *OptimismL1CallerSession) L2TokenBridge() (common.Address, error) {
	return _OptimismL1.Contract.L2TokenBridge(&_OptimismL1.CallOpts)
}

func (_OptimismL1 *OptimismL1Caller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OptimismL1.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_OptimismL1 *OptimismL1Session) Messenger() (common.Address, error) {
	return _OptimismL1.Contract.Messenger(&_OptimismL1.CallOpts)
}

func (_OptimismL1 *OptimismL1CallerSession) Messenger() (common.Address, error) {
	return _OptimismL1.Contract.Messenger(&_OptimismL1.CallOpts)
}

func (_OptimismL1 *OptimismL1Caller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _OptimismL1.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_OptimismL1 *OptimismL1Session) Version() (string, error) {
	return _OptimismL1.Contract.Version(&_OptimismL1.CallOpts)
}

func (_OptimismL1 *OptimismL1CallerSession) Version() (string, error) {
	return _OptimismL1.Contract.Version(&_OptimismL1.CallOpts)
}

func (_OptimismL1 *OptimismL1Transactor) BridgeERC20(opts *bind.TransactOpts, _localToken common.Address, _remoteToken common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "bridgeERC20", _localToken, _remoteToken, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Session) BridgeERC20(_localToken common.Address, _remoteToken common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.BridgeERC20(&_OptimismL1.TransactOpts, _localToken, _remoteToken, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) BridgeERC20(_localToken common.Address, _remoteToken common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.BridgeERC20(&_OptimismL1.TransactOpts, _localToken, _remoteToken, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) BridgeERC20To(opts *bind.TransactOpts, _localToken common.Address, _remoteToken common.Address, _to common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "bridgeERC20To", _localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Session) BridgeERC20To(_localToken common.Address, _remoteToken common.Address, _to common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.BridgeERC20To(&_OptimismL1.TransactOpts, _localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) BridgeERC20To(_localToken common.Address, _remoteToken common.Address, _to common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.BridgeERC20To(&_OptimismL1.TransactOpts, _localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) BridgeETH(opts *bind.TransactOpts, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "bridgeETH", _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Session) BridgeETH(_minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.BridgeETH(&_OptimismL1.TransactOpts, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) BridgeETH(_minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.BridgeETH(&_OptimismL1.TransactOpts, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) BridgeETHTo(opts *bind.TransactOpts, _to common.Address, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "bridgeETHTo", _to, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Session) BridgeETHTo(_to common.Address, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.BridgeETHTo(&_OptimismL1.TransactOpts, _to, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) BridgeETHTo(_to common.Address, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.BridgeETHTo(&_OptimismL1.TransactOpts, _to, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) DepositERC20(opts *bind.TransactOpts, _l1Token common.Address, _l2Token common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "depositERC20", _l1Token, _l2Token, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Session) DepositERC20(_l1Token common.Address, _l2Token common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.DepositERC20(&_OptimismL1.TransactOpts, _l1Token, _l2Token, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) DepositERC20(_l1Token common.Address, _l2Token common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.DepositERC20(&_OptimismL1.TransactOpts, _l1Token, _l2Token, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) DepositERC20To(opts *bind.TransactOpts, _l1Token common.Address, _l2Token common.Address, _to common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "depositERC20To", _l1Token, _l2Token, _to, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Session) DepositERC20To(_l1Token common.Address, _l2Token common.Address, _to common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.DepositERC20To(&_OptimismL1.TransactOpts, _l1Token, _l2Token, _to, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) DepositERC20To(_l1Token common.Address, _l2Token common.Address, _to common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.DepositERC20To(&_OptimismL1.TransactOpts, _l1Token, _l2Token, _to, _amount, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) DepositETH(opts *bind.TransactOpts, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "depositETH", _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Session) DepositETH(_minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.DepositETH(&_OptimismL1.TransactOpts, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) DepositETH(_minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.DepositETH(&_OptimismL1.TransactOpts, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) DepositETHTo(opts *bind.TransactOpts, _to common.Address, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "depositETHTo", _to, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Session) DepositETHTo(_to common.Address, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.DepositETHTo(&_OptimismL1.TransactOpts, _to, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) DepositETHTo(_to common.Address, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.DepositETHTo(&_OptimismL1.TransactOpts, _to, _minGasLimit, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) FinalizeBridgeERC20(opts *bind.TransactOpts, _localToken common.Address, _remoteToken common.Address, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "finalizeBridgeERC20", _localToken, _remoteToken, _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1Session) FinalizeBridgeERC20(_localToken common.Address, _remoteToken common.Address, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.FinalizeBridgeERC20(&_OptimismL1.TransactOpts, _localToken, _remoteToken, _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) FinalizeBridgeERC20(_localToken common.Address, _remoteToken common.Address, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.FinalizeBridgeERC20(&_OptimismL1.TransactOpts, _localToken, _remoteToken, _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) FinalizeBridgeETH(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "finalizeBridgeETH", _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1Session) FinalizeBridgeETH(_from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.FinalizeBridgeETH(&_OptimismL1.TransactOpts, _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) FinalizeBridgeETH(_from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.FinalizeBridgeETH(&_OptimismL1.TransactOpts, _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) FinalizeERC20Withdrawal(opts *bind.TransactOpts, _l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "finalizeERC20Withdrawal", _l1Token, _l2Token, _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1Session) FinalizeERC20Withdrawal(_l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.FinalizeERC20Withdrawal(&_OptimismL1.TransactOpts, _l1Token, _l2Token, _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) FinalizeERC20Withdrawal(_l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.FinalizeERC20Withdrawal(&_OptimismL1.TransactOpts, _l1Token, _l2Token, _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) FinalizeETHWithdrawal(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.contract.Transact(opts, "finalizeETHWithdrawal", _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1Session) FinalizeETHWithdrawal(_from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.FinalizeETHWithdrawal(&_OptimismL1.TransactOpts, _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1TransactorSession) FinalizeETHWithdrawal(_from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error) {
	return _OptimismL1.Contract.FinalizeETHWithdrawal(&_OptimismL1.TransactOpts, _from, _to, _amount, _extraData)
}

func (_OptimismL1 *OptimismL1Transactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OptimismL1.contract.RawTransact(opts, nil)
}

func (_OptimismL1 *OptimismL1Session) Receive() (*types.Transaction, error) {
	return _OptimismL1.Contract.Receive(&_OptimismL1.TransactOpts)
}

func (_OptimismL1 *OptimismL1TransactorSession) Receive() (*types.Transaction, error) {
	return _OptimismL1.Contract.Receive(&_OptimismL1.TransactOpts)
}

type OptimismL1ERC20BridgeFinalizedIterator struct {
	Event *OptimismL1ERC20BridgeFinalized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OptimismL1ERC20BridgeFinalizedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OptimismL1ERC20BridgeFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OptimismL1ERC20BridgeFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OptimismL1ERC20BridgeFinalizedIterator) Error() error {
	return it.fail
}

func (it *OptimismL1ERC20BridgeFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OptimismL1ERC20BridgeFinalized struct {
	LocalToken  common.Address
	RemoteToken common.Address
	From        common.Address
	To          common.Address
	Amount      *big.Int
	ExtraData   []byte
	Raw         types.Log
}

func (_OptimismL1 *OptimismL1Filterer) FilterERC20BridgeFinalized(opts *bind.FilterOpts, localToken []common.Address, remoteToken []common.Address, from []common.Address) (*OptimismL1ERC20BridgeFinalizedIterator, error) {

	var localTokenRule []interface{}
	for _, localTokenItem := range localToken {
		localTokenRule = append(localTokenRule, localTokenItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _OptimismL1.contract.FilterLogs(opts, "ERC20BridgeFinalized", localTokenRule, remoteTokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &OptimismL1ERC20BridgeFinalizedIterator{contract: _OptimismL1.contract, event: "ERC20BridgeFinalized", logs: logs, sub: sub}, nil
}

func (_OptimismL1 *OptimismL1Filterer) WatchERC20BridgeFinalized(opts *bind.WatchOpts, sink chan<- *OptimismL1ERC20BridgeFinalized, localToken []common.Address, remoteToken []common.Address, from []common.Address) (event.Subscription, error) {

	var localTokenRule []interface{}
	for _, localTokenItem := range localToken {
		localTokenRule = append(localTokenRule, localTokenItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _OptimismL1.contract.WatchLogs(opts, "ERC20BridgeFinalized", localTokenRule, remoteTokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OptimismL1ERC20BridgeFinalized)
				if err := _OptimismL1.contract.UnpackLog(event, "ERC20BridgeFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OptimismL1 *OptimismL1Filterer) ParseERC20BridgeFinalized(log types.Log) (*OptimismL1ERC20BridgeFinalized, error) {
	event := new(OptimismL1ERC20BridgeFinalized)
	if err := _OptimismL1.contract.UnpackLog(event, "ERC20BridgeFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OptimismL1ERC20BridgeInitiatedIterator struct {
	Event *OptimismL1ERC20BridgeInitiated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OptimismL1ERC20BridgeInitiatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OptimismL1ERC20BridgeInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OptimismL1ERC20BridgeInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OptimismL1ERC20BridgeInitiatedIterator) Error() error {
	return it.fail
}

func (it *OptimismL1ERC20BridgeInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OptimismL1ERC20BridgeInitiated struct {
	LocalToken  common.Address
	RemoteToken common.Address
	From        common.Address
	To          common.Address
	Amount      *big.Int
	ExtraData   []byte
	Raw         types.Log
}

func (_OptimismL1 *OptimismL1Filterer) FilterERC20BridgeInitiated(opts *bind.FilterOpts, localToken []common.Address, remoteToken []common.Address, from []common.Address) (*OptimismL1ERC20BridgeInitiatedIterator, error) {

	var localTokenRule []interface{}
	for _, localTokenItem := range localToken {
		localTokenRule = append(localTokenRule, localTokenItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _OptimismL1.contract.FilterLogs(opts, "ERC20BridgeInitiated", localTokenRule, remoteTokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &OptimismL1ERC20BridgeInitiatedIterator{contract: _OptimismL1.contract, event: "ERC20BridgeInitiated", logs: logs, sub: sub}, nil
}

func (_OptimismL1 *OptimismL1Filterer) WatchERC20BridgeInitiated(opts *bind.WatchOpts, sink chan<- *OptimismL1ERC20BridgeInitiated, localToken []common.Address, remoteToken []common.Address, from []common.Address) (event.Subscription, error) {

	var localTokenRule []interface{}
	for _, localTokenItem := range localToken {
		localTokenRule = append(localTokenRule, localTokenItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _OptimismL1.contract.WatchLogs(opts, "ERC20BridgeInitiated", localTokenRule, remoteTokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OptimismL1ERC20BridgeInitiated)
				if err := _OptimismL1.contract.UnpackLog(event, "ERC20BridgeInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OptimismL1 *OptimismL1Filterer) ParseERC20BridgeInitiated(log types.Log) (*OptimismL1ERC20BridgeInitiated, error) {
	event := new(OptimismL1ERC20BridgeInitiated)
	if err := _OptimismL1.contract.UnpackLog(event, "ERC20BridgeInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OptimismL1ERC20DepositInitiatedIterator struct {
	Event *OptimismL1ERC20DepositInitiated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OptimismL1ERC20DepositInitiatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OptimismL1ERC20DepositInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OptimismL1ERC20DepositInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OptimismL1ERC20DepositInitiatedIterator) Error() error {
	return it.fail
}

func (it *OptimismL1ERC20DepositInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OptimismL1ERC20DepositInitiated struct {
	L1Token   common.Address
	L2Token   common.Address
	From      common.Address
	To        common.Address
	Amount    *big.Int
	ExtraData []byte
	Raw       types.Log
}

func (_OptimismL1 *OptimismL1Filterer) FilterERC20DepositInitiated(opts *bind.FilterOpts, l1Token []common.Address, l2Token []common.Address, from []common.Address) (*OptimismL1ERC20DepositInitiatedIterator, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var l2TokenRule []interface{}
	for _, l2TokenItem := range l2Token {
		l2TokenRule = append(l2TokenRule, l2TokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _OptimismL1.contract.FilterLogs(opts, "ERC20DepositInitiated", l1TokenRule, l2TokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &OptimismL1ERC20DepositInitiatedIterator{contract: _OptimismL1.contract, event: "ERC20DepositInitiated", logs: logs, sub: sub}, nil
}

func (_OptimismL1 *OptimismL1Filterer) WatchERC20DepositInitiated(opts *bind.WatchOpts, sink chan<- *OptimismL1ERC20DepositInitiated, l1Token []common.Address, l2Token []common.Address, from []common.Address) (event.Subscription, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var l2TokenRule []interface{}
	for _, l2TokenItem := range l2Token {
		l2TokenRule = append(l2TokenRule, l2TokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _OptimismL1.contract.WatchLogs(opts, "ERC20DepositInitiated", l1TokenRule, l2TokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OptimismL1ERC20DepositInitiated)
				if err := _OptimismL1.contract.UnpackLog(event, "ERC20DepositInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OptimismL1 *OptimismL1Filterer) ParseERC20DepositInitiated(log types.Log) (*OptimismL1ERC20DepositInitiated, error) {
	event := new(OptimismL1ERC20DepositInitiated)
	if err := _OptimismL1.contract.UnpackLog(event, "ERC20DepositInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OptimismL1ERC20WithdrawalFinalizedIterator struct {
	Event *OptimismL1ERC20WithdrawalFinalized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OptimismL1ERC20WithdrawalFinalizedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OptimismL1ERC20WithdrawalFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OptimismL1ERC20WithdrawalFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OptimismL1ERC20WithdrawalFinalizedIterator) Error() error {
	return it.fail
}

func (it *OptimismL1ERC20WithdrawalFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OptimismL1ERC20WithdrawalFinalized struct {
	L1Token   common.Address
	L2Token   common.Address
	From      common.Address
	To        common.Address
	Amount    *big.Int
	ExtraData []byte
	Raw       types.Log
}

func (_OptimismL1 *OptimismL1Filterer) FilterERC20WithdrawalFinalized(opts *bind.FilterOpts, l1Token []common.Address, l2Token []common.Address, from []common.Address) (*OptimismL1ERC20WithdrawalFinalizedIterator, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var l2TokenRule []interface{}
	for _, l2TokenItem := range l2Token {
		l2TokenRule = append(l2TokenRule, l2TokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _OptimismL1.contract.FilterLogs(opts, "ERC20WithdrawalFinalized", l1TokenRule, l2TokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &OptimismL1ERC20WithdrawalFinalizedIterator{contract: _OptimismL1.contract, event: "ERC20WithdrawalFinalized", logs: logs, sub: sub}, nil
}

func (_OptimismL1 *OptimismL1Filterer) WatchERC20WithdrawalFinalized(opts *bind.WatchOpts, sink chan<- *OptimismL1ERC20WithdrawalFinalized, l1Token []common.Address, l2Token []common.Address, from []common.Address) (event.Subscription, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var l2TokenRule []interface{}
	for _, l2TokenItem := range l2Token {
		l2TokenRule = append(l2TokenRule, l2TokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _OptimismL1.contract.WatchLogs(opts, "ERC20WithdrawalFinalized", l1TokenRule, l2TokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OptimismL1ERC20WithdrawalFinalized)
				if err := _OptimismL1.contract.UnpackLog(event, "ERC20WithdrawalFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OptimismL1 *OptimismL1Filterer) ParseERC20WithdrawalFinalized(log types.Log) (*OptimismL1ERC20WithdrawalFinalized, error) {
	event := new(OptimismL1ERC20WithdrawalFinalized)
	if err := _OptimismL1.contract.UnpackLog(event, "ERC20WithdrawalFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OptimismL1ETHBridgeFinalizedIterator struct {
	Event *OptimismL1ETHBridgeFinalized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OptimismL1ETHBridgeFinalizedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OptimismL1ETHBridgeFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OptimismL1ETHBridgeFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OptimismL1ETHBridgeFinalizedIterator) Error() error {
	return it.fail
}

func (it *OptimismL1ETHBridgeFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OptimismL1ETHBridgeFinalized struct {
	From      common.Address
	To        common.Address
	Amount    *big.Int
	ExtraData []byte
	Raw       types.Log
}

func (_OptimismL1 *OptimismL1Filterer) FilterETHBridgeFinalized(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OptimismL1ETHBridgeFinalizedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OptimismL1.contract.FilterLogs(opts, "ETHBridgeFinalized", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &OptimismL1ETHBridgeFinalizedIterator{contract: _OptimismL1.contract, event: "ETHBridgeFinalized", logs: logs, sub: sub}, nil
}

func (_OptimismL1 *OptimismL1Filterer) WatchETHBridgeFinalized(opts *bind.WatchOpts, sink chan<- *OptimismL1ETHBridgeFinalized, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OptimismL1.contract.WatchLogs(opts, "ETHBridgeFinalized", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OptimismL1ETHBridgeFinalized)
				if err := _OptimismL1.contract.UnpackLog(event, "ETHBridgeFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OptimismL1 *OptimismL1Filterer) ParseETHBridgeFinalized(log types.Log) (*OptimismL1ETHBridgeFinalized, error) {
	event := new(OptimismL1ETHBridgeFinalized)
	if err := _OptimismL1.contract.UnpackLog(event, "ETHBridgeFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OptimismL1ETHBridgeInitiatedIterator struct {
	Event *OptimismL1ETHBridgeInitiated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OptimismL1ETHBridgeInitiatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OptimismL1ETHBridgeInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OptimismL1ETHBridgeInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OptimismL1ETHBridgeInitiatedIterator) Error() error {
	return it.fail
}

func (it *OptimismL1ETHBridgeInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OptimismL1ETHBridgeInitiated struct {
	From      common.Address
	To        common.Address
	Amount    *big.Int
	ExtraData []byte
	Raw       types.Log
}

func (_OptimismL1 *OptimismL1Filterer) FilterETHBridgeInitiated(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OptimismL1ETHBridgeInitiatedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OptimismL1.contract.FilterLogs(opts, "ETHBridgeInitiated", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &OptimismL1ETHBridgeInitiatedIterator{contract: _OptimismL1.contract, event: "ETHBridgeInitiated", logs: logs, sub: sub}, nil
}

func (_OptimismL1 *OptimismL1Filterer) WatchETHBridgeInitiated(opts *bind.WatchOpts, sink chan<- *OptimismL1ETHBridgeInitiated, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OptimismL1.contract.WatchLogs(opts, "ETHBridgeInitiated", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OptimismL1ETHBridgeInitiated)
				if err := _OptimismL1.contract.UnpackLog(event, "ETHBridgeInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OptimismL1 *OptimismL1Filterer) ParseETHBridgeInitiated(log types.Log) (*OptimismL1ETHBridgeInitiated, error) {
	event := new(OptimismL1ETHBridgeInitiated)
	if err := _OptimismL1.contract.UnpackLog(event, "ETHBridgeInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OptimismL1ETHDepositInitiatedIterator struct {
	Event *OptimismL1ETHDepositInitiated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OptimismL1ETHDepositInitiatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OptimismL1ETHDepositInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OptimismL1ETHDepositInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OptimismL1ETHDepositInitiatedIterator) Error() error {
	return it.fail
}

func (it *OptimismL1ETHDepositInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OptimismL1ETHDepositInitiated struct {
	From      common.Address
	To        common.Address
	Amount    *big.Int
	ExtraData []byte
	Raw       types.Log
}

func (_OptimismL1 *OptimismL1Filterer) FilterETHDepositInitiated(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OptimismL1ETHDepositInitiatedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OptimismL1.contract.FilterLogs(opts, "ETHDepositInitiated", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &OptimismL1ETHDepositInitiatedIterator{contract: _OptimismL1.contract, event: "ETHDepositInitiated", logs: logs, sub: sub}, nil
}

func (_OptimismL1 *OptimismL1Filterer) WatchETHDepositInitiated(opts *bind.WatchOpts, sink chan<- *OptimismL1ETHDepositInitiated, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OptimismL1.contract.WatchLogs(opts, "ETHDepositInitiated", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OptimismL1ETHDepositInitiated)
				if err := _OptimismL1.contract.UnpackLog(event, "ETHDepositInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OptimismL1 *OptimismL1Filterer) ParseETHDepositInitiated(log types.Log) (*OptimismL1ETHDepositInitiated, error) {
	event := new(OptimismL1ETHDepositInitiated)
	if err := _OptimismL1.contract.UnpackLog(event, "ETHDepositInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type OptimismL1ETHWithdrawalFinalizedIterator struct {
	Event *OptimismL1ETHWithdrawalFinalized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *OptimismL1ETHWithdrawalFinalizedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OptimismL1ETHWithdrawalFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(OptimismL1ETHWithdrawalFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *OptimismL1ETHWithdrawalFinalizedIterator) Error() error {
	return it.fail
}

func (it *OptimismL1ETHWithdrawalFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type OptimismL1ETHWithdrawalFinalized struct {
	From      common.Address
	To        common.Address
	Amount    *big.Int
	ExtraData []byte
	Raw       types.Log
}

func (_OptimismL1 *OptimismL1Filterer) FilterETHWithdrawalFinalized(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OptimismL1ETHWithdrawalFinalizedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OptimismL1.contract.FilterLogs(opts, "ETHWithdrawalFinalized", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &OptimismL1ETHWithdrawalFinalizedIterator{contract: _OptimismL1.contract, event: "ETHWithdrawalFinalized", logs: logs, sub: sub}, nil
}

func (_OptimismL1 *OptimismL1Filterer) WatchETHWithdrawalFinalized(opts *bind.WatchOpts, sink chan<- *OptimismL1ETHWithdrawalFinalized, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _OptimismL1.contract.WatchLogs(opts, "ETHWithdrawalFinalized", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(OptimismL1ETHWithdrawalFinalized)
				if err := _OptimismL1.contract.UnpackLog(event, "ETHWithdrawalFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_OptimismL1 *OptimismL1Filterer) ParseETHWithdrawalFinalized(log types.Log) (*OptimismL1ETHWithdrawalFinalized, error) {
	event := new(OptimismL1ETHWithdrawalFinalized)
	if err := _OptimismL1.contract.UnpackLog(event, "ETHWithdrawalFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_OptimismL1 *OptimismL1) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _OptimismL1.abi.Events["ERC20BridgeFinalized"].ID:
		return _OptimismL1.ParseERC20BridgeFinalized(log)
	case _OptimismL1.abi.Events["ERC20BridgeInitiated"].ID:
		return _OptimismL1.ParseERC20BridgeInitiated(log)
	case _OptimismL1.abi.Events["ERC20DepositInitiated"].ID:
		return _OptimismL1.ParseERC20DepositInitiated(log)
	case _OptimismL1.abi.Events["ERC20WithdrawalFinalized"].ID:
		return _OptimismL1.ParseERC20WithdrawalFinalized(log)
	case _OptimismL1.abi.Events["ETHBridgeFinalized"].ID:
		return _OptimismL1.ParseETHBridgeFinalized(log)
	case _OptimismL1.abi.Events["ETHBridgeInitiated"].ID:
		return _OptimismL1.ParseETHBridgeInitiated(log)
	case _OptimismL1.abi.Events["ETHDepositInitiated"].ID:
		return _OptimismL1.ParseETHDepositInitiated(log)
	case _OptimismL1.abi.Events["ETHWithdrawalFinalized"].ID:
		return _OptimismL1.ParseETHWithdrawalFinalized(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (OptimismL1ERC20BridgeFinalized) Topic() common.Hash {
	return common.HexToHash("0xd59c65b35445225835c83f50b6ede06a7be047d22e357073e250d9af537518cd")
}

func (OptimismL1ERC20BridgeInitiated) Topic() common.Hash {
	return common.HexToHash("0x7ff126db8024424bbfd9826e8ab82ff59136289ea440b04b39a0df1b03b9cabf")
}

func (OptimismL1ERC20DepositInitiated) Topic() common.Hash {
	return common.HexToHash("0x718594027abd4eaed59f95162563e0cc6d0e8d5b86b1c7be8b1b0ac3343d0396")
}

func (OptimismL1ERC20WithdrawalFinalized) Topic() common.Hash {
	return common.HexToHash("0x3ceee06c1e37648fcbb6ed52e17b3e1f275a1f8c7b22a84b2b84732431e046b3")
}

func (OptimismL1ETHBridgeFinalized) Topic() common.Hash {
	return common.HexToHash("0x31b2166ff604fc5672ea5df08a78081d2bc6d746cadce880747f3643d819e83d")
}

func (OptimismL1ETHBridgeInitiated) Topic() common.Hash {
	return common.HexToHash("0x2849b43074093a05396b6f2a937dee8565b15a48a7b3d4bffb732a5017380af5")
}

func (OptimismL1ETHDepositInitiated) Topic() common.Hash {
	return common.HexToHash("0x35d79ab81f2b2017e19afb5c5571778877782d7a8786f5907f93b0f4702f4f23")
}

func (OptimismL1ETHWithdrawalFinalized) Topic() common.Hash {
	return common.HexToHash("0x2ac69ee804d9a7a0984249f508dfab7cb2534b465b6ce1580f99a38ba9c5e631")
}

func (_OptimismL1 *OptimismL1) Address() common.Address {
	return _OptimismL1.address
}

type OptimismL1Interface interface {
	MESSENGER(opts *bind.CallOpts) (common.Address, error)

	OTHERBRIDGE(opts *bind.CallOpts) (common.Address, error)

	Deposits(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error)

	L2TokenBridge(opts *bind.CallOpts) (common.Address, error)

	Messenger(opts *bind.CallOpts) (common.Address, error)

	Version(opts *bind.CallOpts) (string, error)

	BridgeERC20(opts *bind.TransactOpts, _localToken common.Address, _remoteToken common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error)

	BridgeERC20To(opts *bind.TransactOpts, _localToken common.Address, _remoteToken common.Address, _to common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error)

	BridgeETH(opts *bind.TransactOpts, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error)

	BridgeETHTo(opts *bind.TransactOpts, _to common.Address, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error)

	DepositERC20(opts *bind.TransactOpts, _l1Token common.Address, _l2Token common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error)

	DepositERC20To(opts *bind.TransactOpts, _l1Token common.Address, _l2Token common.Address, _to common.Address, _amount *big.Int, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error)

	DepositETH(opts *bind.TransactOpts, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error)

	DepositETHTo(opts *bind.TransactOpts, _to common.Address, _minGasLimit uint32, _extraData []byte) (*types.Transaction, error)

	FinalizeBridgeERC20(opts *bind.TransactOpts, _localToken common.Address, _remoteToken common.Address, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error)

	FinalizeBridgeETH(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error)

	FinalizeERC20Withdrawal(opts *bind.TransactOpts, _l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error)

	FinalizeETHWithdrawal(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int, _extraData []byte) (*types.Transaction, error)

	Receive(opts *bind.TransactOpts) (*types.Transaction, error)

	FilterERC20BridgeFinalized(opts *bind.FilterOpts, localToken []common.Address, remoteToken []common.Address, from []common.Address) (*OptimismL1ERC20BridgeFinalizedIterator, error)

	WatchERC20BridgeFinalized(opts *bind.WatchOpts, sink chan<- *OptimismL1ERC20BridgeFinalized, localToken []common.Address, remoteToken []common.Address, from []common.Address) (event.Subscription, error)

	ParseERC20BridgeFinalized(log types.Log) (*OptimismL1ERC20BridgeFinalized, error)

	FilterERC20BridgeInitiated(opts *bind.FilterOpts, localToken []common.Address, remoteToken []common.Address, from []common.Address) (*OptimismL1ERC20BridgeInitiatedIterator, error)

	WatchERC20BridgeInitiated(opts *bind.WatchOpts, sink chan<- *OptimismL1ERC20BridgeInitiated, localToken []common.Address, remoteToken []common.Address, from []common.Address) (event.Subscription, error)

	ParseERC20BridgeInitiated(log types.Log) (*OptimismL1ERC20BridgeInitiated, error)

	FilterERC20DepositInitiated(opts *bind.FilterOpts, l1Token []common.Address, l2Token []common.Address, from []common.Address) (*OptimismL1ERC20DepositInitiatedIterator, error)

	WatchERC20DepositInitiated(opts *bind.WatchOpts, sink chan<- *OptimismL1ERC20DepositInitiated, l1Token []common.Address, l2Token []common.Address, from []common.Address) (event.Subscription, error)

	ParseERC20DepositInitiated(log types.Log) (*OptimismL1ERC20DepositInitiated, error)

	FilterERC20WithdrawalFinalized(opts *bind.FilterOpts, l1Token []common.Address, l2Token []common.Address, from []common.Address) (*OptimismL1ERC20WithdrawalFinalizedIterator, error)

	WatchERC20WithdrawalFinalized(opts *bind.WatchOpts, sink chan<- *OptimismL1ERC20WithdrawalFinalized, l1Token []common.Address, l2Token []common.Address, from []common.Address) (event.Subscription, error)

	ParseERC20WithdrawalFinalized(log types.Log) (*OptimismL1ERC20WithdrawalFinalized, error)

	FilterETHBridgeFinalized(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OptimismL1ETHBridgeFinalizedIterator, error)

	WatchETHBridgeFinalized(opts *bind.WatchOpts, sink chan<- *OptimismL1ETHBridgeFinalized, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseETHBridgeFinalized(log types.Log) (*OptimismL1ETHBridgeFinalized, error)

	FilterETHBridgeInitiated(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OptimismL1ETHBridgeInitiatedIterator, error)

	WatchETHBridgeInitiated(opts *bind.WatchOpts, sink chan<- *OptimismL1ETHBridgeInitiated, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseETHBridgeInitiated(log types.Log) (*OptimismL1ETHBridgeInitiated, error)

	FilterETHDepositInitiated(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OptimismL1ETHDepositInitiatedIterator, error)

	WatchETHDepositInitiated(opts *bind.WatchOpts, sink chan<- *OptimismL1ETHDepositInitiated, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseETHDepositInitiated(log types.Log) (*OptimismL1ETHDepositInitiated, error)

	FilterETHWithdrawalFinalized(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*OptimismL1ETHWithdrawalFinalizedIterator, error)

	WatchETHWithdrawalFinalized(opts *bind.WatchOpts, sink chan<- *OptimismL1ETHWithdrawalFinalized, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseETHWithdrawalFinalized(log types.Log) (*OptimismL1ETHWithdrawalFinalized, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

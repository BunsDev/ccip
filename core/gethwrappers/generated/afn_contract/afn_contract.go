// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package afn_contract

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type AFNConfig struct {
	Voters               []AFNVoter
	BlessWeightThreshold uint16
	CurseWeightThreshold uint16
}

type AFNUnvoteToCurseRecord struct {
	CurseVoteAddr common.Address
	CursesHash    [32]byte
	ForceUnvote   bool
}

type AFNVoter struct {
	BlessVoteAddr   common.Address
	CurseVoteAddr   common.Address
	CurseUnvoteAddr common.Address
	BlessWeight     uint8
	CurseWeight     uint8
}

type IAFNTaggedRoot struct {
	CommitStore common.Address
	Root        [32]byte
}

var AFNContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structAFN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"internalType\":\"structAFN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"curseId\",\"type\":\"bytes32\"}],\"name\":\"AlreadyVotedToCurse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expectedCursesHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actualCursesHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidCursesHash\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"InvalidVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustRecoverFromCurse\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"AlreadyBlessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"AlreadyVotedToBless\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structAFN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"structAFN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Cursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RecoveredFromCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"voteCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"}],\"name\":\"ReusedVotesToCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"expectedCursesHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"actualCursesHash\",\"type\":\"bytes32\"}],\"name\":\"SkippedUnvoteToCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"votes\",\"type\":\"uint16\"}],\"name\":\"TaggedRootBlessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"voteCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"}],\"name\":\"UnvoteToCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"}],\"name\":\"VoteToBless\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"voteCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"curseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"}],\"name\":\"VoteToCurse\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"getBlessVotersAndWeight\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"blessVoteAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"version\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structAFN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"internalType\":\"structAFN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurseVotersAndWeight\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"curseVoteAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"},{\"internalType\":\"uint32[]\",\"name\":\"voteCounts\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"isBlessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCursed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIAFN.TaggedRoot[]\",\"name\":\"taggedRoots\",\"type\":\"tuple[]\"}],\"name\":\"ownerUnbless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"forceUnvote\",\"type\":\"bool\"}],\"internalType\":\"structAFN.UnvoteToCurseRecord[]\",\"name\":\"records\",\"type\":\"tuple[]\"}],\"name\":\"ownerUnvoteToCurse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structAFN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"internalType\":\"structAFN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"}],\"name\":\"unvoteToCurse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIAFN.TaggedRoot[]\",\"name\":\"taggedRoots\",\"type\":\"tuple[]\"}],\"name\":\"voteToBless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"curseId\",\"type\":\"bytes32\"}],\"name\":\"voteToCurse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200466938038062004669833981016040819052620000349162000d7d565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be8162000118565b50506040805160808101825260008082526020820181905291810182905260608101919091529050620000f76001600160801b62000f0a565b6001600160801b03166040909101526200011181620001c3565b50620010d8565b336001600160a01b03821603620001725760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b620001d8600954640100000000900460ff1690565b15620001f7576040516306523e6560e51b815260040160405180910390fd5b620002028162000953565b62000220576040516306b7c75960e31b815260040160405180910390fd5b6040805160028054608060208202840181019094526060830181815260009484928491879085015b82821015620002c65760008481526020908190206040805160a0810182526003860290920180546001600160a01b0390811684526001808301548216858701526002909201549081169284019290925260ff600160a01b830481166060850152600160a81b9092049091166080830152908352909201910162000248565b505050908252506001919091015461ffff808216602080850191909152620100009283900482166040948501528601516003805494880151831690930263ffffffff1990941691161791909117905590505b6002541562000438576002805460009190620003379060019062000f0a565b815481106200034a576200034a62000f26565b600091825260208083206040805160a081018252600390940290910180546001600160a01b03908116808652600183015482168686019081526002938401548084168887015260ff600160a01b8204811660608a0152600160a81b90910416608088015290875260058552838720805465ffffffffffff19169055511685526007909252909220805460ff19169055815490925080620003ee57620003ee62000f3c565b60008281526020902060036000199092019182020180546001600160a01b03199081168255600182018054909116905560020180546001600160b01b031916905590555062000318565b60005b8251518110156200051a5782518051600291908390811062000461576200046162000f26565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b03199081166001600160a01b03938416178255938301519481018054909416948216949094179092556040810151600290930180546060830151608090930151949093166001600160a81b031990931692909217600160a01b60ff928316021760ff60a81b1916600160a81b9190931602919091179055620005128162000f52565b90506200043b565b5060048054600091908290620005369063ffffffff1662000f6e565b91906101000a81548163ffffffff021916908363ffffffff1602179055905060005b83515160ff821610156200069757600084600001518260ff168151811062000584576200058462000f26565b602090810291909101810151604080516060808201835263ffffffff80891683529084015160ff90811683870190815288821684860190815286516001600160a01b03908116600090815260058a5287812096518754945193518616650100000000000260ff60281b199487166401000000000264ffffffffff1990961691909716179390931791909116939093179093558486018051831684526007909652838320805460ff1916600117905560808501518651831684528484208054919092166101000261ff00199091161790559282015193518316815220805492909116660100000000000002600160301b600160d01b0319909216919091179055506200068f8162000f94565b905062000558565b506004805463ffffffff4381166401000000000263ffffffff60201b1990921691909117909155604051908216907f7cf8e698b191db138396ab0eae2ad5b3fe353fd014fd5956b034b86f2d605cfd90620006f490869062000fb6565b60405180910390a2604080516060810182528482015161ffff168152600060208201819052918101829052905b83515160ff82161015620008a857600084600001518260ff16815181106200074d576200074d62000f26565b6020908102919091018101518101516001600160a01b03808216600090815260078452604090819020815160a081018352815460ff80821615801580855261010084049092169884019890985263ffffffff620100008304169483019490945266010000000000009004909316606084015260010154608083015291935091620007e157506000816040015163ffffffff16115b156200089257806020015160ff168460200181815162000802919062001067565b61ffff1690525060208082015160408084015160808501519388015191516001600160a01b0387169463ffffffff8b16947fb4a70189a30e3d3b9c77d291f83699633e70ab4427fc3644a955ab4cca077b03946200088994919391929160ff94909416845263ffffffff929092166020840152604083015261ffff16606082015260800190565b60405180910390a35b505080620008a09062000f94565b905062000721565b508051602082015161ffff9182169116108015604083015262000907578163ffffffff167f6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e33342604051620008fe91815260200190565b60405180910390a25b805160098054602084015160409094015115156401000000000260ff60201b1961ffff958616620100000263ffffffff1990931695909416949094171791909116919091179055505050565b80515160009015806200096857508151516080105b806200097a5750602082015161ffff16155b806200098c5750604082015161ffff16155b156200099a57506000919050565b60008060008460000151516003620009b391906200108c565b6001600160401b03811115620009cd57620009cd62000ca2565b604051908082528060200260200182016040528015620009f7578160200160208202803683370190505b50905060005b85515181101562000bc75760008660000151828151811062000a235762000a2362000f26565b6020026020010151905060006001600160a01b031681600001516001600160a01b0316148062000a5e575060208101516001600160a01b0316155b8062000a75575060408101516001600160a01b0316155b8062000a9757508060800151816060015162000a929190620010a6565b60ff16155b1562000aaa575060009695505050505050565b80518362000aba8460036200108c565b62000ac7906000620010c2565b8151811062000ada5762000ada62000f26565b6001600160a01b039092166020928302919091018201528101518362000b028460036200108c565b62000b0f906001620010c2565b8151811062000b225762000b2262000f26565b6001600160a01b039092166020928302919091019091015260408101518362000b4d8460036200108c565b62000b5a906002620010c2565b8151811062000b6d5762000b6d62000f26565b6001600160a01b0390921660209283029190910190910152606081015162000b999060ff1686620010c2565b9450806080015160ff168462000bb09190620010c2565b9350508062000bbf9062000f52565b9050620009fd565b5060005b815181101562000c7757600062000be4826001620010c2565b90505b825181101562000c635782818151811062000c065762000c0662000f26565b60200260200101516001600160a01b031683838151811062000c2c5762000c2c62000f26565b60200260200101516001600160a01b03160362000c50575060009695505050505050565b62000c5b8162000f52565b905062000be7565b5062000c6f8162000f52565b905062000bcb565b50846020015161ffff16831015801562000c995750846040015161ffff168210155b95945050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000cdd5762000cdd62000ca2565b60405290565b60405160a081016001600160401b038111828210171562000cdd5762000cdd62000ca2565b604051601f8201601f191681016001600160401b038111828210171562000d335762000d3362000ca2565b604052919050565b80516001600160a01b038116811462000d5357600080fd5b919050565b805160ff8116811462000d5357600080fd5b805161ffff8116811462000d5357600080fd5b6000602080838503121562000d9157600080fd5b82516001600160401b038082111562000da957600080fd5b8185019150606080838803121562000dc057600080fd5b62000dca62000cb8565b83518381111562000dda57600080fd5b8401601f8101891362000dec57600080fd5b80518481111562000e015762000e0162000ca2565b62000e11878260051b0162000d08565b818152878101955060a091820283018801918b83111562000e3157600080fd5b928801925b8284101562000ebf5780848d03121562000e505760008081fd5b62000e5a62000ce3565b62000e658562000d3b565b815262000e748a860162000d3b565b8a820152604062000e8781870162000d3b565b9082015262000e9885880162000d58565b87820152608062000eab81870162000d58565b908201528752958801959283019262000e36565b5083525062000ed2905084860162000d6a565b8582015262000ee46040850162000d6a565b6040820152979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000f205762000f2062000ef4565b92915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006001820162000f675762000f6762000ef4565b5060010190565b600063ffffffff80831681810362000f8a5762000f8a62000ef4565b6001019392505050565b600060ff821660ff810362000fad5762000fad62000ef4565b60010192915050565b60006020808352608080840185516060808588015282825180855260a094508489019150868401935060005b818110156200103a57845180516001600160a01b0390811685528982015181168a860152604080830151909116908501528481015160ff90811686860152908801511687840152938701939185019160010162000fe2565b50509488015161ffff8116604089015294604089015161ffff811689840152955098975050505050505050565b61ffff81811683821601908082111562001085576200108562000ef4565b5092915050565b808202811582820484141762000f205762000f2062000ef4565b60ff818116838216019081111562000f205762000f2062000ef4565b8082018082111562000f205762000f2062000ef4565b61358180620010e86000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80634d616771116100975780638da5cb5b116100665780638da5cb5b14610215578063979986111461023d578063f2fde38b14610250578063f7bc97721461026357600080fd5b80634d616771146101d0578063618af128146101e357806379ba5097146101f65780638976609b146101fe57600080fd5b8063397796f7116100d3578063397796f7146101745780633f42ab731461019357806347cf2b60146101aa578063488f3d81146101bd57600080fd5b8063119a3527146100fa578063181f5a771461010f57806335aea86914610161575b600080fd5b61010d610108366004612bec565b610284565b005b61014b6040518060400160405280600981526020017f41464e20312e302e30000000000000000000000000000000000000000000000081525081565b6040516101589190612c05565b60405180910390f35b61010d61016f366004612c95565b6106cc565b600954640100000000900460ff165b6040519015158152602001610158565b61019b61070a565b60405161015893929190612d79565b61010d6101b8366004612eb3565b610842565b61010d6101cb366004613057565b610856565b6101836101de3660046130f3565b610918565b61010d6101f136600461310b565b6109aa565b61010d610b73565b610206610c70565b60405161015893929190613230565b60005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610158565b61010d61024b366004613298565b611033565b61010d61025e36600461330d565b611549565b6102766102713660046130f3565b61155a565b60405161015892919061332f565b33600090815260076020908152604091829020825160a081018452815460ff808216151580845261010083049091169483019490945263ffffffff6201000082041694820194909452660100000000000090930473ffffffffffffffffffffffffffffffffffffffff166060840152600101546080830152610339576040517f669f262e0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b33600090815260086020908152604080832085845290915290205460ff1615610397576040517f9baf703d00000000000000000000000000000000000000000000000000000000815233600482015260248101839052604401610330565b3360009081526008602090815260408083208584529091529081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055810180516103e990613384565b63ffffffff1690526080810151466104026001436133a7565b6040805160208101949094528301919091524060608201526080810183905260a001604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529181528151602092830120608084019081523360009081526007845282902084518154948601519386015160608701517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009096169115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169190911761010060ff90951694909402939093177fffffffffffff000000000000000000000000000000000000000000000000ffff166201000063ffffffff9094169384027fffffffffffff0000000000000000000000000000000000000000ffffffffffff1617660100000000000073ffffffffffffffffffffffffffffffffffffffff909516949094029390931783555160019283015590036106c85760208101516009805460ff9092169160029061058e90849062010000900461ffff166133ba565b82546101009290920a61ffff818102199093169183160217909155600454602084810151604080870151608080890151600954845160ff909616865263ffffffff938416968601969096529284018a905260608401929092526201000090930490941693810193909352169150339082907fe3c908d69fe71d009d3f8097489f0f498dc66a2f10622ef577a6496fe46958ba9060a00160405180910390a3600954640100000000900460ff166106c65760095461ffff8082166201000090920416106106c657600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff1664010000000017905560405163ffffffff8216907f6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e333906106bd9042815260200190565b60405180910390a25b505b5050565b6106c8600060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160001515815250611854565b6040805160608082018352808252600060208084018290528385018290526004548551600280549384028201608090810190985294810183815263ffffffff808416986401000000009094041696959194919385939192859285015b828210156108125760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101610766565b505050908252506001919091015461ffff8082166020840152620100009091041660409091015292939192919050565b61084a611c8e565b61085381611d11565b50565b61085e611c8e565b60005b81518110156106c857600660006108d2848481518110610883576108836133dc565b602002602001015180516020918201516040805173ffffffffffffffffffffffffffffffffffffffff909316838501528281019190915280518083038201815260609092019052805191012090565b8152602081019190915260400160002080547fffffffffffffffffff00000000000000000000000000000000000000000000001690556109118161340b565b9050610861565b600060068161097661092f36869003860186613443565b80516020918201516040805173ffffffffffffffffffffffffffffffffffffffff909316838501528281019190915280518083038201815260609092019052805191012090565b8152602081019190915260400160002054760100000000000000000000000000000000000000000000900460ff1692915050565b6109b2611c8e565b60005b81518110156109f2576109e260018383815181106109d5576109d56133dc565b6020026020010151611854565b6109eb8161340b565b90506109b5565b50600954640100000000900460ff168015610a1b575060095461ffff8082166201000090920416105b1561085357600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff1690556040517f08c773aaf7568c6b9110dcdfc13c27177410582ee30e157d1aa306b49d603eb790600090a160408051600280546080602082028401810190945260608301818152610853948492849160009085015b82821015610b475760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101610a9b565b505050908252506001919091015461ffff80821660208401526201000090910416604090910152611d11565b60015473ffffffffffffffffffffffffffffffffffffffff163314610bf4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610330565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b600954600280546040805160208084028201810190925282815260609462010000900461ffff169385936000938493929190849084015b82821015610d535760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101610ca7565b50505050905060005b8151811015610e4157600060076000848481518110610d7d57610d7d6133dc565b60209081029190910181015181015173ffffffffffffffffffffffffffffffffffffffff9081168352828201939093526040918201600020825160a081018452815460ff80821615801580855261010084049092169584019590955263ffffffff620100008304169583019590955266010000000000009004909416606085015260010154608084015291925090610e1f57506000816040015163ffffffff16115b15610e3057610e2d8461340b565b93505b50610e3a8161340b565b9050610d5c565b508167ffffffffffffffff811115610e5b57610e5b612da2565b604051908082528060200260200182016040528015610e84578160200160208202803683370190505b5094508167ffffffffffffffff811115610ea057610ea0612da2565b604051908082528060200260200182016040528015610ec9578160200160208202803683370190505b5092506000805b825181101561102a576000838281518110610eed57610eed6133dc565b60209081029190910181015181015173ffffffffffffffffffffffffffffffffffffffff808216600090815260078452604090819020815160a081018352815460ff80821615801580855261010084049092169884019890985263ffffffff620100008304169483019490945266010000000000009004909316606084015260010154608083015291935091610f8d57506000816040015163ffffffff16115b156110175781898581518110610fa557610fa56133dc565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060400151878581518110610ff657610ff66133dc565b63ffffffff909216602092830291909101909101526110148461340b565b93505b5050806110239061340b565b9050610ed0565b50505050909192565b600954640100000000900460ff1615611078576040517fca47cca000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454336000908152600560209081526040918290208251606081018452905463ffffffff81811680845260ff64010000000084048116958501959095526501000000000090920490931693820193909352921691908214611108576040517f669f262e000000000000000000000000000000000000000000000000000000008152336004820152602401610330565b60005b83811015611542576000858583818110611127576111276133dc565b90506040020180360381019061113d9190613443565b9050600061116c878785818110611156576111566133dc565b90506040020180360381019061092f9190613443565b6000818152600660209081526040918290208251608081018452905463ffffffff81168252640100000000810461ffff1692820192909252660100000000000082046fffffffffffffffffffffffffffffffff1692810192909252760100000000000000000000000000000000000000000000900460ff16158015606083015291925090611251573373ffffffffffffffffffffffffffffffffffffffff168663ffffffff167f274d6d5b916b0a53974b7ab86c844b97a2e03a60f658cd9a4b1c028b604d7bf185604051611241919061345f565b60405180910390a3505050611532565b8563ffffffff16816000015163ffffffff161461129457506040805160808101825263ffffffff8716815260006020820181905291810182905260608101919091525b6112a681604001518660400151612711565b156112f8573373ffffffffffffffffffffffffffffffffffffffff168663ffffffff167f6dfbb745226fa630aeb1b9557d17d508ddb789a04f0cb873ec16e58beb8beead85604051611241919061345f565b60408082015190860151600160ff9091161b176fffffffffffffffffffffffffffffffff166040820152602080860151908201805160ff9092169161133e9083906133ba565b61ffff1690525060208581015160408051865173ffffffffffffffffffffffffffffffffffffffff168152868401519381019390935260ff9091168282015251339163ffffffff8916917fe5bca7cec7a958a09a9432f1e98b5925115e419486b4768f26aa04422036622a9181900360600190a3600354602082015161ffff9182169116106114455760016060820152602081015160405163ffffffff8816917f8257378aa73bf8e4ada848713526584a3dcee0fd3db3beed7397f7a7f5067cc99161143c918791825173ffffffffffffffffffffffffffffffffffffffff1681526020928301519281019290925261ffff16604082015260600190565b60405180910390a25b6000918252600660209081526040928390208251815492840151948401516060909401511515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff909516660100000000000002949094167fffffffffffffffffff0000000000000000000000000000000000ffffffffffff61ffff909616640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000090941663ffffffff90921691909117929092179390931617179055505b61153b8161340b565b905061110b565b5050505050565b611551611c8e565b61085381612735565b606060008061157161092f36869003860186613443565b6000818152600660209081526040918290208251608081018452905463ffffffff808216808452640100000000830461ffff16948401859052660100000000000083046fffffffffffffffffffffffffffffffff169584019590955276010000000000000000000000000000000000000000000090910460ff161515606083015260045492965093945092161461162957806060015161161057600092505b5050604080516000815260208101909152939092509050565b60408101516116378161282a565b60ff1667ffffffffffffffff81111561165257611652612da2565b60405190808252806020026020018201604052801561167b578160200160208202803683370190505b506002805460408051602080840282018101909252828152939850600093929190849084015b8282101561174d5760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff740100000000000000000000000000000000000000008304811660608501527501000000000000000000000000000000000000000000909204909116608083015290835290920191016116a1565b5050505090506000805b8251811015611849576117bd846005600086858151811061177a5761177a6133dc565b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000205465010000000000900460ff16612711565b15611839578281815181106117d4576117d46133dc565b6020026020010151600001518883806117ec9061340b565b9450815181106117fe576117fe6133dc565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b6118428161340b565b9050611757565b505050505050915091565b805173ffffffffffffffffffffffffffffffffffffffff908116600090815260076020908152604091829020825160a081018452815460ff808216151583526101008204169382019390935263ffffffff62010000840416938101939093526601000000000000909104909216606082015260019091015460808201528215801561190f5750806060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611948576040517f669f262e000000000000000000000000000000000000000000000000000000008152336004820152602401610330565b821580156119605750600954640100000000900460ff165b15611997576040517fca47cca000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805115806119ad5750604081015163ffffffff16155b156119b757505050565b8280156119c657508160400151155b80156119da57508160200151816080015114155b15611a385781516080820151602080850151604080519384529183015273ffffffffffffffffffffffffffffffffffffffff909216917ff4e3b20447f3f83360469333a2578825ae355d192dd6f59c6516d832fa425a5391016106bd565b806060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611a7f57508160200151816080015114155b15611ac957608081015160208301516040517f79aa5c5f00000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610330565b815160045460208381015160408086015183880151825160ff909416845263ffffffff918216948401949094529082019290925273ffffffffffffffffffffffffffffffffffffffff909316929116907f70fc9538e4890befa525c50aab95b49f97b45a1c9a99100f353efcedc3b924dc9060600160405180910390a360006040828101828152845173ffffffffffffffffffffffffffffffffffffffff908116845260076020908152929093208451815493860151925160608701517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009095169115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169190911761010060ff909416938402177fffffffffffff000000000000000000000000000000000000000000000000ffff166201000063ffffffff90921682027fffffffffffff0000000000000000000000000000000000000000ffffffffffff1617660100000000000094909516939093029390931783556080840151600190930192909255600980549091600291611c6f9185910461ffff1661348c565b92506101000a81548161ffff021916908361ffff160217905550505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611d0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610330565b565b600954640100000000900460ff1615611d56576040517fca47cca000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d5f81612869565b611d95576040517f35be3ac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028054608060208202840181019094526060830181815260009484928491879085015b82821015611e695760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101611dbd565b505050908252506001919091015461ffff80821660208085019190915262010000928390048216604094850152860151600380549488015183169093027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000090941691161791909117905590505b600254156120a1576002805460009190611ef2906001906133a7565b81548110611f0257611f026133dc565b600091825260208083206040805160a0810182526003909402909101805473ffffffffffffffffffffffffffffffffffffffff908116808652600183015482168686019081526002938401548084168887015260ff740100000000000000000000000000000000000000008204811660608a015275010000000000000000000000000000000000000000009091041660808801529087526005855283872080547fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000016905551168552600790925290922080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905581549092508061200a5761200a6134a7565b60008281526020902060037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019182020180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081168255600182018054909116905560020180547fffffffffffffffffffff00000000000000000000000000000000000000000000169055905550611ed6565b60005b8251518110156121f7578251805160029190839081106120c6576120c66133dc565b602090810291909101810151825460018082018555600094855293839020825160039092020180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff938416178255938301519481018054909416948216949094179092556040810151600290930180546060830151608090930151949093167fffffffffffffffffffffff000000000000000000000000000000000000000000909316929092177401000000000000000000000000000000000000000060ff92831602177fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000091909316029190911790556121f08161340b565b90506120a4565b50600480546000919082906122119063ffffffff16613384565b91906101000a81548163ffffffff021916908363ffffffff1602179055905060005b83515160ff821610156123fd57600084600001518260ff168151811061225b5761225b6133dc565b602090810291909101810151604080516060808201835263ffffffff80891683529084015160ff908116838701908152888216848601908152865173ffffffffffffffffffffffffffffffffffffffff908116600090815260058a528781209651875494519351861665010000000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff948716640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000009096169190971617939093179190911693909317909355848601805183168452600790965283832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556080850151865183168452848420805491909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90911617905592820151935183168152208054929091166601000000000000027fffffffffffff0000000000000000000000000000000000000000ffffffffffff909216919091179055506123f6816134d6565b9050612233565b506004805463ffffffff438116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff90921691909117909155604051908216907f7cf8e698b191db138396ab0eae2ad5b3fe353fd014fd5956b034b86f2d605cfd906124709086906134f5565b60405180910390a2604080516060810182528482015161ffff168152600060208201819052918101829052905b83515160ff8216101561263257600084600001518260ff16815181106124c5576124c56133dc565b60209081029190910181015181015173ffffffffffffffffffffffffffffffffffffffff808216600090815260078452604090819020815160a081018352815460ff80821615801580855261010084049092169884019890985263ffffffff62010000830416948301949094526601000000000000900490931660608401526001015460808301529193509161256557506000816040015163ffffffff16115b1561261f57806020015160ff168460200181815161258391906133ba565b61ffff16905250602080820151604080840151608085015193880151915173ffffffffffffffffffffffffffffffffffffffff87169463ffffffff8b16947fb4a70189a30e3d3b9c77d291f83699633e70ab4427fc3644a955ab4cca077b039461261694919391929160ff94909416845263ffffffff929092166020840152604083015261ffff16606082015260800190565b60405180910390a35b50508061262b906134d6565b905061249d565b508051602082015161ffff9182169116108015604083015261268f578163ffffffff167f6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e3334260405161268691815260200190565b60405180910390a25b80516009805460208401516040909401511515640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff61ffff95861662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000090931695909416949094171791909116919091179055505050565b60016fffffffffffffffffffffffffffffffff831660ff83161c8116145b92915050565b3373ffffffffffffffffffffffffffffffffffffffff8216036127b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610330565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60005b6fffffffffffffffffffffffffffffffff82161561286457612850600183613508565b9091169061285d816134d6565b905061282d565b919050565b805151600090158061287d57508151516080105b8061288e5750602082015161ffff16155b8061289f5750604082015161ffff16155b156128ac57506000919050565b600080600084600001515160036128c39190613531565b67ffffffffffffffff8111156128db576128db612da2565b604051908082528060200260200182016040528015612904578160200160208202803683370190505b50905060005b855151811015612b095760008660000151828151811061292c5761292c6133dc565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16148061298d5750602081015173ffffffffffffffffffffffffffffffffffffffff16155b806129b05750604081015173ffffffffffffffffffffffffffffffffffffffff16155b806129cf5750806080015181606001516129ca9190613548565b60ff16155b156129e1575060009695505050505050565b8051836129ef846003613531565b6129fa906000613561565b81518110612a0a57612a0a6133dc565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910182015281015183612a3d846003613531565b612a48906001613561565b81518110612a5857612a586133dc565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152604081015183612a8e846003613531565b612a99906002613561565b81518110612aa957612aa96133dc565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526060810151612ae09060ff1686613561565b9450806080015160ff1684612af59190613561565b93505080612b029061340b565b905061290a565b5060005b8151811015612bc2576000612b23826001613561565b90505b8251811015612bb157828181518110612b4157612b416133dc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838381518110612b7157612b716133dc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603612ba1575060009695505050505050565b612baa8161340b565b9050612b26565b50612bbb8161340b565b9050612b0d565b50846020015161ffff168310158015612be35750846040015161ffff168210155b95945050505050565b600060208284031215612bfe57600080fd5b5035919050565b600060208083528351808285015260005b81811015612c3257858101830151858201604001528201612c16565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461286457600080fd5b60008060408385031215612ca857600080fd5b612cb183612c71565b946020939093013593505050565b8051606080845281518482018190526000926080916020918201918388019190865b82811015612d46578451805173ffffffffffffffffffffffffffffffffffffffff908116865283820151811684870152604080830151909116908601528781015160ff908116898701529087015116868501529381019360a090930192600101612ce1565b508781015161ffff81168a8301529550505060408601519350612d6f604088018561ffff169052565b9695505050505050565b600063ffffffff808616835280851660208401525060606040830152612be36060830184612cbf565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612df457612df4612da2565b60405290565b60405160a0810167ffffffffffffffff81118282101715612df457612df4612da2565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612e6457612e64612da2565b604052919050565b600067ffffffffffffffff821115612e8657612e86612da2565b5060051b60200190565b803560ff8116811461286457600080fd5b803561ffff8116811461286457600080fd5b60006020808385031215612ec657600080fd5b823567ffffffffffffffff80821115612ede57600080fd5b81850191506060808388031215612ef457600080fd5b612efc612dd1565b833583811115612f0b57600080fd5b84019250601f83018813612f1e57600080fd5b8235612f31612f2c82612e6c565b612e1d565b81815260a0918202850187019187820191908b841115612f5057600080fd5b958801955b83871015612fcf5780878d031215612f6d5760008081fd5b612f75612dfa565b612f7e88612c71565b8152612f8b8a8901612c71565b8a8201526040612f9c818a01612c71565b90820152612fab888801612e90565b878201526080612fbc818a01612e90565b9082015283529586019591880191612f55565b50835250612fe09050848601612ea1565b85820152612ff060408501612ea1565b6040820152979650505050505050565b60006040828403121561301257600080fd5b6040516040810181811067ffffffffffffffff8211171561303557613035612da2565b60405290508061304483612c71565b8152602083013560208201525092915050565b6000602080838503121561306a57600080fd5b823567ffffffffffffffff81111561308157600080fd5b8301601f8101851361309257600080fd5b80356130a0612f2c82612e6c565b81815260069190911b820183019083810190878311156130bf57600080fd5b928401925b828410156130e8576130d68885613000565b825284820191506040840193506130c4565b979650505050505050565b60006040828403121561310557600080fd5b50919050565b6000602080838503121561311e57600080fd5b823567ffffffffffffffff81111561313557600080fd5b8301601f8101851361314657600080fd5b8035613154612f2c82612e6c565b8181526060918202830184019184820191908884111561317357600080fd5b938501935b838510156131d35780858a0312156131905760008081fd5b613198612dd1565b6131a186612c71565b8152868601358782015260408087013580151581146131c05760008081fd5b9082015283529384019391850191613178565b50979650505050505050565b600081518084526020808501945080840160005b8381101561322557815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016131f3565b509495945050505050565b60608152600061324360608301866131df565b61ffff8516602084810191909152838203604085015284518083528582019282019060005b8181101561328a57845163ffffffff1683529383019391830191600101613268565b509098975050505050505050565b600080602083850312156132ab57600080fd5b823567ffffffffffffffff808211156132c357600080fd5b818501915085601f8301126132d757600080fd5b8135818111156132e657600080fd5b8660208260061b85010111156132fb57600080fd5b60209290920196919550909350505050565b60006020828403121561331f57600080fd5b61332882612c71565b9392505050565b60408152600061334260408301856131df565b905061ffff831660208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff80831681810361339d5761339d613355565b6001019392505050565b8181038181111561272f5761272f613355565b61ffff8181168382160190808211156133d5576133d5613355565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361343c5761343c613355565b5060010190565b60006040828403121561345557600080fd5b6133288383613000565b815173ffffffffffffffffffffffffffffffffffffffff168152602080830151908201526040810161272f565b61ffff8281168282160390808211156133d5576133d5613355565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060ff821660ff81036134ec576134ec613355565b60010192915050565b6020815260006133286020830184612cbf565b6fffffffffffffffffffffffffffffffff8281168282160390808211156133d5576133d5613355565b808202811582820484141761272f5761272f613355565b60ff818116838216019081111561272f5761272f613355565b8082018082111561272f5761272f61335556fea164736f6c6343000813000a",
}

var AFNContractABI = AFNContractMetaData.ABI

var AFNContractBin = AFNContractMetaData.Bin

func DeployAFNContract(auth *bind.TransactOpts, backend bind.ContractBackend, config AFNConfig) (common.Address, *types.Transaction, *AFNContract, error) {
	parsed, err := AFNContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AFNContractBin), backend, config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AFNContract{AFNContractCaller: AFNContractCaller{contract: contract}, AFNContractTransactor: AFNContractTransactor{contract: contract}, AFNContractFilterer: AFNContractFilterer{contract: contract}}, nil
}

type AFNContract struct {
	address common.Address
	abi     abi.ABI
	AFNContractCaller
	AFNContractTransactor
	AFNContractFilterer
}

type AFNContractCaller struct {
	contract *bind.BoundContract
}

type AFNContractTransactor struct {
	contract *bind.BoundContract
}

type AFNContractFilterer struct {
	contract *bind.BoundContract
}

type AFNContractSession struct {
	Contract     *AFNContract
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type AFNContractCallerSession struct {
	Contract *AFNContractCaller
	CallOpts bind.CallOpts
}

type AFNContractTransactorSession struct {
	Contract     *AFNContractTransactor
	TransactOpts bind.TransactOpts
}

type AFNContractRaw struct {
	Contract *AFNContract
}

type AFNContractCallerRaw struct {
	Contract *AFNContractCaller
}

type AFNContractTransactorRaw struct {
	Contract *AFNContractTransactor
}

func NewAFNContract(address common.Address, backend bind.ContractBackend) (*AFNContract, error) {
	abi, err := abi.JSON(strings.NewReader(AFNContractABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindAFNContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AFNContract{address: address, abi: abi, AFNContractCaller: AFNContractCaller{contract: contract}, AFNContractTransactor: AFNContractTransactor{contract: contract}, AFNContractFilterer: AFNContractFilterer{contract: contract}}, nil
}

func NewAFNContractCaller(address common.Address, caller bind.ContractCaller) (*AFNContractCaller, error) {
	contract, err := bindAFNContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AFNContractCaller{contract: contract}, nil
}

func NewAFNContractTransactor(address common.Address, transactor bind.ContractTransactor) (*AFNContractTransactor, error) {
	contract, err := bindAFNContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AFNContractTransactor{contract: contract}, nil
}

func NewAFNContractFilterer(address common.Address, filterer bind.ContractFilterer) (*AFNContractFilterer, error) {
	contract, err := bindAFNContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AFNContractFilterer{contract: contract}, nil
}

func bindAFNContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AFNContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_AFNContract *AFNContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AFNContract.Contract.AFNContractCaller.contract.Call(opts, result, method, params...)
}

func (_AFNContract *AFNContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AFNContract.Contract.AFNContractTransactor.contract.Transfer(opts)
}

func (_AFNContract *AFNContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AFNContract.Contract.AFNContractTransactor.contract.Transact(opts, method, params...)
}

func (_AFNContract *AFNContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AFNContract.Contract.contract.Call(opts, result, method, params...)
}

func (_AFNContract *AFNContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AFNContract.Contract.contract.Transfer(opts)
}

func (_AFNContract *AFNContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AFNContract.Contract.contract.Transact(opts, method, params...)
}

func (_AFNContract *AFNContractCaller) GetBlessVotersAndWeight(opts *bind.CallOpts, taggedRoot IAFNTaggedRoot) (GetBlessVotersAndWeight,

	error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "getBlessVotersAndWeight", taggedRoot)

	outstruct := new(GetBlessVotersAndWeight)
	if err != nil {
		return *outstruct, err
	}

	outstruct.BlessVoteAddrs = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.Weight = *abi.ConvertType(out[1], new(uint16)).(*uint16)

	return *outstruct, err

}

func (_AFNContract *AFNContractSession) GetBlessVotersAndWeight(taggedRoot IAFNTaggedRoot) (GetBlessVotersAndWeight,

	error) {
	return _AFNContract.Contract.GetBlessVotersAndWeight(&_AFNContract.CallOpts, taggedRoot)
}

func (_AFNContract *AFNContractCallerSession) GetBlessVotersAndWeight(taggedRoot IAFNTaggedRoot) (GetBlessVotersAndWeight,

	error) {
	return _AFNContract.Contract.GetBlessVotersAndWeight(&_AFNContract.CallOpts, taggedRoot)
}

func (_AFNContract *AFNContractCaller) GetConfigDetails(opts *bind.CallOpts) (GetConfigDetails,

	error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "getConfigDetails")

	outstruct := new(GetConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Version = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.Config = *abi.ConvertType(out[2], new(AFNConfig)).(*AFNConfig)

	return *outstruct, err

}

func (_AFNContract *AFNContractSession) GetConfigDetails() (GetConfigDetails,

	error) {
	return _AFNContract.Contract.GetConfigDetails(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCallerSession) GetConfigDetails() (GetConfigDetails,

	error) {
	return _AFNContract.Contract.GetConfigDetails(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCaller) GetCurseVotersAndWeight(opts *bind.CallOpts) (GetCurseVotersAndWeight,

	error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "getCurseVotersAndWeight")

	outstruct := new(GetCurseVotersAndWeight)
	if err != nil {
		return *outstruct, err
	}

	outstruct.CurseVoteAddrs = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.Weight = *abi.ConvertType(out[1], new(uint16)).(*uint16)
	outstruct.VoteCounts = *abi.ConvertType(out[2], new([]uint32)).(*[]uint32)

	return *outstruct, err

}

func (_AFNContract *AFNContractSession) GetCurseVotersAndWeight() (GetCurseVotersAndWeight,

	error) {
	return _AFNContract.Contract.GetCurseVotersAndWeight(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCallerSession) GetCurseVotersAndWeight() (GetCurseVotersAndWeight,

	error) {
	return _AFNContract.Contract.GetCurseVotersAndWeight(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCaller) IsBlessed(opts *bind.CallOpts, taggedRoot IAFNTaggedRoot) (bool, error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "isBlessed", taggedRoot)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_AFNContract *AFNContractSession) IsBlessed(taggedRoot IAFNTaggedRoot) (bool, error) {
	return _AFNContract.Contract.IsBlessed(&_AFNContract.CallOpts, taggedRoot)
}

func (_AFNContract *AFNContractCallerSession) IsBlessed(taggedRoot IAFNTaggedRoot) (bool, error) {
	return _AFNContract.Contract.IsBlessed(&_AFNContract.CallOpts, taggedRoot)
}

func (_AFNContract *AFNContractCaller) IsCursed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "isCursed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_AFNContract *AFNContractSession) IsCursed() (bool, error) {
	return _AFNContract.Contract.IsCursed(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCallerSession) IsCursed() (bool, error) {
	return _AFNContract.Contract.IsCursed(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_AFNContract *AFNContractSession) Owner() (common.Address, error) {
	return _AFNContract.Contract.Owner(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCallerSession) Owner() (common.Address, error) {
	return _AFNContract.Contract.Owner(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_AFNContract *AFNContractSession) TypeAndVersion() (string, error) {
	return _AFNContract.Contract.TypeAndVersion(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCallerSession) TypeAndVersion() (string, error) {
	return _AFNContract.Contract.TypeAndVersion(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "acceptOwnership")
}

func (_AFNContract *AFNContractSession) AcceptOwnership() (*types.Transaction, error) {
	return _AFNContract.Contract.AcceptOwnership(&_AFNContract.TransactOpts)
}

func (_AFNContract *AFNContractTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _AFNContract.Contract.AcceptOwnership(&_AFNContract.TransactOpts)
}

func (_AFNContract *AFNContractTransactor) OwnerUnbless(opts *bind.TransactOpts, taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "ownerUnbless", taggedRoots)
}

func (_AFNContract *AFNContractSession) OwnerUnbless(taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.Contract.OwnerUnbless(&_AFNContract.TransactOpts, taggedRoots)
}

func (_AFNContract *AFNContractTransactorSession) OwnerUnbless(taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.Contract.OwnerUnbless(&_AFNContract.TransactOpts, taggedRoots)
}

func (_AFNContract *AFNContractTransactor) OwnerUnvoteToCurse(opts *bind.TransactOpts, records []AFNUnvoteToCurseRecord) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "ownerUnvoteToCurse", records)
}

func (_AFNContract *AFNContractSession) OwnerUnvoteToCurse(records []AFNUnvoteToCurseRecord) (*types.Transaction, error) {
	return _AFNContract.Contract.OwnerUnvoteToCurse(&_AFNContract.TransactOpts, records)
}

func (_AFNContract *AFNContractTransactorSession) OwnerUnvoteToCurse(records []AFNUnvoteToCurseRecord) (*types.Transaction, error) {
	return _AFNContract.Contract.OwnerUnvoteToCurse(&_AFNContract.TransactOpts, records)
}

func (_AFNContract *AFNContractTransactor) SetConfig(opts *bind.TransactOpts, config AFNConfig) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "setConfig", config)
}

func (_AFNContract *AFNContractSession) SetConfig(config AFNConfig) (*types.Transaction, error) {
	return _AFNContract.Contract.SetConfig(&_AFNContract.TransactOpts, config)
}

func (_AFNContract *AFNContractTransactorSession) SetConfig(config AFNConfig) (*types.Transaction, error) {
	return _AFNContract.Contract.SetConfig(&_AFNContract.TransactOpts, config)
}

func (_AFNContract *AFNContractTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "transferOwnership", to)
}

func (_AFNContract *AFNContractSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _AFNContract.Contract.TransferOwnership(&_AFNContract.TransactOpts, to)
}

func (_AFNContract *AFNContractTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _AFNContract.Contract.TransferOwnership(&_AFNContract.TransactOpts, to)
}

func (_AFNContract *AFNContractTransactor) UnvoteToCurse(opts *bind.TransactOpts, curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "unvoteToCurse", curseVoteAddr, cursesHash)
}

func (_AFNContract *AFNContractSession) UnvoteToCurse(curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error) {
	return _AFNContract.Contract.UnvoteToCurse(&_AFNContract.TransactOpts, curseVoteAddr, cursesHash)
}

func (_AFNContract *AFNContractTransactorSession) UnvoteToCurse(curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error) {
	return _AFNContract.Contract.UnvoteToCurse(&_AFNContract.TransactOpts, curseVoteAddr, cursesHash)
}

func (_AFNContract *AFNContractTransactor) VoteToBless(opts *bind.TransactOpts, taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "voteToBless", taggedRoots)
}

func (_AFNContract *AFNContractSession) VoteToBless(taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.Contract.VoteToBless(&_AFNContract.TransactOpts, taggedRoots)
}

func (_AFNContract *AFNContractTransactorSession) VoteToBless(taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.Contract.VoteToBless(&_AFNContract.TransactOpts, taggedRoots)
}

func (_AFNContract *AFNContractTransactor) VoteToCurse(opts *bind.TransactOpts, curseId [32]byte) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "voteToCurse", curseId)
}

func (_AFNContract *AFNContractSession) VoteToCurse(curseId [32]byte) (*types.Transaction, error) {
	return _AFNContract.Contract.VoteToCurse(&_AFNContract.TransactOpts, curseId)
}

func (_AFNContract *AFNContractTransactorSession) VoteToCurse(curseId [32]byte) (*types.Transaction, error) {
	return _AFNContract.Contract.VoteToCurse(&_AFNContract.TransactOpts, curseId)
}

type AFNContractAlreadyBlessedIterator struct {
	Event *AFNContractAlreadyBlessed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractAlreadyBlessedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractAlreadyBlessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractAlreadyBlessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractAlreadyBlessedIterator) Error() error {
	return it.fail
}

func (it *AFNContractAlreadyBlessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractAlreadyBlessed struct {
	ConfigVersion uint32
	Voter         common.Address
	TaggedRoot    IAFNTaggedRoot
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterAlreadyBlessed(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractAlreadyBlessedIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "AlreadyBlessed", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractAlreadyBlessedIterator{contract: _AFNContract.contract, event: "AlreadyBlessed", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchAlreadyBlessed(opts *bind.WatchOpts, sink chan<- *AFNContractAlreadyBlessed, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "AlreadyBlessed", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractAlreadyBlessed)
				if err := _AFNContract.contract.UnpackLog(event, "AlreadyBlessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseAlreadyBlessed(log types.Log) (*AFNContractAlreadyBlessed, error) {
	event := new(AFNContractAlreadyBlessed)
	if err := _AFNContract.contract.UnpackLog(event, "AlreadyBlessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractAlreadyVotedToBlessIterator struct {
	Event *AFNContractAlreadyVotedToBless

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractAlreadyVotedToBlessIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractAlreadyVotedToBless)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractAlreadyVotedToBless)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractAlreadyVotedToBlessIterator) Error() error {
	return it.fail
}

func (it *AFNContractAlreadyVotedToBlessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractAlreadyVotedToBless struct {
	ConfigVersion uint32
	Voter         common.Address
	TaggedRoot    IAFNTaggedRoot
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterAlreadyVotedToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractAlreadyVotedToBlessIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "AlreadyVotedToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractAlreadyVotedToBlessIterator{contract: _AFNContract.contract, event: "AlreadyVotedToBless", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchAlreadyVotedToBless(opts *bind.WatchOpts, sink chan<- *AFNContractAlreadyVotedToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "AlreadyVotedToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractAlreadyVotedToBless)
				if err := _AFNContract.contract.UnpackLog(event, "AlreadyVotedToBless", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseAlreadyVotedToBless(log types.Log) (*AFNContractAlreadyVotedToBless, error) {
	event := new(AFNContractAlreadyVotedToBless)
	if err := _AFNContract.contract.UnpackLog(event, "AlreadyVotedToBless", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractConfigSetIterator struct {
	Event *AFNContractConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractConfigSetIterator) Error() error {
	return it.fail
}

func (it *AFNContractConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractConfigSet struct {
	ConfigVersion uint32
	Config        AFNConfig
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterConfigSet(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractConfigSetIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "ConfigSet", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractConfigSetIterator{contract: _AFNContract.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *AFNContractConfigSet, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "ConfigSet", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractConfigSet)
				if err := _AFNContract.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseConfigSet(log types.Log) (*AFNContractConfigSet, error) {
	event := new(AFNContractConfigSet)
	if err := _AFNContract.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractCursedIterator struct {
	Event *AFNContractCursed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractCursedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractCursed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractCursed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractCursedIterator) Error() error {
	return it.fail
}

func (it *AFNContractCursedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractCursed struct {
	ConfigVersion uint32
	Timestamp     *big.Int
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterCursed(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractCursedIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "Cursed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractCursedIterator{contract: _AFNContract.contract, event: "Cursed", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchCursed(opts *bind.WatchOpts, sink chan<- *AFNContractCursed, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "Cursed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractCursed)
				if err := _AFNContract.contract.UnpackLog(event, "Cursed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseCursed(log types.Log) (*AFNContractCursed, error) {
	event := new(AFNContractCursed)
	if err := _AFNContract.contract.UnpackLog(event, "Cursed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractOwnershipTransferRequestedIterator struct {
	Event *AFNContractOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *AFNContractOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_AFNContract *AFNContractFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AFNContractOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractOwnershipTransferRequestedIterator{contract: _AFNContract.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *AFNContractOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractOwnershipTransferRequested)
				if err := _AFNContract.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseOwnershipTransferRequested(log types.Log) (*AFNContractOwnershipTransferRequested, error) {
	event := new(AFNContractOwnershipTransferRequested)
	if err := _AFNContract.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractOwnershipTransferredIterator struct {
	Event *AFNContractOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *AFNContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_AFNContract *AFNContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AFNContractOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractOwnershipTransferredIterator{contract: _AFNContract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AFNContractOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractOwnershipTransferred)
				if err := _AFNContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseOwnershipTransferred(log types.Log) (*AFNContractOwnershipTransferred, error) {
	event := new(AFNContractOwnershipTransferred)
	if err := _AFNContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractRecoveredFromCurseIterator struct {
	Event *AFNContractRecoveredFromCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractRecoveredFromCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractRecoveredFromCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractRecoveredFromCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractRecoveredFromCurseIterator) Error() error {
	return it.fail
}

func (it *AFNContractRecoveredFromCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractRecoveredFromCurse struct {
	Raw types.Log
}

func (_AFNContract *AFNContractFilterer) FilterRecoveredFromCurse(opts *bind.FilterOpts) (*AFNContractRecoveredFromCurseIterator, error) {

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "RecoveredFromCurse")
	if err != nil {
		return nil, err
	}
	return &AFNContractRecoveredFromCurseIterator{contract: _AFNContract.contract, event: "RecoveredFromCurse", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchRecoveredFromCurse(opts *bind.WatchOpts, sink chan<- *AFNContractRecoveredFromCurse) (event.Subscription, error) {

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "RecoveredFromCurse")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractRecoveredFromCurse)
				if err := _AFNContract.contract.UnpackLog(event, "RecoveredFromCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseRecoveredFromCurse(log types.Log) (*AFNContractRecoveredFromCurse, error) {
	event := new(AFNContractRecoveredFromCurse)
	if err := _AFNContract.contract.UnpackLog(event, "RecoveredFromCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractReusedVotesToCurseIterator struct {
	Event *AFNContractReusedVotesToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractReusedVotesToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractReusedVotesToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractReusedVotesToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractReusedVotesToCurseIterator) Error() error {
	return it.fail
}

func (it *AFNContractReusedVotesToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractReusedVotesToCurse struct {
	ConfigVersion     uint32
	Voter             common.Address
	Weight            uint8
	VoteCount         uint32
	CursesHash        [32]byte
	AccumulatedWeight uint16
	Raw               types.Log
}

func (_AFNContract *AFNContractFilterer) FilterReusedVotesToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractReusedVotesToCurseIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "ReusedVotesToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractReusedVotesToCurseIterator{contract: _AFNContract.contract, event: "ReusedVotesToCurse", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchReusedVotesToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractReusedVotesToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "ReusedVotesToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractReusedVotesToCurse)
				if err := _AFNContract.contract.UnpackLog(event, "ReusedVotesToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseReusedVotesToCurse(log types.Log) (*AFNContractReusedVotesToCurse, error) {
	event := new(AFNContractReusedVotesToCurse)
	if err := _AFNContract.contract.UnpackLog(event, "ReusedVotesToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractSkippedUnvoteToCurseIterator struct {
	Event *AFNContractSkippedUnvoteToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractSkippedUnvoteToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractSkippedUnvoteToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractSkippedUnvoteToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractSkippedUnvoteToCurseIterator) Error() error {
	return it.fail
}

func (it *AFNContractSkippedUnvoteToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractSkippedUnvoteToCurse struct {
	Voter              common.Address
	ExpectedCursesHash [32]byte
	ActualCursesHash   [32]byte
	Raw                types.Log
}

func (_AFNContract *AFNContractFilterer) FilterSkippedUnvoteToCurse(opts *bind.FilterOpts, voter []common.Address) (*AFNContractSkippedUnvoteToCurseIterator, error) {

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "SkippedUnvoteToCurse", voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractSkippedUnvoteToCurseIterator{contract: _AFNContract.contract, event: "SkippedUnvoteToCurse", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchSkippedUnvoteToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractSkippedUnvoteToCurse, voter []common.Address) (event.Subscription, error) {

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "SkippedUnvoteToCurse", voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractSkippedUnvoteToCurse)
				if err := _AFNContract.contract.UnpackLog(event, "SkippedUnvoteToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseSkippedUnvoteToCurse(log types.Log) (*AFNContractSkippedUnvoteToCurse, error) {
	event := new(AFNContractSkippedUnvoteToCurse)
	if err := _AFNContract.contract.UnpackLog(event, "SkippedUnvoteToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractTaggedRootBlessedIterator struct {
	Event *AFNContractTaggedRootBlessed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractTaggedRootBlessedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractTaggedRootBlessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractTaggedRootBlessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractTaggedRootBlessedIterator) Error() error {
	return it.fail
}

func (it *AFNContractTaggedRootBlessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractTaggedRootBlessed struct {
	ConfigVersion uint32
	TaggedRoot    IAFNTaggedRoot
	Votes         uint16
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterTaggedRootBlessed(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractTaggedRootBlessedIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "TaggedRootBlessed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractTaggedRootBlessedIterator{contract: _AFNContract.contract, event: "TaggedRootBlessed", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchTaggedRootBlessed(opts *bind.WatchOpts, sink chan<- *AFNContractTaggedRootBlessed, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "TaggedRootBlessed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractTaggedRootBlessed)
				if err := _AFNContract.contract.UnpackLog(event, "TaggedRootBlessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseTaggedRootBlessed(log types.Log) (*AFNContractTaggedRootBlessed, error) {
	event := new(AFNContractTaggedRootBlessed)
	if err := _AFNContract.contract.UnpackLog(event, "TaggedRootBlessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractUnvoteToCurseIterator struct {
	Event *AFNContractUnvoteToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractUnvoteToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractUnvoteToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractUnvoteToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractUnvoteToCurseIterator) Error() error {
	return it.fail
}

func (it *AFNContractUnvoteToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractUnvoteToCurse struct {
	ConfigVersion uint32
	Voter         common.Address
	Weight        uint8
	VoteCount     uint32
	CursesHash    [32]byte
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterUnvoteToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractUnvoteToCurseIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "UnvoteToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractUnvoteToCurseIterator{contract: _AFNContract.contract, event: "UnvoteToCurse", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchUnvoteToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractUnvoteToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "UnvoteToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractUnvoteToCurse)
				if err := _AFNContract.contract.UnpackLog(event, "UnvoteToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseUnvoteToCurse(log types.Log) (*AFNContractUnvoteToCurse, error) {
	event := new(AFNContractUnvoteToCurse)
	if err := _AFNContract.contract.UnpackLog(event, "UnvoteToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractVoteToBlessIterator struct {
	Event *AFNContractVoteToBless

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractVoteToBlessIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractVoteToBless)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractVoteToBless)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractVoteToBlessIterator) Error() error {
	return it.fail
}

func (it *AFNContractVoteToBlessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractVoteToBless struct {
	ConfigVersion uint32
	Voter         common.Address
	TaggedRoot    IAFNTaggedRoot
	Weight        uint8
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterVoteToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractVoteToBlessIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "VoteToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractVoteToBlessIterator{contract: _AFNContract.contract, event: "VoteToBless", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchVoteToBless(opts *bind.WatchOpts, sink chan<- *AFNContractVoteToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "VoteToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractVoteToBless)
				if err := _AFNContract.contract.UnpackLog(event, "VoteToBless", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseVoteToBless(log types.Log) (*AFNContractVoteToBless, error) {
	event := new(AFNContractVoteToBless)
	if err := _AFNContract.contract.UnpackLog(event, "VoteToBless", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractVoteToCurseIterator struct {
	Event *AFNContractVoteToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractVoteToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractVoteToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractVoteToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractVoteToCurseIterator) Error() error {
	return it.fail
}

func (it *AFNContractVoteToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractVoteToCurse struct {
	ConfigVersion     uint32
	Voter             common.Address
	Weight            uint8
	VoteCount         uint32
	CurseId           [32]byte
	CursesHash        [32]byte
	AccumulatedWeight uint16
	Raw               types.Log
}

func (_AFNContract *AFNContractFilterer) FilterVoteToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractVoteToCurseIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "VoteToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractVoteToCurseIterator{contract: _AFNContract.contract, event: "VoteToCurse", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchVoteToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractVoteToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "VoteToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractVoteToCurse)
				if err := _AFNContract.contract.UnpackLog(event, "VoteToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseVoteToCurse(log types.Log) (*AFNContractVoteToCurse, error) {
	event := new(AFNContractVoteToCurse)
	if err := _AFNContract.contract.UnpackLog(event, "VoteToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type GetBlessVotersAndWeight struct {
	BlessVoteAddrs []common.Address
	Weight         uint16
}
type GetConfigDetails struct {
	Version     uint32
	BlockNumber uint32
	Config      AFNConfig
}
type GetCurseVotersAndWeight struct {
	CurseVoteAddrs []common.Address
	Weight         uint16
	VoteCounts     []uint32
}

func (_AFNContract *AFNContract) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _AFNContract.abi.Events["AlreadyBlessed"].ID:
		return _AFNContract.ParseAlreadyBlessed(log)
	case _AFNContract.abi.Events["AlreadyVotedToBless"].ID:
		return _AFNContract.ParseAlreadyVotedToBless(log)
	case _AFNContract.abi.Events["ConfigSet"].ID:
		return _AFNContract.ParseConfigSet(log)
	case _AFNContract.abi.Events["Cursed"].ID:
		return _AFNContract.ParseCursed(log)
	case _AFNContract.abi.Events["OwnershipTransferRequested"].ID:
		return _AFNContract.ParseOwnershipTransferRequested(log)
	case _AFNContract.abi.Events["OwnershipTransferred"].ID:
		return _AFNContract.ParseOwnershipTransferred(log)
	case _AFNContract.abi.Events["RecoveredFromCurse"].ID:
		return _AFNContract.ParseRecoveredFromCurse(log)
	case _AFNContract.abi.Events["ReusedVotesToCurse"].ID:
		return _AFNContract.ParseReusedVotesToCurse(log)
	case _AFNContract.abi.Events["SkippedUnvoteToCurse"].ID:
		return _AFNContract.ParseSkippedUnvoteToCurse(log)
	case _AFNContract.abi.Events["TaggedRootBlessed"].ID:
		return _AFNContract.ParseTaggedRootBlessed(log)
	case _AFNContract.abi.Events["UnvoteToCurse"].ID:
		return _AFNContract.ParseUnvoteToCurse(log)
	case _AFNContract.abi.Events["VoteToBless"].ID:
		return _AFNContract.ParseVoteToBless(log)
	case _AFNContract.abi.Events["VoteToCurse"].ID:
		return _AFNContract.ParseVoteToCurse(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (AFNContractAlreadyBlessed) Topic() common.Hash {
	return common.HexToHash("0x274d6d5b916b0a53974b7ab86c844b97a2e03a60f658cd9a4b1c028b604d7bf1")
}

func (AFNContractAlreadyVotedToBless) Topic() common.Hash {
	return common.HexToHash("0x6dfbb745226fa630aeb1b9557d17d508ddb789a04f0cb873ec16e58beb8beead")
}

func (AFNContractConfigSet) Topic() common.Hash {
	return common.HexToHash("0x7cf8e698b191db138396ab0eae2ad5b3fe353fd014fd5956b034b86f2d605cfd")
}

func (AFNContractCursed) Topic() common.Hash {
	return common.HexToHash("0x6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e333")
}

func (AFNContractOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (AFNContractOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (AFNContractRecoveredFromCurse) Topic() common.Hash {
	return common.HexToHash("0x08c773aaf7568c6b9110dcdfc13c27177410582ee30e157d1aa306b49d603eb7")
}

func (AFNContractReusedVotesToCurse) Topic() common.Hash {
	return common.HexToHash("0xb4a70189a30e3d3b9c77d291f83699633e70ab4427fc3644a955ab4cca077b03")
}

func (AFNContractSkippedUnvoteToCurse) Topic() common.Hash {
	return common.HexToHash("0xf4e3b20447f3f83360469333a2578825ae355d192dd6f59c6516d832fa425a53")
}

func (AFNContractTaggedRootBlessed) Topic() common.Hash {
	return common.HexToHash("0x8257378aa73bf8e4ada848713526584a3dcee0fd3db3beed7397f7a7f5067cc9")
}

func (AFNContractUnvoteToCurse) Topic() common.Hash {
	return common.HexToHash("0x70fc9538e4890befa525c50aab95b49f97b45a1c9a99100f353efcedc3b924dc")
}

func (AFNContractVoteToBless) Topic() common.Hash {
	return common.HexToHash("0xe5bca7cec7a958a09a9432f1e98b5925115e419486b4768f26aa04422036622a")
}

func (AFNContractVoteToCurse) Topic() common.Hash {
	return common.HexToHash("0xe3c908d69fe71d009d3f8097489f0f498dc66a2f10622ef577a6496fe46958ba")
}

func (_AFNContract *AFNContract) Address() common.Address {
	return _AFNContract.address
}

type AFNContractInterface interface {
	GetBlessVotersAndWeight(opts *bind.CallOpts, taggedRoot IAFNTaggedRoot) (GetBlessVotersAndWeight,

		error)

	GetConfigDetails(opts *bind.CallOpts) (GetConfigDetails,

		error)

	GetCurseVotersAndWeight(opts *bind.CallOpts) (GetCurseVotersAndWeight,

		error)

	IsBlessed(opts *bind.CallOpts, taggedRoot IAFNTaggedRoot) (bool, error)

	IsCursed(opts *bind.CallOpts) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	OwnerUnbless(opts *bind.TransactOpts, taggedRoots []IAFNTaggedRoot) (*types.Transaction, error)

	OwnerUnvoteToCurse(opts *bind.TransactOpts, records []AFNUnvoteToCurseRecord) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, config AFNConfig) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	UnvoteToCurse(opts *bind.TransactOpts, curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error)

	VoteToBless(opts *bind.TransactOpts, taggedRoots []IAFNTaggedRoot) (*types.Transaction, error)

	VoteToCurse(opts *bind.TransactOpts, curseId [32]byte) (*types.Transaction, error)

	FilterAlreadyBlessed(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractAlreadyBlessedIterator, error)

	WatchAlreadyBlessed(opts *bind.WatchOpts, sink chan<- *AFNContractAlreadyBlessed, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseAlreadyBlessed(log types.Log) (*AFNContractAlreadyBlessed, error)

	FilterAlreadyVotedToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractAlreadyVotedToBlessIterator, error)

	WatchAlreadyVotedToBless(opts *bind.WatchOpts, sink chan<- *AFNContractAlreadyVotedToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseAlreadyVotedToBless(log types.Log) (*AFNContractAlreadyVotedToBless, error)

	FilterConfigSet(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *AFNContractConfigSet, configVersion []uint32) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*AFNContractConfigSet, error)

	FilterCursed(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractCursedIterator, error)

	WatchCursed(opts *bind.WatchOpts, sink chan<- *AFNContractCursed, configVersion []uint32) (event.Subscription, error)

	ParseCursed(log types.Log) (*AFNContractCursed, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AFNContractOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *AFNContractOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*AFNContractOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AFNContractOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AFNContractOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*AFNContractOwnershipTransferred, error)

	FilterRecoveredFromCurse(opts *bind.FilterOpts) (*AFNContractRecoveredFromCurseIterator, error)

	WatchRecoveredFromCurse(opts *bind.WatchOpts, sink chan<- *AFNContractRecoveredFromCurse) (event.Subscription, error)

	ParseRecoveredFromCurse(log types.Log) (*AFNContractRecoveredFromCurse, error)

	FilterReusedVotesToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractReusedVotesToCurseIterator, error)

	WatchReusedVotesToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractReusedVotesToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseReusedVotesToCurse(log types.Log) (*AFNContractReusedVotesToCurse, error)

	FilterSkippedUnvoteToCurse(opts *bind.FilterOpts, voter []common.Address) (*AFNContractSkippedUnvoteToCurseIterator, error)

	WatchSkippedUnvoteToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractSkippedUnvoteToCurse, voter []common.Address) (event.Subscription, error)

	ParseSkippedUnvoteToCurse(log types.Log) (*AFNContractSkippedUnvoteToCurse, error)

	FilterTaggedRootBlessed(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractTaggedRootBlessedIterator, error)

	WatchTaggedRootBlessed(opts *bind.WatchOpts, sink chan<- *AFNContractTaggedRootBlessed, configVersion []uint32) (event.Subscription, error)

	ParseTaggedRootBlessed(log types.Log) (*AFNContractTaggedRootBlessed, error)

	FilterUnvoteToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractUnvoteToCurseIterator, error)

	WatchUnvoteToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractUnvoteToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseUnvoteToCurse(log types.Log) (*AFNContractUnvoteToCurse, error)

	FilterVoteToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractVoteToBlessIterator, error)

	WatchVoteToBless(opts *bind.WatchOpts, sink chan<- *AFNContractVoteToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseVoteToBless(log types.Log) (*AFNContractVoteToBless, error)

	FilterVoteToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractVoteToCurseIterator, error)

	WatchVoteToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractVoteToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseVoteToCurse(log types.Log) (*AFNContractVoteToCurse, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package message_executor

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

var MessageExecutorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"needFee\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNeedFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOffRamp\",\"outputs\":[{\"internalType\":\"contractOffRampInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setNeedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAccumulatedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162002e8038038062002e8083398101604081905262000034916200019a565b600133806000816200008d5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c057620000c081620000ee565b50505015156080526001600160a01b039190911660a0526008805460ff1916911515919091179055620001e8565b6001600160a01b038116331415620001495760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000084565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008060408385031215620001ae57600080fd5b82516001600160a01b0381168114620001c657600080fd5b60208401519092508015158114620001dd57600080fd5b809150509250929050565b60805160a051612c6b620002156000396000818161021801526116fe015260006105a90152612c6b6000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063c1cc9f0d11610066578063c1cc9f0d14610216578063c2d8841c1461023c578063e3d0e7121461024f578063f2fde38b1461026257600080fd5b80638da5cb5b146101a4578063afcb95d7146101e3578063b1dc65a41461020357600080fd5b806379ba5097116100bd57806379ba509714610157578063814118341461015f57806381ff70481461017457600080fd5b8063181f5a77146100e45780633f48b73a1461012c57806359e96b5b14610142575b600080fd5b604080518082018252601581527f4d6573736167654578656375746f7220312e302e300000000000000000000000602082015290516101239190611d6d565b60405180910390f35b60085460ff166040519015158152602001610123565b610155610150366004611da2565b610275565b005b6101556102fb565b6101676103fd565b6040516101239190611e34565b6004546002546040805163ffffffff80851682526401000000009094049093166020840152820152606001610123565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610123565b604080516001815260006020820181905291810191909152606001610123565b610155610211366004611e93565b61046c565b7f00000000000000000000000000000000000000000000000000000000000000006101be565b61015561024a366004611f86565b610b15565b61015561025d3660046121ed565b610b4e565b6101556102703660046122ba565b611533565b61027d611547565b61029e73ffffffffffffffffffffffffffffffffffffffff841683836115ca565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290527f5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa89060600160405180910390a1505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6060600780548060200260200160405190810160405280929190818152602001828054801561046257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610437575b5050505050905090565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c0135916104c291849163ffffffff851691908e908e908190840183828082843760009201919091525061165c92505050565b6040805183815262ffffff600884901c1660208201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16040805160608101825260025480825260035460ff80821660208501526101009091041692820192909252908314610597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f636f6e666967446967657374206d69736d6174636800000000000000000000006044820152606401610378565b6105a58b8b8b8b8b8b611782565b60007f000000000000000000000000000000000000000000000000000000000000000015610602576002826020015183604001516105e39190612335565b6105ed919061235a565b6105f8906001612335565b60ff169050610618565b6020820151610612906001612335565b60ff1690505b888114610681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e6174757265730000000000006044820152606401610378565b8887146106ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e00006044820152606401610378565b3360009081526005602090815260408083208151808301909252805460ff8082168452929391929184019161010090910416600281111561072d5761072d6123a3565b600281111561073e5761073e6123a3565b905250905060028160200151600281111561075b5761075b6123a3565b1480156107a257506007816000015160ff168154811061077d5761077d6122d7565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b610808576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f756e617574686f72697a6564207472616e736d697474657200000000000000006044820152606401610378565b50505050506000888860405161081f9291906123d2565b604051908190038120610836918c906020016123e2565b604051602081830303815290604052805190602001209050610856611cd4565b604080518082019091526000808252602082015260005b88811015610af357600060018588846020811061088c5761088c6122d7565b61089991901a601b612335565b8d8d868181106108ab576108ab6122d7565b905060200201358c8c878181106108c4576108c46122d7565b9050602002013560405160008152602001604052604051610901949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610923573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff811660009081526005602090815290849020838501909452835460ff808216855292965092945084019161010090041660028111156109a3576109a36123a3565b60028111156109b4576109b46123a3565b90525092506001836020015160028111156109d1576109d16123a3565b14610a38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e00006044820152606401610378565b8251849060ff16601f8110610a4f57610a4f6122d7565b602002015115610abb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f6e2d756e69717565207369676e61747572650000000000000000000000006044820152606401610378565b600184846000015160ff16601f8110610ad657610ad66122d7565b911515602090920201525080610aeb816123fe565b91505061086d565b5050505063ffffffff8110610b0a57610b0a612437565b505050505050505050565b610b1d611547565b600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b855185518560ff16601f831115610bc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e657273000000000000000000000000000000006044820152606401610378565b60008111610c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610378565b818314610cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e000000000000000000000000000000000000000000000000000000006064820152608401610378565b610cc4816003612466565b8311610d2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610378565b610d34611547565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b60065415610f2757600654600090610d8c906001906124a3565b9050600060068281548110610da357610da36122d7565b60009182526020822001546007805473ffffffffffffffffffffffffffffffffffffffff90921693509084908110610ddd57610ddd6122d7565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff85811684526005909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811690915592909116808452922080549091169055600680549192509080610e5d57610e5d6124ba565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190556007805480610ec657610ec66124ba565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550610d72915050565b60005b81515181101561138e5760006005600084600001518481518110610f5057610f506122d7565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115610f9a57610f9a6123a3565b14611001576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610378565b6040805180820190915260ff82168152600160208201528251805160059160009185908110611032576110326122d7565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016176101008360028111156110d3576110d36123a3565b0217905550600091506110e39050565b60056000846020015184815181106110fd576110fd6122d7565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115611147576111476123a3565b146111ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610378565b6040805180820190915260ff8216815260208101600281525060056000846020015184815181106111e1576111e16122d7565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001617610100836002811115611282576112826123a3565b0217905550508251805160069250839081106112a0576112a06122d7565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909316929092179091558201518051600791908390811061131c5761131c6122d7565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905580611386816123fe565b915050610f2a565b506040810151600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600480547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff4381168202928317855590830481169360019390926000926114209286929082169116176124e9565b92506101000a81548163ffffffff021916908363ffffffff16021790555061147f4630600460009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a00151611839565b6002819055825180516003805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560045460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e059861151e988b98919763ffffffff909216969095919491939192612511565b60405180910390a15050505050505050505050565b61153b611547565b611544816118e4565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610378565b565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526116579084906119da565b505050565b60008180602001905181019061167291906127ee565b905060005b815181101561177b576000828281518110611694576116946122d7565b6020908102919091018101516040808201518151808301835283518152838501519481019490945260085491517f3b8d08ef00000000000000000000000000000000000000000000000000000000815292945073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001693633b8d08ef936117359360ff16906004016129f2565b600060405180830381600087803b15801561174f57600080fd5b505af1158015611763573d6000803e3d6000fd5b50505050508080611773906123fe565b915050611677565b5050505050565b600061178f826020612466565b61179a856020612466565b6117a688610144612b78565b6117b09190612b78565b6117ba9190612b78565b6117c5906000612b78565b9050368114611830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d6174636800000000000000006044820152606401610378565b50505050505050565b6000808a8a8a8a8a8a8a8a8a60405160200161185d99989796959493929190612b90565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116331415611964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610378565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000611a3c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ae69092919063ffffffff16565b8051909150156116575780806020019051810190611a5a9190612c25565b611657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610378565b6060611af58484600085611aff565b90505b9392505050565b606082471015611b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610378565b843b611bf9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610378565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c229190612c42565b60006040518083038185875af1925050503d8060008114611c5f576040519150601f19603f3d011682016040523d82523d6000602084013e611c64565b606091505b5091509150611c74828286611c81565b925050505b949350505050565b60608315611c90575081611af8565b825115611ca05782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103789190611d6d565b604051806103e00160405280601f906020820280368337509192915050565b60005b83811015611d0e578181015183820152602001611cf6565b83811115611d1d576000848401525b50505050565b60008151808452611d3b816020860160208601611cf3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611af86020830184611d23565b73ffffffffffffffffffffffffffffffffffffffff8116811461154457600080fd5b600080600060608486031215611db757600080fd5b8335611dc281611d80565b92506020840135611dd281611d80565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015611e2957815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611df7565b509495945050505050565b602081526000611af86020830184611de3565b60008083601f840112611e5957600080fd5b50813567ffffffffffffffff811115611e7157600080fd5b6020830191508360208260051b8501011115611e8c57600080fd5b9250929050565b60008060008060008060008060e0898b031215611eaf57600080fd5b606089018a811115611ec057600080fd5b8998503567ffffffffffffffff80821115611eda57600080fd5b818b0191508b601f830112611eee57600080fd5b813581811115611efd57600080fd5b8c6020828501011115611f0f57600080fd5b6020830199508098505060808b0135915080821115611f2d57600080fd5b611f398c838d01611e47565b909750955060a08b0135915080821115611f5257600080fd5b50611f5f8b828c01611e47565b999c989b50969995989497949560c00135949350505050565b801515811461154457600080fd5b600060208284031215611f9857600080fd5b8135611af881611f78565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611ff557611ff5611fa3565b60405290565b60405160e0810167ffffffffffffffff81118282101715611ff557611ff5611fa3565b6040516060810167ffffffffffffffff81118282101715611ff557611ff5611fa3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561208857612088611fa3565b604052919050565b600067ffffffffffffffff8211156120aa576120aa611fa3565b5060051b60200190565b600082601f8301126120c557600080fd5b813560206120da6120d583612090565b612041565b82815260059290921b840181019181810190868411156120f957600080fd5b8286015b8481101561211d57803561211081611d80565b83529183019183016120fd565b509695505050505050565b803560ff8116811461213957600080fd5b919050565b600067ffffffffffffffff82111561215857612158611fa3565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261219557600080fd5b81356121a36120d58261213e565b8181528460208386010111156121b857600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff8116811461213957600080fd5b60008060008060008060c0878903121561220657600080fd5b863567ffffffffffffffff8082111561221e57600080fd5b61222a8a838b016120b4565b9750602089013591508082111561224057600080fd5b61224c8a838b016120b4565b965061225a60408a01612128565b9550606089013591508082111561227057600080fd5b61227c8a838b01612184565b945061228a60808a016121d5565b935060a08901359150808211156122a057600080fd5b506122ad89828a01612184565b9150509295509295509295565b6000602082840312156122cc57600080fd5b8135611af881611d80565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff84168060ff0382111561235257612352612306565b019392505050565b600060ff831680612394577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561243057612430612306565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561249e5761249e612306565b500290565b6000828210156124b5576124b5612306565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600063ffffffff80831681851680830382111561250857612508612306565b01949350505050565b600061012063ffffffff808d1684528b6020850152808b166040850152508060608401526125418184018a611de3565b905082810360808401526125558189611de3565b905060ff871660a084015282810360c08401526125728187611d23565b905067ffffffffffffffff851660e08401528281036101008401526125978185611d23565b9c9b505050505050505050505050565b805161213981611d80565b600082601f8301126125c357600080fd5b815160206125d36120d583612090565b82815260059290921b840181019181810190868411156125f257600080fd5b8286015b8481101561211d57805161260981611d80565b83529183019183016125f6565b600082601f83011261262757600080fd5b815160206126376120d583612090565b82815260059290921b8401810191818101908684111561265657600080fd5b8286015b8481101561211d578051835291830191830161265a565b600082601f83011261268257600080fd5b81516126906120d58261213e565b8181528460208386010111156126a557600080fd5b611c79826020830160208701611cf3565b6000608082840312156126c857600080fd5b6126d0611fd2565b9050815181526020820151602082015260408201516126ee81611d80565b6040820152606082015167ffffffffffffffff8082111561270e57600080fd5b9083019060e0828603121561272257600080fd5b61272a611ffb565b82518281111561273957600080fd5b612745878286016125b2565b82525060208301518281111561275a57600080fd5b61276687828601612616565b60208301525060408301516040820152612782606084016125a7565b6060820152612793608084016125a7565b608082015260a0830151828111156127aa57600080fd5b6127b687828601612671565b60a08301525060c0830151828111156127ce57600080fd5b6127da87828601612671565b60c083015250606084015250909392505050565b6000602080838503121561280157600080fd5b825167ffffffffffffffff8082111561281957600080fd5b818501915085601f83011261282d57600080fd5b815161283b6120d582612090565b81815260059190911b8301840190848101908883111561285a57600080fd5b8585015b838110156129655780518581111561287557600080fd5b86016060818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00112156128a957600080fd5b6128b161201e565b88820151878111156128c257600080fd5b8201603f81018d136128d357600080fd5b898101516128e36120d582612090565b81815260059190911b8201604001908b8101908f83111561290357600080fd5b6040840193505b828410156129235783518252928c0192908c019061290a565b845250505060408201518982015260608201518781111561294357600080fd5b6129518d8b838601016126b6565b60408301525084525091860191860161285e565b5098975050505050505050565b600081518084526020808501945080840160005b83811015611e2957815187529582019590820190600101612986565b805160408084528151908401819052600091602091908201906060860190845b818110156129de578351835292840192918401916001016129c2565b505093820151949091019390935250919050565b606081528351606082015260006020808601516080840152604086015173ffffffffffffffffffffffffffffffffffffffff80821660a086015260608801519150608060c08601526101c08501825160e0808801528181518084526101e0890191508683019350600092505b80831015612a8057835185168252928601926001929092019190860190612a5e565b508585015193507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2092508288820301610100890152612abf8185612972565b9350505060408301516101208701526060830151612af661014088018273ffffffffffffffffffffffffffffffffffffffff169052565b50608083015173ffffffffffffffffffffffffffffffffffffffff1661016087015260a08301518683038201610180880152612b328382611d23565b92505060c0830151925080868303016101a087015250612b528183611d23565b91505083810382850152612b6681876129a2565b92505050611c79604083018415159052565b60008219821115612b8b57612b8b612306565b500190565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b166040850152816060850152612bd78285018b611de3565b91508382036080850152612beb828a611de3565b915060ff881660a085015283820360c0850152612c088288611d23565b90861660e085015283810361010085015290506125978185611d23565b600060208284031215612c3757600080fd5b8151611af881611f78565b60008251612c54818460208701611cf3565b919091019291505056fea164736f6c634300080c000a",
}

var MessageExecutorABI = MessageExecutorMetaData.ABI

var MessageExecutorBin = MessageExecutorMetaData.Bin

func DeployMessageExecutor(auth *bind.TransactOpts, backend bind.ContractBackend, offRamp common.Address, needFee bool) (common.Address, *types.Transaction, *MessageExecutor, error) {
	parsed, err := MessageExecutorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MessageExecutorBin), backend, offRamp, needFee)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MessageExecutor{MessageExecutorCaller: MessageExecutorCaller{contract: contract}, MessageExecutorTransactor: MessageExecutorTransactor{contract: contract}, MessageExecutorFilterer: MessageExecutorFilterer{contract: contract}}, nil
}

type MessageExecutor struct {
	address common.Address
	abi     abi.ABI
	MessageExecutorCaller
	MessageExecutorTransactor
	MessageExecutorFilterer
}

type MessageExecutorCaller struct {
	contract *bind.BoundContract
}

type MessageExecutorTransactor struct {
	contract *bind.BoundContract
}

type MessageExecutorFilterer struct {
	contract *bind.BoundContract
}

type MessageExecutorSession struct {
	Contract     *MessageExecutor
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type MessageExecutorCallerSession struct {
	Contract *MessageExecutorCaller
	CallOpts bind.CallOpts
}

type MessageExecutorTransactorSession struct {
	Contract     *MessageExecutorTransactor
	TransactOpts bind.TransactOpts
}

type MessageExecutorRaw struct {
	Contract *MessageExecutor
}

type MessageExecutorCallerRaw struct {
	Contract *MessageExecutorCaller
}

type MessageExecutorTransactorRaw struct {
	Contract *MessageExecutorTransactor
}

func NewMessageExecutor(address common.Address, backend bind.ContractBackend) (*MessageExecutor, error) {
	abi, err := abi.JSON(strings.NewReader(MessageExecutorABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindMessageExecutor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MessageExecutor{address: address, abi: abi, MessageExecutorCaller: MessageExecutorCaller{contract: contract}, MessageExecutorTransactor: MessageExecutorTransactor{contract: contract}, MessageExecutorFilterer: MessageExecutorFilterer{contract: contract}}, nil
}

func NewMessageExecutorCaller(address common.Address, caller bind.ContractCaller) (*MessageExecutorCaller, error) {
	contract, err := bindMessageExecutor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorCaller{contract: contract}, nil
}

func NewMessageExecutorTransactor(address common.Address, transactor bind.ContractTransactor) (*MessageExecutorTransactor, error) {
	contract, err := bindMessageExecutor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorTransactor{contract: contract}, nil
}

func NewMessageExecutorFilterer(address common.Address, filterer bind.ContractFilterer) (*MessageExecutorFilterer, error) {
	contract, err := bindMessageExecutor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorFilterer{contract: contract}, nil
}

func bindMessageExecutor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MessageExecutorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_MessageExecutor *MessageExecutorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageExecutor.Contract.MessageExecutorCaller.contract.Call(opts, result, method, params...)
}

func (_MessageExecutor *MessageExecutorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageExecutor.Contract.MessageExecutorTransactor.contract.Transfer(opts)
}

func (_MessageExecutor *MessageExecutorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageExecutor.Contract.MessageExecutorTransactor.contract.Transact(opts, method, params...)
}

func (_MessageExecutor *MessageExecutorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageExecutor.Contract.contract.Call(opts, result, method, params...)
}

func (_MessageExecutor *MessageExecutorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageExecutor.Contract.contract.Transfer(opts)
}

func (_MessageExecutor *MessageExecutorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageExecutor.Contract.contract.Transact(opts, method, params...)
}

func (_MessageExecutor *MessageExecutorCaller) GetNeedFee(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MessageExecutor.contract.Call(opts, &out, "getNeedFee")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_MessageExecutor *MessageExecutorSession) GetNeedFee() (bool, error) {
	return _MessageExecutor.Contract.GetNeedFee(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCallerSession) GetNeedFee() (bool, error) {
	return _MessageExecutor.Contract.GetNeedFee(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCaller) GetOffRamp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageExecutor.contract.Call(opts, &out, "getOffRamp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MessageExecutor *MessageExecutorSession) GetOffRamp() (common.Address, error) {
	return _MessageExecutor.Contract.GetOffRamp(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCallerSession) GetOffRamp() (common.Address, error) {
	return _MessageExecutor.Contract.GetOffRamp(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _MessageExecutor.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_MessageExecutor *MessageExecutorSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _MessageExecutor.Contract.LatestConfigDetails(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _MessageExecutor.Contract.LatestConfigDetails(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _MessageExecutor.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_MessageExecutor *MessageExecutorSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _MessageExecutor.Contract.LatestConfigDigestAndEpoch(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _MessageExecutor.Contract.LatestConfigDigestAndEpoch(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageExecutor.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MessageExecutor *MessageExecutorSession) Owner() (common.Address, error) {
	return _MessageExecutor.Contract.Owner(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCallerSession) Owner() (common.Address, error) {
	return _MessageExecutor.Contract.Owner(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _MessageExecutor.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_MessageExecutor *MessageExecutorSession) Transmitters() ([]common.Address, error) {
	return _MessageExecutor.Contract.Transmitters(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCallerSession) Transmitters() ([]common.Address, error) {
	return _MessageExecutor.Contract.Transmitters(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MessageExecutor.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_MessageExecutor *MessageExecutorSession) TypeAndVersion() (string, error) {
	return _MessageExecutor.Contract.TypeAndVersion(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorCallerSession) TypeAndVersion() (string, error) {
	return _MessageExecutor.Contract.TypeAndVersion(&_MessageExecutor.CallOpts)
}

func (_MessageExecutor *MessageExecutorTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageExecutor.contract.Transact(opts, "acceptOwnership")
}

func (_MessageExecutor *MessageExecutorSession) AcceptOwnership() (*types.Transaction, error) {
	return _MessageExecutor.Contract.AcceptOwnership(&_MessageExecutor.TransactOpts)
}

func (_MessageExecutor *MessageExecutorTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _MessageExecutor.Contract.AcceptOwnership(&_MessageExecutor.TransactOpts)
}

func (_MessageExecutor *MessageExecutorTransactor) SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _MessageExecutor.contract.Transact(opts, "setConfig", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_MessageExecutor *MessageExecutorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _MessageExecutor.Contract.SetConfig(&_MessageExecutor.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_MessageExecutor *MessageExecutorTransactorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _MessageExecutor.Contract.SetConfig(&_MessageExecutor.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_MessageExecutor *MessageExecutorTransactor) SetNeedFee(opts *bind.TransactOpts, flag bool) (*types.Transaction, error) {
	return _MessageExecutor.contract.Transact(opts, "setNeedFee", flag)
}

func (_MessageExecutor *MessageExecutorSession) SetNeedFee(flag bool) (*types.Transaction, error) {
	return _MessageExecutor.Contract.SetNeedFee(&_MessageExecutor.TransactOpts, flag)
}

func (_MessageExecutor *MessageExecutorTransactorSession) SetNeedFee(flag bool) (*types.Transaction, error) {
	return _MessageExecutor.Contract.SetNeedFee(&_MessageExecutor.TransactOpts, flag)
}

func (_MessageExecutor *MessageExecutorTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _MessageExecutor.contract.Transact(opts, "transferOwnership", to)
}

func (_MessageExecutor *MessageExecutorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MessageExecutor.Contract.TransferOwnership(&_MessageExecutor.TransactOpts, to)
}

func (_MessageExecutor *MessageExecutorTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MessageExecutor.Contract.TransferOwnership(&_MessageExecutor.TransactOpts, to)
}

func (_MessageExecutor *MessageExecutorTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MessageExecutor.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_MessageExecutor *MessageExecutorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MessageExecutor.Contract.Transmit(&_MessageExecutor.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_MessageExecutor *MessageExecutorTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MessageExecutor.Contract.Transmit(&_MessageExecutor.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_MessageExecutor *MessageExecutorTransactor) WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MessageExecutor.contract.Transact(opts, "withdrawAccumulatedFees", feeToken, recipient, amount)
}

func (_MessageExecutor *MessageExecutorSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MessageExecutor.Contract.WithdrawAccumulatedFees(&_MessageExecutor.TransactOpts, feeToken, recipient, amount)
}

func (_MessageExecutor *MessageExecutorTransactorSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MessageExecutor.Contract.WithdrawAccumulatedFees(&_MessageExecutor.TransactOpts, feeToken, recipient, amount)
}

type MessageExecutorConfigSetIterator struct {
	Event *MessageExecutorConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorConfigSetIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_MessageExecutor *MessageExecutorFilterer) FilterConfigSet(opts *bind.FilterOpts) (*MessageExecutorConfigSetIterator, error) {

	logs, sub, err := _MessageExecutor.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &MessageExecutorConfigSetIterator{contract: _MessageExecutor.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_MessageExecutor *MessageExecutorFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *MessageExecutorConfigSet) (event.Subscription, error) {

	logs, sub, err := _MessageExecutor.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorConfigSet)
				if err := _MessageExecutor.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutor *MessageExecutorFilterer) ParseConfigSet(log types.Log) (*MessageExecutorConfigSet, error) {
	event := new(MessageExecutorConfigSet)
	if err := _MessageExecutor.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorFeesWithdrawnIterator struct {
	Event *MessageExecutorFeesWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorFeesWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorFeesWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorFeesWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorFeesWithdrawnIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorFeesWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorFeesWithdrawn struct {
	FeeToken  common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log
}

func (_MessageExecutor *MessageExecutorFilterer) FilterFeesWithdrawn(opts *bind.FilterOpts) (*MessageExecutorFeesWithdrawnIterator, error) {

	logs, sub, err := _MessageExecutor.contract.FilterLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return &MessageExecutorFeesWithdrawnIterator{contract: _MessageExecutor.contract, event: "FeesWithdrawn", logs: logs, sub: sub}, nil
}

func (_MessageExecutor *MessageExecutorFilterer) WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *MessageExecutorFeesWithdrawn) (event.Subscription, error) {

	logs, sub, err := _MessageExecutor.contract.WatchLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorFeesWithdrawn)
				if err := _MessageExecutor.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutor *MessageExecutorFilterer) ParseFeesWithdrawn(log types.Log) (*MessageExecutorFeesWithdrawn, error) {
	event := new(MessageExecutorFeesWithdrawn)
	if err := _MessageExecutor.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorOwnershipTransferRequestedIterator struct {
	Event *MessageExecutorOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MessageExecutor *MessageExecutorFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutor.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorOwnershipTransferRequestedIterator{contract: _MessageExecutor.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_MessageExecutor *MessageExecutorFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MessageExecutorOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutor.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorOwnershipTransferRequested)
				if err := _MessageExecutor.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutor *MessageExecutorFilterer) ParseOwnershipTransferRequested(log types.Log) (*MessageExecutorOwnershipTransferRequested, error) {
	event := new(MessageExecutorOwnershipTransferRequested)
	if err := _MessageExecutor.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorOwnershipTransferredIterator struct {
	Event *MessageExecutorOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MessageExecutor *MessageExecutorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutor.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorOwnershipTransferredIterator{contract: _MessageExecutor.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_MessageExecutor *MessageExecutorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MessageExecutorOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutor.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorOwnershipTransferred)
				if err := _MessageExecutor.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutor *MessageExecutorFilterer) ParseOwnershipTransferred(log types.Log) (*MessageExecutorOwnershipTransferred, error) {
	event := new(MessageExecutorOwnershipTransferred)
	if err := _MessageExecutor.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorTransmittedIterator struct {
	Event *MessageExecutorTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorTransmittedIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_MessageExecutor *MessageExecutorFilterer) FilterTransmitted(opts *bind.FilterOpts) (*MessageExecutorTransmittedIterator, error) {

	logs, sub, err := _MessageExecutor.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &MessageExecutorTransmittedIterator{contract: _MessageExecutor.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_MessageExecutor *MessageExecutorFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *MessageExecutorTransmitted) (event.Subscription, error) {

	logs, sub, err := _MessageExecutor.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorTransmitted)
				if err := _MessageExecutor.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutor *MessageExecutorFilterer) ParseTransmitted(log types.Log) (*MessageExecutorTransmitted, error) {
	event := new(MessageExecutorTransmitted)
	if err := _MessageExecutor.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_MessageExecutor *MessageExecutor) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _MessageExecutor.abi.Events["ConfigSet"].ID:
		return _MessageExecutor.ParseConfigSet(log)
	case _MessageExecutor.abi.Events["FeesWithdrawn"].ID:
		return _MessageExecutor.ParseFeesWithdrawn(log)
	case _MessageExecutor.abi.Events["OwnershipTransferRequested"].ID:
		return _MessageExecutor.ParseOwnershipTransferRequested(log)
	case _MessageExecutor.abi.Events["OwnershipTransferred"].ID:
		return _MessageExecutor.ParseOwnershipTransferred(log)
	case _MessageExecutor.abi.Events["Transmitted"].ID:
		return _MessageExecutor.ParseTransmitted(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (MessageExecutorConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (MessageExecutorFeesWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa8")
}

func (MessageExecutorOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (MessageExecutorOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (MessageExecutorTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (_MessageExecutor *MessageExecutor) Address() common.Address {
	return _MessageExecutor.address
}

type MessageExecutorInterface interface {
	GetNeedFee(opts *bind.CallOpts) (bool, error)

	GetOffRamp(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	SetNeedFee(opts *bind.TransactOpts, flag bool) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*MessageExecutorConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *MessageExecutorConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*MessageExecutorConfigSet, error)

	FilterFeesWithdrawn(opts *bind.FilterOpts) (*MessageExecutorFeesWithdrawnIterator, error)

	WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *MessageExecutorFeesWithdrawn) (event.Subscription, error)

	ParseFeesWithdrawn(log types.Log) (*MessageExecutorFeesWithdrawn, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MessageExecutorOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*MessageExecutorOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MessageExecutorOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*MessageExecutorOwnershipTransferred, error)

	FilterTransmitted(opts *bind.FilterOpts) (*MessageExecutorTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *MessageExecutorTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*MessageExecutorTransmitted, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

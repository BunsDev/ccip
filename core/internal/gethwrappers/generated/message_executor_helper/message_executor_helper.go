// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package message_executor_helper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

var MessageExecutorHelperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"needFee\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNeedFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOffRamp\",\"outputs\":[{\"internalType\":\"contractOffRampInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"executableMessages\",\"type\":\"bytes\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setNeedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAccumulatedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162002ee138038062002ee183398101604081905262000034916200019e565b8181600133806000816200008f5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c257620000c281620000f3565b50505015156080526001600160a01b039190911660a0526008805460ff191691151591909117905550620001ec9050565b336001600160a01b038216036200014d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000086565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008060408385031215620001b257600080fd5b82516001600160a01b0381168114620001ca57600080fd5b60208401519092508015158114620001e157600080fd5b809150509250929050565b60805160a051612cc862000219600039600081816102360152611728015260006105c70152612cc86000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063afcb95d71161008c578063c1cc9f0d11610066578063c1cc9f0d14610234578063c2d8841c1461025a578063e3d0e7121461026d578063f2fde38b1461028057600080fd5b8063afcb95d7146101ee578063b1dc65a41461020e578063b57671661461022157600080fd5b806379ba5097116100c857806379ba509714610162578063814118341461016a57806381ff70481461017f5780638da5cb5b146101af57600080fd5b8063181f5a77146100ef5780633f48b73a1461013757806359e96b5b1461014d575b600080fd5b604080518082018252601581527f4d6573736167654578656375746f7220312e302e3000000000000000000000006020820152905161012e9190611d96565b60405180910390f35b60085460ff16604051901515815260200161012e565b61016061015b366004611dcb565b610293565b005b610160610319565b61017261041b565b60405161012e9190611e5d565b6004546002546040805163ffffffff8085168252640100000000909404909316602084015282015260600161012e565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012e565b60408051600181526000602082018190529181019190915260600161012e565b61016061021c366004611ebc565b61048a565b61016061022f36600461212a565b610b33565b7f00000000000000000000000000000000000000000000000000000000000000006101c9565b61016061026836600461216d565b610b42565b61016061027b36600461224b565b610b7b565b61016061028e366004612318565b611560565b61029b611571565b6102bc73ffffffffffffffffffffffffffffffffffffffff841683836115f4565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290527f5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa89060600160405180910390a1505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461039f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6060600780548060200260200160405190810160405280929190818152602001828054801561048057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610455575b5050505050905090565b60005a604080516020601f8b018190048102820181019092528981529192508a3591818c0135916104e091849163ffffffff851691908e908e908190840183828082843760009201919091525061168692505050565b6040805183815262ffffff600884901c1660208201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16040805160608101825260025480825260035460ff808216602085015261010090910416928201929092529083146105b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f636f6e666967446967657374206d69736d6174636800000000000000000000006044820152606401610396565b6105c38b8b8b8b8b8b6117ac565b60007f000000000000000000000000000000000000000000000000000000000000000015610620576002826020015183604001516106019190612393565b61060b91906123b8565b610616906001612393565b60ff169050610636565b6020820151610630906001612393565b60ff1690505b88811461069f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f77726f6e67206e756d626572206f66207369676e6174757265730000000000006044820152606401610396565b888714610708576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e00006044820152606401610396565b3360009081526005602090815260408083208151808301909252805460ff8082168452929391929184019161010090910416600281111561074b5761074b612401565b600281111561075c5761075c612401565b905250905060028160200151600281111561077957610779612401565b1480156107c057506007816000015160ff168154811061079b5761079b612335565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1633145b610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f756e617574686f72697a6564207472616e736d697474657200000000000000006044820152606401610396565b50505050506000888860405161083d929190612430565b604051908190038120610854918c90602001612440565b604051602081830303815290604052805190602001209050610874611cfd565b604080518082019091526000808252602082015260005b88811015610b115760006001858884602081106108aa576108aa612335565b6108b791901a601b612393565b8d8d868181106108c9576108c9612335565b905060200201358c8c878181106108e2576108e2612335565b905060200201356040516000815260200160405260405161091f949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610941573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081015173ffffffffffffffffffffffffffffffffffffffff811660009081526005602090815290849020838501909452835460ff808216855292965092945084019161010090041660028111156109c1576109c1612401565b60028111156109d2576109d2612401565b90525092506001836020015160028111156109ef576109ef612401565b14610a56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e00006044820152606401610396565b8251849060ff16601f8110610a6d57610a6d612335565b602002015115610ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f6e2d756e69717565207369676e61747572650000000000000000000000006044820152606401610396565b600184846000015160ff16601f8110610af457610af4612335565b911515602090920201525080610b098161245c565b91505061088b565b5050505063ffffffff8110610b2857610b28612494565b505050505050505050565b610b3f60008083611686565b50565b610b4a611571565b600880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b855185518560ff16601f831115610bee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e657273000000000000000000000000000000006044820152606401610396565b60008111610c58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610396565b818314610ce6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e000000000000000000000000000000000000000000000000000000006064820152608401610396565b610cf18160036124c3565b8311610d59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610396565b610d61611571565b6040805160c0810182528a8152602081018a905260ff8916918101919091526060810187905267ffffffffffffffff8616608082015260a081018590525b60065415610f5457600654600090610db990600190612500565b9050600060068281548110610dd057610dd0612335565b60009182526020822001546007805473ffffffffffffffffffffffffffffffffffffffff90921693509084908110610e0a57610e0a612335565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff85811684526005909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811690915592909116808452922080549091169055600680549192509080610e8a57610e8a612517565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190556007805480610ef357610ef3612517565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905501905550610d9f915050565b60005b8151518110156113bb5760006005600084600001518481518110610f7d57610f7d612335565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff166002811115610fc757610fc7612401565b1461102e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610396565b6040805180820190915260ff8216815260016020820152825180516005916000918590811061105f5761105f612335565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000161761010083600281111561110057611100612401565b0217905550600091506111109050565b600560008460200151848151811061112a5761112a612335565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff16600281111561117457611174612401565b146111db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610396565b6040805180820190915260ff82168152602081016002815250600560008460200151848151811061120e5761120e612335565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016176101008360028111156112af576112af612401565b0217905550508251805160069250839081106112cd576112cd612335565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909316929092179091558201518051600791908390811061134957611349612335565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055806113b38161245c565b915050610f57565b506040810151600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600480547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff43811682029283178555908304811693600193909260009261144d928692908216911617612546565b92506101000a81548163ffffffff021916908363ffffffff1602179055506114ac4630600460009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a00151611863565b6002819055825180516003805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90921691909117905560045460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e059861154b988b98919763ffffffff90921696909591949193919261256e565b60405180910390a15050505050505050505050565b611568611571565b610b3f8161190e565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610396565b565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611681908490611a03565b505050565b60008180602001905181019061169c919061284b565b905060005b81518110156117a55760008282815181106116be576116be612335565b6020908102919091018101516040808201518151808301835283518152838501519481019490945260085491517f3b8d08ef00000000000000000000000000000000000000000000000000000000815292945073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001693633b8d08ef9361175f9360ff1690600401612a4f565b600060405180830381600087803b15801561177957600080fd5b505af115801561178d573d6000803e3d6000fd5b5050505050808061179d9061245c565b9150506116a1565b5050505050565b60006117b98260206124c3565b6117c48560206124c3565b6117d088610144612bd5565b6117da9190612bd5565b6117e49190612bd5565b6117ef906000612bd5565b905036811461185a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f63616c6c64617461206c656e677468206d69736d6174636800000000000000006044820152606401610396565b50505050505050565b6000808a8a8a8a8a8a8a8a8a60405160200161188799989796959493929190612bed565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff82160361198d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610396565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000611a65826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b0f9092919063ffffffff16565b8051909150156116815780806020019051810190611a839190612c82565b611681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610396565b6060611b1e8484600085611b28565b90505b9392505050565b606082471015611bba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610396565b843b611c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610396565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c4b9190612c9f565b60006040518083038185875af1925050503d8060008114611c88576040519150601f19603f3d011682016040523d82523d6000602084013e611c8d565b606091505b5091509150611c9d828286611caa565b925050505b949350505050565b60608315611cb9575081611b21565b825115611cc95782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103969190611d96565b604051806103e00160405280601f906020820280368337509192915050565b60005b83811015611d37578181015183820152602001611d1f565b83811115611d46576000848401525b50505050565b60008151808452611d64816020860160208601611d1c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611b216020830184611d4c565b73ffffffffffffffffffffffffffffffffffffffff81168114610b3f57600080fd5b600080600060608486031215611de057600080fd5b8335611deb81611da9565b92506020840135611dfb81611da9565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015611e5257815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611e20565b509495945050505050565b602081526000611b216020830184611e0c565b60008083601f840112611e8257600080fd5b50813567ffffffffffffffff811115611e9a57600080fd5b6020830191508360208260051b8501011115611eb557600080fd5b9250929050565b60008060008060008060008060e0898b031215611ed857600080fd5b606089018a811115611ee957600080fd5b8998503567ffffffffffffffff80821115611f0357600080fd5b818b0191508b601f830112611f1757600080fd5b813581811115611f2657600080fd5b8c6020828501011115611f3857600080fd5b6020830199508098505060808b0135915080821115611f5657600080fd5b611f628c838d01611e70565b909750955060a08b0135915080821115611f7b57600080fd5b50611f888b828c01611e70565b999c989b50969995989497949560c00135949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611ff357611ff3611fa1565b60405290565b60405160e0810167ffffffffffffffff81118282101715611ff357611ff3611fa1565b6040516060810167ffffffffffffffff81118282101715611ff357611ff3611fa1565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561208657612086611fa1565b604052919050565b600067ffffffffffffffff8211156120a8576120a8611fa1565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126120e557600080fd5b81356120f86120f38261208e565b61203f565b81815284602083860101111561210d57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561213c57600080fd5b813567ffffffffffffffff81111561215357600080fd5b611ca2848285016120d4565b8015158114610b3f57600080fd5b60006020828403121561217f57600080fd5b8135611b218161215f565b600067ffffffffffffffff8211156121a4576121a4611fa1565b5060051b60200190565b600082601f8301126121bf57600080fd5b813560206121cf6120f38361218a565b82815260059290921b840181019181810190868411156121ee57600080fd5b8286015b8481101561221257803561220581611da9565b83529183019183016121f2565b509695505050505050565b803560ff8116811461222e57600080fd5b919050565b803567ffffffffffffffff8116811461222e57600080fd5b60008060008060008060c0878903121561226457600080fd5b863567ffffffffffffffff8082111561227c57600080fd5b6122888a838b016121ae565b9750602089013591508082111561229e57600080fd5b6122aa8a838b016121ae565b96506122b860408a0161221d565b955060608901359150808211156122ce57600080fd5b6122da8a838b016120d4565b94506122e860808a01612233565b935060a08901359150808211156122fe57600080fd5b5061230b89828a016120d4565b9150509295509295509295565b60006020828403121561232a57600080fd5b8135611b2181611da9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff84168060ff038211156123b0576123b0612364565b019392505050565b600060ff8316806123f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8183823760009101908152919050565b8281526060826020830137600060809190910190815292915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361248d5761248d612364565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124fb576124fb612364565b500290565b60008282101561251257612512612364565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600063ffffffff80831681851680830382111561256557612565612364565b01949350505050565b600061012063ffffffff808d1684528b6020850152808b1660408501525080606084015261259e8184018a611e0c565b905082810360808401526125b28189611e0c565b905060ff871660a084015282810360c08401526125cf8187611d4c565b905067ffffffffffffffff851660e08401528281036101008401526125f48185611d4c565b9c9b505050505050505050505050565b805161222e81611da9565b600082601f83011261262057600080fd5b815160206126306120f38361218a565b82815260059290921b8401810191818101908684111561264f57600080fd5b8286015b8481101561221257805161266681611da9565b8352918301918301612653565b600082601f83011261268457600080fd5b815160206126946120f38361218a565b82815260059290921b840181019181810190868411156126b357600080fd5b8286015b8481101561221257805183529183019183016126b7565b600082601f8301126126df57600080fd5b81516126ed6120f38261208e565b81815284602083860101111561270257600080fd5b611ca2826020830160208701611d1c565b60006080828403121561272557600080fd5b61272d611fd0565b90508151815260208201516020820152604082015161274b81611da9565b6040820152606082015167ffffffffffffffff8082111561276b57600080fd5b9083019060e0828603121561277f57600080fd5b612787611ff9565b82518281111561279657600080fd5b6127a28782860161260f565b8252506020830151828111156127b757600080fd5b6127c387828601612673565b602083015250604083015160408201526127df60608401612604565b60608201526127f060808401612604565b608082015260a08301518281111561280757600080fd5b612813878286016126ce565b60a08301525060c08301518281111561282b57600080fd5b612837878286016126ce565b60c083015250606084015250909392505050565b6000602080838503121561285e57600080fd5b825167ffffffffffffffff8082111561287657600080fd5b818501915085601f83011261288a57600080fd5b81516128986120f38261218a565b81815260059190911b830184019084810190888311156128b757600080fd5b8585015b838110156129c2578051858111156128d257600080fd5b86016060818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001121561290657600080fd5b61290e61201c565b888201518781111561291f57600080fd5b8201603f81018d1361293057600080fd5b898101516129406120f38261218a565b81815260059190911b8201604001908b8101908f83111561296057600080fd5b6040840193505b828410156129805783518252928c0192908c0190612967565b84525050506040820151898201526060820151878111156129a057600080fd5b6129ae8d8b83860101612713565b6040830152508452509186019186016128bb565b5098975050505050505050565b600081518084526020808501945080840160005b83811015611e52578151875295820195908201906001016129e3565b805160408084528151908401819052600091602091908201906060860190845b81811015612a3b57835183529284019291840191600101612a1f565b505093820151949091019390935250919050565b606081528351606082015260006020808601516080840152604086015173ffffffffffffffffffffffffffffffffffffffff80821660a086015260608801519150608060c08601526101c08501825160e0808801528181518084526101e0890191508683019350600092505b80831015612add57835185168252928601926001929092019190860190612abb565b508585015193507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2092508288820301610100890152612b1c81856129cf565b9350505060408301516101208701526060830151612b5361014088018273ffffffffffffffffffffffffffffffffffffffff169052565b50608083015173ffffffffffffffffffffffffffffffffffffffff1661016087015260a08301518683038201610180880152612b8f8382611d4c565b92505060c0830151925080868303016101a087015250612baf8183611d4c565b91505083810382850152612bc381876129ff565b92505050611ca2604083018415159052565b60008219821115612be857612be8612364565b500190565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b166040850152816060850152612c348285018b611e0c565b91508382036080850152612c48828a611e0c565b915060ff881660a085015283820360c0850152612c658288611d4c565b90861660e085015283810361010085015290506125f48185611d4c565b600060208284031215612c9457600080fd5b8151611b218161215f565b60008251612cb1818460208701611d1c565b919091019291505056fea164736f6c634300080d000a",
}

var MessageExecutorHelperABI = MessageExecutorHelperMetaData.ABI

var MessageExecutorHelperBin = MessageExecutorHelperMetaData.Bin

func DeployMessageExecutorHelper(auth *bind.TransactOpts, backend bind.ContractBackend, offRamp common.Address, needFee bool) (common.Address, *types.Transaction, *MessageExecutorHelper, error) {
	parsed, err := MessageExecutorHelperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MessageExecutorHelperBin), backend, offRamp, needFee)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MessageExecutorHelper{MessageExecutorHelperCaller: MessageExecutorHelperCaller{contract: contract}, MessageExecutorHelperTransactor: MessageExecutorHelperTransactor{contract: contract}, MessageExecutorHelperFilterer: MessageExecutorHelperFilterer{contract: contract}}, nil
}

type MessageExecutorHelper struct {
	address common.Address
	abi     abi.ABI
	MessageExecutorHelperCaller
	MessageExecutorHelperTransactor
	MessageExecutorHelperFilterer
}

type MessageExecutorHelperCaller struct {
	contract *bind.BoundContract
}

type MessageExecutorHelperTransactor struct {
	contract *bind.BoundContract
}

type MessageExecutorHelperFilterer struct {
	contract *bind.BoundContract
}

type MessageExecutorHelperSession struct {
	Contract     *MessageExecutorHelper
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type MessageExecutorHelperCallerSession struct {
	Contract *MessageExecutorHelperCaller
	CallOpts bind.CallOpts
}

type MessageExecutorHelperTransactorSession struct {
	Contract     *MessageExecutorHelperTransactor
	TransactOpts bind.TransactOpts
}

type MessageExecutorHelperRaw struct {
	Contract *MessageExecutorHelper
}

type MessageExecutorHelperCallerRaw struct {
	Contract *MessageExecutorHelperCaller
}

type MessageExecutorHelperTransactorRaw struct {
	Contract *MessageExecutorHelperTransactor
}

func NewMessageExecutorHelper(address common.Address, backend bind.ContractBackend) (*MessageExecutorHelper, error) {
	abi, err := abi.JSON(strings.NewReader(MessageExecutorHelperABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindMessageExecutorHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelper{address: address, abi: abi, MessageExecutorHelperCaller: MessageExecutorHelperCaller{contract: contract}, MessageExecutorHelperTransactor: MessageExecutorHelperTransactor{contract: contract}, MessageExecutorHelperFilterer: MessageExecutorHelperFilterer{contract: contract}}, nil
}

func NewMessageExecutorHelperCaller(address common.Address, caller bind.ContractCaller) (*MessageExecutorHelperCaller, error) {
	contract, err := bindMessageExecutorHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperCaller{contract: contract}, nil
}

func NewMessageExecutorHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*MessageExecutorHelperTransactor, error) {
	contract, err := bindMessageExecutorHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperTransactor{contract: contract}, nil
}

func NewMessageExecutorHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*MessageExecutorHelperFilterer, error) {
	contract, err := bindMessageExecutorHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperFilterer{contract: contract}, nil
}

func bindMessageExecutorHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MessageExecutorHelperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageExecutorHelper.Contract.MessageExecutorHelperCaller.contract.Call(opts, result, method, params...)
}

func (_MessageExecutorHelper *MessageExecutorHelperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.MessageExecutorHelperTransactor.contract.Transfer(opts)
}

func (_MessageExecutorHelper *MessageExecutorHelperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.MessageExecutorHelperTransactor.contract.Transact(opts, method, params...)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageExecutorHelper.Contract.contract.Call(opts, result, method, params...)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.contract.Transfer(opts)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.contract.Transact(opts, method, params...)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) GetNeedFee(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "getNeedFee")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) GetNeedFee() (bool, error) {
	return _MessageExecutorHelper.Contract.GetNeedFee(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) GetNeedFee() (bool, error) {
	return _MessageExecutorHelper.Contract.GetNeedFee(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) GetOffRamp(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "getOffRamp")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) GetOffRamp() (common.Address, error) {
	return _MessageExecutorHelper.Contract.GetOffRamp(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) GetOffRamp() (common.Address, error) {
	return _MessageExecutorHelper.Contract.GetOffRamp(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _MessageExecutorHelper.Contract.LatestConfigDetails(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _MessageExecutorHelper.Contract.LatestConfigDetails(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _MessageExecutorHelper.Contract.LatestConfigDigestAndEpoch(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _MessageExecutorHelper.Contract.LatestConfigDigestAndEpoch(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) Owner() (common.Address, error) {
	return _MessageExecutorHelper.Contract.Owner(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) Owner() (common.Address, error) {
	return _MessageExecutorHelper.Contract.Owner(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) Transmitters() ([]common.Address, error) {
	return _MessageExecutorHelper.Contract.Transmitters(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) Transmitters() ([]common.Address, error) {
	return _MessageExecutorHelper.Contract.Transmitters(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MessageExecutorHelper.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_MessageExecutorHelper *MessageExecutorHelperSession) TypeAndVersion() (string, error) {
	return _MessageExecutorHelper.Contract.TypeAndVersion(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperCallerSession) TypeAndVersion() (string, error) {
	return _MessageExecutorHelper.Contract.TypeAndVersion(&_MessageExecutorHelper.CallOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "acceptOwnership")
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) AcceptOwnership() (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.AcceptOwnership(&_MessageExecutorHelper.TransactOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.AcceptOwnership(&_MessageExecutorHelper.TransactOpts)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) Report(opts *bind.TransactOpts, executableMessages []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "report", executableMessages)
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) Report(executableMessages []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.Report(&_MessageExecutorHelper.TransactOpts, executableMessages)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) Report(executableMessages []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.Report(&_MessageExecutorHelper.TransactOpts, executableMessages)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "setConfig", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.SetConfig(&_MessageExecutorHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.SetConfig(&_MessageExecutorHelper.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) SetNeedFee(opts *bind.TransactOpts, flag bool) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "setNeedFee", flag)
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) SetNeedFee(flag bool) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.SetNeedFee(&_MessageExecutorHelper.TransactOpts, flag)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) SetNeedFee(flag bool) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.SetNeedFee(&_MessageExecutorHelper.TransactOpts, flag)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "transferOwnership", to)
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.TransferOwnership(&_MessageExecutorHelper.TransactOpts, to)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.TransferOwnership(&_MessageExecutorHelper.TransactOpts, to)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.Transmit(&_MessageExecutorHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.Transmit(&_MessageExecutorHelper.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactor) WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MessageExecutorHelper.contract.Transact(opts, "withdrawAccumulatedFees", feeToken, recipient, amount)
}

func (_MessageExecutorHelper *MessageExecutorHelperSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.WithdrawAccumulatedFees(&_MessageExecutorHelper.TransactOpts, feeToken, recipient, amount)
}

func (_MessageExecutorHelper *MessageExecutorHelperTransactorSession) WithdrawAccumulatedFees(feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MessageExecutorHelper.Contract.WithdrawAccumulatedFees(&_MessageExecutorHelper.TransactOpts, feeToken, recipient, amount)
}

type MessageExecutorHelperConfigSetIterator struct {
	Event *MessageExecutorHelperConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorHelperConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorHelperConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorHelperConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorHelperConfigSetIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorHelperConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorHelperConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) FilterConfigSet(opts *bind.FilterOpts) (*MessageExecutorHelperConfigSetIterator, error) {

	logs, sub, err := _MessageExecutorHelper.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperConfigSetIterator{contract: _MessageExecutorHelper.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperConfigSet) (event.Subscription, error) {

	logs, sub, err := _MessageExecutorHelper.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorHelperConfigSet)
				if err := _MessageExecutorHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) ParseConfigSet(log types.Log) (*MessageExecutorHelperConfigSet, error) {
	event := new(MessageExecutorHelperConfigSet)
	if err := _MessageExecutorHelper.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorHelperFeesWithdrawnIterator struct {
	Event *MessageExecutorHelperFeesWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorHelperFeesWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorHelperFeesWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorHelperFeesWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorHelperFeesWithdrawnIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorHelperFeesWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorHelperFeesWithdrawn struct {
	FeeToken  common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) FilterFeesWithdrawn(opts *bind.FilterOpts) (*MessageExecutorHelperFeesWithdrawnIterator, error) {

	logs, sub, err := _MessageExecutorHelper.contract.FilterLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperFeesWithdrawnIterator{contract: _MessageExecutorHelper.contract, event: "FeesWithdrawn", logs: logs, sub: sub}, nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperFeesWithdrawn) (event.Subscription, error) {

	logs, sub, err := _MessageExecutorHelper.contract.WatchLogs(opts, "FeesWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorHelperFeesWithdrawn)
				if err := _MessageExecutorHelper.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) ParseFeesWithdrawn(log types.Log) (*MessageExecutorHelperFeesWithdrawn, error) {
	event := new(MessageExecutorHelperFeesWithdrawn)
	if err := _MessageExecutorHelper.contract.UnpackLog(event, "FeesWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorHelperOwnershipTransferRequestedIterator struct {
	Event *MessageExecutorHelperOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorHelperOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorHelperOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorHelperOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorHelperOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorHelperOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorHelperOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorHelperOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutorHelper.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperOwnershipTransferRequestedIterator{contract: _MessageExecutorHelper.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutorHelper.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorHelperOwnershipTransferRequested)
				if err := _MessageExecutorHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) ParseOwnershipTransferRequested(log types.Log) (*MessageExecutorHelperOwnershipTransferRequested, error) {
	event := new(MessageExecutorHelperOwnershipTransferRequested)
	if err := _MessageExecutorHelper.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorHelperOwnershipTransferredIterator struct {
	Event *MessageExecutorHelperOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorHelperOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorHelperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorHelperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorHelperOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorHelperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorHelperOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorHelperOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutorHelper.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperOwnershipTransferredIterator{contract: _MessageExecutorHelper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MessageExecutorHelper.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorHelperOwnershipTransferred)
				if err := _MessageExecutorHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) ParseOwnershipTransferred(log types.Log) (*MessageExecutorHelperOwnershipTransferred, error) {
	event := new(MessageExecutorHelperOwnershipTransferred)
	if err := _MessageExecutorHelper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type MessageExecutorHelperTransmittedIterator struct {
	Event *MessageExecutorHelperTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *MessageExecutorHelperTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageExecutorHelperTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(MessageExecutorHelperTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *MessageExecutorHelperTransmittedIterator) Error() error {
	return it.fail
}

func (it *MessageExecutorHelperTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type MessageExecutorHelperTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) FilterTransmitted(opts *bind.FilterOpts) (*MessageExecutorHelperTransmittedIterator, error) {

	logs, sub, err := _MessageExecutorHelper.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &MessageExecutorHelperTransmittedIterator{contract: _MessageExecutorHelper.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperTransmitted) (event.Subscription, error) {

	logs, sub, err := _MessageExecutorHelper.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(MessageExecutorHelperTransmitted)
				if err := _MessageExecutorHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_MessageExecutorHelper *MessageExecutorHelperFilterer) ParseTransmitted(log types.Log) (*MessageExecutorHelperTransmitted, error) {
	event := new(MessageExecutorHelperTransmitted)
	if err := _MessageExecutorHelper.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_MessageExecutorHelper *MessageExecutorHelper) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _MessageExecutorHelper.abi.Events["ConfigSet"].ID:
		return _MessageExecutorHelper.ParseConfigSet(log)
	case _MessageExecutorHelper.abi.Events["FeesWithdrawn"].ID:
		return _MessageExecutorHelper.ParseFeesWithdrawn(log)
	case _MessageExecutorHelper.abi.Events["OwnershipTransferRequested"].ID:
		return _MessageExecutorHelper.ParseOwnershipTransferRequested(log)
	case _MessageExecutorHelper.abi.Events["OwnershipTransferred"].ID:
		return _MessageExecutorHelper.ParseOwnershipTransferred(log)
	case _MessageExecutorHelper.abi.Events["Transmitted"].ID:
		return _MessageExecutorHelper.ParseTransmitted(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (MessageExecutorHelperConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (MessageExecutorHelperFeesWithdrawn) Topic() common.Hash {
	return common.HexToHash("0x5e110f8bc8a20b65dcc87f224bdf1cc039346e267118bae2739847f07321ffa8")
}

func (MessageExecutorHelperOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (MessageExecutorHelperOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (MessageExecutorHelperTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (_MessageExecutorHelper *MessageExecutorHelper) Address() common.Address {
	return _MessageExecutorHelper.address
}

type MessageExecutorHelperInterface interface {
	GetNeedFee(opts *bind.CallOpts) (bool, error)

	GetOffRamp(opts *bind.CallOpts) (common.Address, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Report(opts *bind.TransactOpts, executableMessages []byte) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	SetNeedFee(opts *bind.TransactOpts, flag bool) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	WithdrawAccumulatedFees(opts *bind.TransactOpts, feeToken common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*MessageExecutorHelperConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*MessageExecutorHelperConfigSet, error)

	FilterFeesWithdrawn(opts *bind.FilterOpts) (*MessageExecutorHelperFeesWithdrawnIterator, error)

	WatchFeesWithdrawn(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperFeesWithdrawn) (event.Subscription, error)

	ParseFeesWithdrawn(log types.Log) (*MessageExecutorHelperFeesWithdrawn, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorHelperOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*MessageExecutorHelperOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MessageExecutorHelperOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*MessageExecutorHelperOwnershipTransferred, error)

	FilterTransmitted(opts *bind.FilterOpts) (*MessageExecutorHelperTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *MessageExecutorHelperTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*MessageExecutorHelperTransmitted, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

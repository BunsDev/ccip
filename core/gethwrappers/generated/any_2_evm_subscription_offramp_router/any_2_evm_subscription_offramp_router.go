// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package any_2_evm_subscription_offramp_router

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type CCIPAny2EVMMessageFromSender struct {
	SourceChainId *big.Int
	Sender        []byte
	Receiver      common.Address
	Data          []byte
	DestTokens    []common.Address
	DestPools     []common.Address
	Amounts       []*big.Int
	GasLimit      *big.Int
}

type SubscriptionInterfaceOffRampSubscription struct {
	Senders          []common.Address
	Receiver         common.Address
	StrictSequencing bool
	Balance          *big.Int
}

type SubscriptionInterfaceSubscriptionConfig struct {
	SetSubscriptionSenderDelay uint32
	WithdrawalDelay            uint32
	FeeToken                   common.Address
}

var Any2EVMSubscriptionOffRampRouterMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface[]\",\"name\":\"offRamps\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"setSubscriptionSenderDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"withdrawalDelay\",\"type\":\"uint32\"},{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"}],\"internalType\":\"structSubscriptionInterface.SubscriptionConfig\",\"name\":\"subscriptionConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"got\",\"type\":\"address\"}],\"name\":\"AddressMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"AlreadyConfigured\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"}],\"name\":\"AmountMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedBy\",\"type\":\"uint256\"}],\"name\":\"DelayNotPassedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingAmountNotPositive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MustCallFromOffRamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOffRampsConfigured\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"OffRampNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscriptionAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SubscriptionNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newSenders\",\"type\":\"address[]\"}],\"name\":\"NewSendersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"OffRampAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"OffRampRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newSenders\",\"type\":\"address[]\"}],\"name\":\"PreparedSetSenders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PreparedWithdrawalRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalProcessed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"addOffRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"chargeSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"contractSubscriptionManagerInterface\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"strictSequencing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"structSubscriptionInterface.OffRampSubscription\",\"name\":\"subscription\",\"type\":\"tuple\"}],\"name\":\"createSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOffRamps\",\"outputs\":[{\"internalType\":\"contractBaseOffRampInterface[]\",\"name\":\"offRamps\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getSubscription\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"contractSubscriptionManagerInterface\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"strictSequencing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"structSubscriptionInterface.OffRampSubscription\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"setSubscriptionSenderDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"withdrawalDelay\",\"type\":\"uint32\"},{\"internalType\":\"contractIERC20\",\"name\":\"feeToken\",\"type\":\"address\"}],\"internalType\":\"structSubscriptionInterface.SubscriptionConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokensForExecutionFee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"isOffRamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"newSenders\",\"type\":\"address[]\"}],\"name\":\"prepareSetSubscriptionSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"prepareWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractBaseOffRampInterface\",\"name\":\"offRamp\",\"type\":\"address\"}],\"name\":\"removeOffRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"destTokens\",\"type\":\"address[]\"},{\"internalType\":\"contractPoolInterface[]\",\"name\":\"destPools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"internalType\":\"structCCIP.Any2EVMMessageFromSender\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"routeMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"newSenders\",\"type\":\"address[]\"}],\"name\":\"setSubscriptionSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162002ba438038062002ba483398101604081905262000034916200041f565b808233806000816200008d5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000c057620000c081620001fc565b50508151620000d891506003906020840190620002a7565b5060005b815181101562000192576040518060400160405280826001600160601b031681526020016001151581525060026000848481518110620001205762000120620004f2565b6020908102919091018101516001600160a01b031682528181019290925260400160002082518154939092015115156c01000000000000000000000000026001600160681b03199093166001600160601b03909216919091179190911790556200018a8162000508565b9050620000dc565b505080516004805460208401516040909401516001600160a01b03166801000000000000000002600160401b600160e01b031963ffffffff958616640100000000026001600160401b03199093169590941694909417179190911691909117905550620005309050565b336001600160a01b03821603620002565760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000084565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b828054828255906000526020600020908101928215620002ff579160200282015b82811115620002ff57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002c8565b506200030d92915062000311565b5090565b5b808211156200030d576000815560010162000312565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000369576200036962000328565b604052919050565b6001600160a01b03811681146200038757600080fd5b50565b805163ffffffff811681146200039f57600080fd5b919050565b600060608284031215620003b757600080fd5b604051606081016001600160401b0381118282101715620003dc57620003dc62000328565b604052905080620003ed836200038a565b8152620003fd602084016200038a565b60208201526040830151620004128162000371565b6040919091015292915050565b600080608083850312156200043357600080fd5b82516001600160401b03808211156200044b57600080fd5b818501915085601f8301126200046057600080fd5b815160208282111562000477576200047762000328565b8160051b92506200048a8184016200033e565b8281529284018101928181019089851115620004a557600080fd5b948201945b84861015620004d35785519350620004c28462000371565b8382529482019490820190620004aa565b9650620004e5905088888301620003a4565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200052957634e487b7160e01b600052601160045260246000fd5b5060010190565b61266480620005406000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806379ba5097116100cd578063adb9f71b11610081578063df4771a011610066578063df4771a01461038f578063df6732e5146103a2578063f2fde38b146103b757600080fd5b8063adb9f71b14610364578063ca709a251461037757600080fd5b8063991f6543116100b2578063991f654314610329578063a40e69c71461033c578063a42d64561461035157600080fd5b806379ba5097146102fc5780638da5cb5b1461030457600080fd5b80633c5457ce116101245780635c9fa11e116101095780635c9fa11e1461024057806360003140146102535780637187582c146102e957600080fd5b80633c5457ce1461021a5780635a6b26ba1461022d57600080fd5b8063181f5a7711610155578063181f5a77146101af5780631d7a74a0146101c4578063294d26611461020757600080fd5b8063063a42ca146101715780630cbebc2414610186575b600080fd5b61018461017f366004611e9b565b6103ca565b005b610199610194366004611eeb565b610507565b6040516101a69190611f08565b60405180910390f35b6101b76105d9565b6040516101a69190611fed565b6101f76101d2366004611eeb565b6001600160a01b0316600090815260026020526040902054600160601b900460ff1690565b60405190151581526020016101a6565b610184610215366004612000565b6105f5565b610184610228366004612041565b6107af565b61018461023b366004612041565b61087e565b6101f761024e36600461206d565b610aa5565b6102b36040805160608101825260008082526020820181905291810191909152506040805160608101825260045463ffffffff80821683526401000000008204166020830152600160401b90046001600160a01b03169181019190915290565b60408051825163ffffffff908116825260208085015190911690820152918101516001600160a01b0316908201526060016101a6565b6101846102f7366004612041565b610b9d565b610184610d01565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101a6565b610184610337366004611eeb565b610db2565b610344611051565b6040516101a691906120a9565b61018461035f366004612104565b6110b3565b610184610372366004611eeb565b6112a3565b600454600160401b90046001600160a01b0316610311565b61018461039d366004611e9b565b611443565b6103aa611701565b6040516101a69190612204565b6101846103c5366004611eeb565b61176c565b816000819050336001600160a01b0316816001600160a01b031663e2a92e286040518163ffffffff1660e01b8152600401602060405180830381865afa158015610418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043c9190612217565b6001600160a01b03161461046357604051631a7387bd60e11b815260040160405180910390fd5b6040805180820190915283815260045460208201906104889063ffffffff164261224a565b90526001600160a01b03851660009081526007602090815260409091208251805191926104ba92849290910190611cd9565b50602082015181600101559050507f4f10955bde606944bdd0299e5dfc28b0f1924777b49efc5cba32e8f2090d153584846040516104f9929190612262565b60405180910390a150505050565b60408051608080820183526060808352600060208085018290528486018290529184018190526001600160a01b03861681526005825284902084518154928302810160a09081019096529283018281529394929390928492849184018282801561059a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161057c575b505050918352505060018201546001600160a01b0381166020830152600160a01b900460ff161515604082015260029091015460609091015292915050565b6040518060600160405280602681526020016126326026913981565b33600081815260026020526040902054600160601b900460ff16610633576040516351645fdb60e11b81523360048201526024015b60405180910390fd5b6001600160a01b03841660009081526005602090815260408083208054825181850281018501909352808352919290919083018282801561069d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161067f575b5050505050905060005b815181101561076b57846001600160a01b03168282815181106106cc576106cc612284565b60200260200101516001600160a01b03160361075b576001600160a01b0386166000908152600560205260408120600201805486929061070d90849061229a565b9091555050604080516001600160a01b0388168152602081018690527f6de812ac52f2e762c18dd0b2737a440548066df1c7e99ac4de0242490dc65c1a910160405180910390a150506107a9565b610764816122b1565b90506106a7565b506040517fd0d259760000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015260240161062a565b50505050565b600081116107e9576040517f7271534300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166000908152600560205260408120600201805483929061081490849061224a565b909155505060045461083890600160401b90046001600160a01b0316333084611780565b604080516001600160a01b0384168152602081018390527fc89bca949929d103fee7b5eae37fdafa6f82a94463c8e9ea2ec5c6b488705680910160405180910390a15050565b816000819050336001600160a01b0316816001600160a01b031663e2a92e286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190612217565b6001600160a01b03161461091757604051631a7387bd60e11b815260040160405180910390fd5b6001600160a01b03841660009081526006602090815260409182902082518084019093528054835260010154908201819052421015610971578060200151604051631e5be69160e11b815260040161062a91815260200190565b805184146109b85780516040517fce6b173b00000000000000000000000000000000000000000000000000000000815260048101919091526024810185905260440161062a565b6001600160a01b0385166000908152600560205260409020600201548411156109f4576040516351940b3960e11b815260040160405180910390fd5b6001600160a01b03851660009081526005602052604081206002018054869290610a1f90849061229a565b90915550506001600160a01b03808616600090815260066020526040812081815560010155600454610a5b91600160401b909104163386611831565b604080516001600160a01b0387168152602081018690527f5abb0fc89def2ee3226cc48f5621ee8e2b45f6dcc7898d2bdb5d480533c32bc091015b60405180910390a15050505050565b33600081815260026020526040812054909190600160601b900460ff16610ae1576040516351645fdb60e11b815233600482015260240161062a565b6000610af4610aef856123f9565b61187f565b9050600063a0c6df1560e01b82604051602401610b11919061252c565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529150610b949060e087013590610b8c9060608901908901611eeb565b600084611912565b95945050505050565b816000819050336001600160a01b0316816001600160a01b031663e2a92e286040518163ffffffff1660e01b8152600401602060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190612217565b6001600160a01b031614610c3657604051631a7387bd60e11b815260040160405180910390fd5b6001600160a01b038416600090815260056020526040902060020154831115610c72576040516351940b3960e11b815260040160405180910390fd5b604080518082019091528381526004546020820190610c9f90640100000000900463ffffffff164261224a565b90526001600160a01b038516600081815260066020908152604091829020845181559381015160019094019390935580519182529181018590527fb976e2b8f72c52b734124f2e5a8d614db599027ea97d5a815f9ec68273f7a84391016104f9565b6001546001600160a01b03163314610d5b5760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015260640161062a565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610dba61195e565b6003546000819003610df8576040517f22babb3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166000908152600260209081526040918290208251808401909352546bffffffffffffffffffffffff81168352600160601b900460ff161515908201819052610e81576040517f8c97f1220000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260240161062a565b60006003610e9060018561229a565b81548110610ea057610ea0612284565b6000918252602090912001548251600380546001600160a01b039093169350916bffffffffffffffffffffffff909116908110610edf57610edf612284565b6000918252602090912001546001600160a01b03166003610f0160018661229a565b81548110610f1157610f11612284565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600383600001516bffffffffffffffffffffffff1681548110610f6557610f65612284565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905584519284168252600290526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff9092169190911790556003805480610fd457610fd46125e2565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0386168083526002909152604080832080546cffffffffffffffffffffffffff191690555190917fcf91daec21e3510e2f2aea4b09d08c235d5c6844980be709f282ef591dbf420c91a250505050565b606060038054806020026020016040519081016040528092919081815260200182805480156110a957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161108b575b5050505050905090565b80602001516000819050336001600160a01b0316816001600160a01b031663e2a92e286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111299190612217565b6001600160a01b03161461115057604051631a7387bd60e11b815260040160405180910390fd5b6020808401516001600160a01b0380821660009081526005909352604090922060010154909116156111ae576040517f772237bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03811660009081526005602090815260409091208551805187936111dd928492910190611cd9565b50602082015160018201805460408501511515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009091166001600160a01b03909316929092179190911790556060918201516002909101558401511561126a57606084015160045461126a91600160401b9091046001600160a01b03169033903090611780565b6040516001600160a01b03821681527f4c3772ba36cf4592752f1ac765a5b6e391753813c11b97d12769fcbea359cc35906020016104f9565b6112ab61195e565b6001600160a01b0381166112eb576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166000908152600260209081526040918290208251808401909352546bffffffffffffffffffffffff81168352600160601b900460ff1615801591830191909152611376576040517f3a4406b50000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240161062a565b60016020808301828152600380546bffffffffffffffffffffffff90811686526001600160a01b0387166000818152600290955260408086208851815496511515600160601b026cffffffffffffffffffffffffff1990971694169390931794909417909155815494850182559083527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90930180546001600160a01b03191684179055517f78f53b26906785548b265fa08f4197f9f3fff73fe0d504d30400aacb527f4ce09190a25050565b816000819050336001600160a01b0316816001600160a01b031663e2a92e286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b59190612217565b6001600160a01b0316146114dc57604051631a7387bd60e11b815260040160405180910390fd5b6001600160a01b038416600090815260076020908152604080832081518154606094810282018501845292810183815290939192849284919084018282801561154e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611530575b5050505050815260200160018201548152505090504281602001511115611590578060200151604051631e5be69160e11b815260040161062a91815260200190565b60005b84518110156116785781518051829081106115b0576115b0612284565b60200260200101516001600160a01b03168582815181106115d3576115d3612284565b60200260200101516001600160a01b0316146116685781518051829081106115fd576115fd612284565b602002602001015185828151811061161757611617612284565b60200260200101516040517f1f73225f00000000000000000000000000000000000000000000000000000000815260040161062a9291906001600160a01b0392831681529116602082015260400190565b611671816122b1565b9050611593565b506001600160a01b038516600090815260056020908152604090912085516116a292870190611cd9565b506001600160a01b0385166000908152600760205260408120906116c68282611d3e565b600182016000905550507f790a6055b0430ecb86464910080949cd6cfead0d9ce2cc68a54f6ae1f144e02c8585604051610a96929190612262565b6040805160018082528183019092526060916000919060208083019080368337019050506004548151919250600160401b90046001600160a01b031690829060009061174f5761174f612284565b6001600160a01b0390921660209283029190910190910152919050565b61177461195e565b61177d816119ba565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526107a99085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611a63565b6040516001600160a01b03831660248201526044810182905261187a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016117cd565b505050565b6118b16040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b6040518060a001604052808360000151815260200183602001516040516020016118db9190611fed565b604051602081830303815290604052815260200183606001518152602001836080015181526020018360c001518152509050919050565b60005a61138881101561192457600080fd5b61138881039050856040820482031161193c57600080fd5b50833b61194857600080fd5b60008083516020850186888af195945050505050565b6000546001600160a01b031633146119b85760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161062a565b565b336001600160a01b03821603611a125760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161062a565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6000611ab8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b489092919063ffffffff16565b80519091501561187a5780806020019051810190611ad691906125f8565b61187a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161062a565b6060611b578484600085611b61565b90505b9392505050565b606082471015611bd95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161062a565b843b611c275760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161062a565b600080866001600160a01b03168587604051611c439190612615565b60006040518083038185875af1925050503d8060008114611c80576040519150601f19603f3d011682016040523d82523d6000602084013e611c85565b606091505b5091509150611c95828286611ca0565b979650505050505050565b60608315611caf575081611b5a565b825115611cbf5782518084602001fd5b8160405162461bcd60e51b815260040161062a9190611fed565b828054828255906000526020600020908101928215611d2e579160200282015b82811115611d2e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611cf9565b50611d3a929150611d58565b5090565b508054600082559060005260206000209081019061177d91905b5b80821115611d3a5760008155600101611d59565b6001600160a01b038116811461177d57600080fd5b8035611d8d81611d6d565b919050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611dcc57611dcc611d92565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611dfb57611dfb611d92565b604052919050565b600067ffffffffffffffff821115611e1d57611e1d611d92565b5060051b60200190565b600082601f830112611e3857600080fd5b81356020611e4d611e4883611e03565b611dd2565b82815260059290921b84018101918181019086841115611e6c57600080fd5b8286015b84811015611e90578035611e8381611d6d565b8352918301918301611e70565b509695505050505050565b60008060408385031215611eae57600080fd5b8235611eb981611d6d565b9150602083013567ffffffffffffffff811115611ed557600080fd5b611ee185828601611e27565b9150509250929050565b600060208284031215611efd57600080fd5b8135611b5a81611d6d565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b80831015611f565783516001600160a01b03168252928401926001929092019190840190611f2d565b506001600160a01b038488015116604087015260408701519350611f7e606087018515159052565b606087015160808701528094505050505092915050565b60005b83811015611fb0578181015183820152602001611f98565b838111156107a95750506000910152565b60008151808452611fd9816020860160208601611f95565b601f01601f19169290920160200192915050565b602081526000611b5a6020830184611fc1565b60008060006060848603121561201557600080fd5b833561202081611d6d565b9250602084013561203081611d6d565b929592945050506040919091013590565b6000806040838503121561205457600080fd5b823561205f81611d6d565b946020939093013593505050565b60006020828403121561207f57600080fd5b813567ffffffffffffffff81111561209657600080fd5b82016101008185031215611b5a57600080fd5b6020808252825182820181905260009190848201906040850190845b818110156120ea5783516001600160a01b0316835292840192918401916001016120c5565b50909695505050505050565b801515811461177d57600080fd5b60006020828403121561211657600080fd5b813567ffffffffffffffff8082111561212e57600080fd5b908301906080828603121561214257600080fd5b60405160808101818110838211171561215d5761215d611d92565b60405282358281111561216f57600080fd5b61217b87828601611e27565b8252506020830135915061218e82611d6d565b816020820152604083013591506121a4826120f6565b8160408201526060830135606082015280935050505092915050565b600081518084526020808501945080840160005b838110156121f95781516001600160a01b0316875295820195908201906001016121d4565b509495945050505050565b602081526000611b5a60208301846121c0565b60006020828403121561222957600080fd5b8151611b5a81611d6d565b634e487b7160e01b600052601160045260246000fd5b6000821982111561225d5761225d612234565b500190565b6001600160a01b0383168152604060208201526000611b5760408301846121c0565b634e487b7160e01b600052603260045260246000fd5b6000828210156122ac576122ac612234565b500390565b6000600182016122c3576122c3612234565b5060010190565b600082601f8301126122db57600080fd5b813567ffffffffffffffff8111156122f5576122f5611d92565b612308601f8201601f1916602001611dd2565b81815284602083860101111561231d57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261234b57600080fd5b8135602061235b611e4883611e03565b82815260059290921b8401810191818101908684111561237a57600080fd5b8286015b84811015611e9057803561239181611d6d565b835291830191830161237e565b600082601f8301126123af57600080fd5b813560206123bf611e4883611e03565b82815260059290921b840181019181810190868411156123de57600080fd5b8286015b84811015611e9057803583529183019183016123e2565b6000610100823603121561240c57600080fd5b612414611da8565b82358152602083013567ffffffffffffffff8082111561243357600080fd5b61243f368387016122ca565b602084015261245060408601611d82565b6040840152606085013591508082111561246957600080fd5b612475368387016122ca565b6060840152608085013591508082111561248e57600080fd5b61249a3683870161233a565b608084015260a08501359150808211156124b357600080fd5b6124bf3683870161233a565b60a084015260c08501359150808211156124d857600080fd5b506124e53682860161239e565b60c08301525060e092830135928101929092525090565b600081518084526020808501945080840160005b838110156121f957815187529582019590820190600101612510565b600060208083528351818401528084015160a0604085015261255160c0850182611fc1565b90506040850151601f198086840301606087015261256f8383611fc1565b6060880151878203830160808901528051808352908601945060009350908501905b808410156125ba5784516001600160a01b03168252938501936001939093019290850190612591565b5060808801519450818782030160a08801526125d681866124fc565b98975050505050505050565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561260a57600080fd5b8151611b5a816120f6565b60008251612627818460208701611f95565b919091019291505056fe416e793245564d537562736372697074696f6e4f666652616d70526f7574657220312e302e30a164736f6c634300080f000a",
}

var Any2EVMSubscriptionOffRampRouterABI = Any2EVMSubscriptionOffRampRouterMetaData.ABI

var Any2EVMSubscriptionOffRampRouterBin = Any2EVMSubscriptionOffRampRouterMetaData.Bin

func DeployAny2EVMSubscriptionOffRampRouter(auth *bind.TransactOpts, backend bind.ContractBackend, offRamps []common.Address, subscriptionConfig SubscriptionInterfaceSubscriptionConfig) (common.Address, *types.Transaction, *Any2EVMSubscriptionOffRampRouter, error) {
	parsed, err := Any2EVMSubscriptionOffRampRouterMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Any2EVMSubscriptionOffRampRouterBin), backend, offRamps, subscriptionConfig)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Any2EVMSubscriptionOffRampRouter{Any2EVMSubscriptionOffRampRouterCaller: Any2EVMSubscriptionOffRampRouterCaller{contract: contract}, Any2EVMSubscriptionOffRampRouterTransactor: Any2EVMSubscriptionOffRampRouterTransactor{contract: contract}, Any2EVMSubscriptionOffRampRouterFilterer: Any2EVMSubscriptionOffRampRouterFilterer{contract: contract}}, nil
}

type Any2EVMSubscriptionOffRampRouter struct {
	address common.Address
	abi     abi.ABI
	Any2EVMSubscriptionOffRampRouterCaller
	Any2EVMSubscriptionOffRampRouterTransactor
	Any2EVMSubscriptionOffRampRouterFilterer
}

type Any2EVMSubscriptionOffRampRouterCaller struct {
	contract *bind.BoundContract
}

type Any2EVMSubscriptionOffRampRouterTransactor struct {
	contract *bind.BoundContract
}

type Any2EVMSubscriptionOffRampRouterFilterer struct {
	contract *bind.BoundContract
}

type Any2EVMSubscriptionOffRampRouterSession struct {
	Contract     *Any2EVMSubscriptionOffRampRouter
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type Any2EVMSubscriptionOffRampRouterCallerSession struct {
	Contract *Any2EVMSubscriptionOffRampRouterCaller
	CallOpts bind.CallOpts
}

type Any2EVMSubscriptionOffRampRouterTransactorSession struct {
	Contract     *Any2EVMSubscriptionOffRampRouterTransactor
	TransactOpts bind.TransactOpts
}

type Any2EVMSubscriptionOffRampRouterRaw struct {
	Contract *Any2EVMSubscriptionOffRampRouter
}

type Any2EVMSubscriptionOffRampRouterCallerRaw struct {
	Contract *Any2EVMSubscriptionOffRampRouterCaller
}

type Any2EVMSubscriptionOffRampRouterTransactorRaw struct {
	Contract *Any2EVMSubscriptionOffRampRouterTransactor
}

func NewAny2EVMSubscriptionOffRampRouter(address common.Address, backend bind.ContractBackend) (*Any2EVMSubscriptionOffRampRouter, error) {
	abi, err := abi.JSON(strings.NewReader(Any2EVMSubscriptionOffRampRouterABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindAny2EVMSubscriptionOffRampRouter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouter{address: address, abi: abi, Any2EVMSubscriptionOffRampRouterCaller: Any2EVMSubscriptionOffRampRouterCaller{contract: contract}, Any2EVMSubscriptionOffRampRouterTransactor: Any2EVMSubscriptionOffRampRouterTransactor{contract: contract}, Any2EVMSubscriptionOffRampRouterFilterer: Any2EVMSubscriptionOffRampRouterFilterer{contract: contract}}, nil
}

func NewAny2EVMSubscriptionOffRampRouterCaller(address common.Address, caller bind.ContractCaller) (*Any2EVMSubscriptionOffRampRouterCaller, error) {
	contract, err := bindAny2EVMSubscriptionOffRampRouter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterCaller{contract: contract}, nil
}

func NewAny2EVMSubscriptionOffRampRouterTransactor(address common.Address, transactor bind.ContractTransactor) (*Any2EVMSubscriptionOffRampRouterTransactor, error) {
	contract, err := bindAny2EVMSubscriptionOffRampRouter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterTransactor{contract: contract}, nil
}

func NewAny2EVMSubscriptionOffRampRouterFilterer(address common.Address, filterer bind.ContractFilterer) (*Any2EVMSubscriptionOffRampRouterFilterer, error) {
	contract, err := bindAny2EVMSubscriptionOffRampRouter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterFilterer{contract: contract}, nil
}

func bindAny2EVMSubscriptionOffRampRouter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Any2EVMSubscriptionOffRampRouterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Any2EVMSubscriptionOffRampRouterCaller.contract.Call(opts, result, method, params...)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Any2EVMSubscriptionOffRampRouterTransactor.contract.Transfer(opts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Any2EVMSubscriptionOffRampRouterTransactor.contract.Transact(opts, method, params...)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Any2EVMSubscriptionOffRampRouter.Contract.contract.Call(opts, result, method, params...)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.contract.Transfer(opts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.contract.Transact(opts, method, params...)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) GetFeeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "getFeeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) GetFeeToken() (common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetFeeToken(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) GetFeeToken() (common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetFeeToken(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) GetOffRamps(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "getOffRamps")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) GetOffRamps() ([]common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetOffRamps(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) GetOffRamps() ([]common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetOffRamps(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) GetSubscription(opts *bind.CallOpts, receiver common.Address) (SubscriptionInterfaceOffRampSubscription, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "getSubscription", receiver)

	if err != nil {
		return *new(SubscriptionInterfaceOffRampSubscription), err
	}

	out0 := *abi.ConvertType(out[0], new(SubscriptionInterfaceOffRampSubscription)).(*SubscriptionInterfaceOffRampSubscription)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) GetSubscription(receiver common.Address) (SubscriptionInterfaceOffRampSubscription, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSubscription(&_Any2EVMSubscriptionOffRampRouter.CallOpts, receiver)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) GetSubscription(receiver common.Address) (SubscriptionInterfaceOffRampSubscription, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSubscription(&_Any2EVMSubscriptionOffRampRouter.CallOpts, receiver)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) GetSubscriptionConfig(opts *bind.CallOpts) (SubscriptionInterfaceSubscriptionConfig, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "getSubscriptionConfig")

	if err != nil {
		return *new(SubscriptionInterfaceSubscriptionConfig), err
	}

	out0 := *abi.ConvertType(out[0], new(SubscriptionInterfaceSubscriptionConfig)).(*SubscriptionInterfaceSubscriptionConfig)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) GetSubscriptionConfig() (SubscriptionInterfaceSubscriptionConfig, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSubscriptionConfig(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) GetSubscriptionConfig() (SubscriptionInterfaceSubscriptionConfig, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSubscriptionConfig(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) GetSupportedTokensForExecutionFee(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "getSupportedTokensForExecutionFee")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) GetSupportedTokensForExecutionFee() ([]common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSupportedTokensForExecutionFee(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) GetSupportedTokensForExecutionFee() ([]common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.GetSupportedTokensForExecutionFee(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) IsOffRamp(opts *bind.CallOpts, offRamp common.Address) (bool, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "isOffRamp", offRamp)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) IsOffRamp(offRamp common.Address) (bool, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.IsOffRamp(&_Any2EVMSubscriptionOffRampRouter.CallOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) IsOffRamp(offRamp common.Address) (bool, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.IsOffRamp(&_Any2EVMSubscriptionOffRampRouter.CallOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) Owner() (common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Owner(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) Owner() (common.Address, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Owner(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Any2EVMSubscriptionOffRampRouter.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) TypeAndVersion() (string, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.TypeAndVersion(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterCallerSession) TypeAndVersion() (string, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.TypeAndVersion(&_Any2EVMSubscriptionOffRampRouter.CallOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "acceptOwnership")
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) AcceptOwnership() (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.AcceptOwnership(&_Any2EVMSubscriptionOffRampRouter.TransactOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.AcceptOwnership(&_Any2EVMSubscriptionOffRampRouter.TransactOpts)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) AddOffRamp(opts *bind.TransactOpts, offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "addOffRamp", offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) AddOffRamp(offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.AddOffRamp(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) AddOffRamp(offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.AddOffRamp(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) ChargeSubscription(opts *bind.TransactOpts, receiver common.Address, sender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "chargeSubscription", receiver, sender, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) ChargeSubscription(receiver common.Address, sender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.ChargeSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, sender, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) ChargeSubscription(receiver common.Address, sender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.ChargeSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, sender, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) CreateSubscription(opts *bind.TransactOpts, subscription SubscriptionInterfaceOffRampSubscription) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "createSubscription", subscription)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) CreateSubscription(subscription SubscriptionInterfaceOffRampSubscription) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.CreateSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, subscription)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) CreateSubscription(subscription SubscriptionInterfaceOffRampSubscription) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.CreateSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, subscription)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) FundSubscription(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "fundSubscription", receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) FundSubscription(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.FundSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) FundSubscription(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.FundSubscription(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) PrepareSetSubscriptionSenders(opts *bind.TransactOpts, receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "prepareSetSubscriptionSenders", receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) PrepareSetSubscriptionSenders(receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.PrepareSetSubscriptionSenders(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) PrepareSetSubscriptionSenders(receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.PrepareSetSubscriptionSenders(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) PrepareWithdrawal(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "prepareWithdrawal", receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) PrepareWithdrawal(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.PrepareWithdrawal(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) PrepareWithdrawal(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.PrepareWithdrawal(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) RemoveOffRamp(opts *bind.TransactOpts, offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "removeOffRamp", offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) RemoveOffRamp(offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.RemoveOffRamp(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) RemoveOffRamp(offRamp common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.RemoveOffRamp(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, offRamp)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) RouteMessage(opts *bind.TransactOpts, message CCIPAny2EVMMessageFromSender) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "routeMessage", message)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) RouteMessage(message CCIPAny2EVMMessageFromSender) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.RouteMessage(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, message)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) RouteMessage(message CCIPAny2EVMMessageFromSender) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.RouteMessage(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, message)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) SetSubscriptionSenders(opts *bind.TransactOpts, receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "setSubscriptionSenders", receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) SetSubscriptionSenders(receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.SetSubscriptionSenders(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) SetSubscriptionSenders(receiver common.Address, newSenders []common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.SetSubscriptionSenders(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, newSenders)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "transferOwnership", to)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.TransferOwnership(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, to)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.TransferOwnership(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, to)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactor) Withdrawal(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.contract.Transact(opts, "withdrawal", receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterSession) Withdrawal(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Withdrawal(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterTransactorSession) Withdrawal(receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Any2EVMSubscriptionOffRampRouter.Contract.Withdrawal(&_Any2EVMSubscriptionOffRampRouter.TransactOpts, receiver, amount)
}

type Any2EVMSubscriptionOffRampRouterNewSendersSetIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterNewSendersSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterNewSendersSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterNewSendersSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterNewSendersSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterNewSendersSetIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterNewSendersSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterNewSendersSet struct {
	Receiver   common.Address
	NewSenders []common.Address
	Raw        types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterNewSendersSet(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterNewSendersSetIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "NewSendersSet")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterNewSendersSetIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "NewSendersSet", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchNewSendersSet(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterNewSendersSet) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "NewSendersSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterNewSendersSet)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "NewSendersSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseNewSendersSet(log types.Log) (*Any2EVMSubscriptionOffRampRouterNewSendersSet, error) {
	event := new(Any2EVMSubscriptionOffRampRouterNewSendersSet)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "NewSendersSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterOffRampAddedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterOffRampAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterOffRampAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterOffRampAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampAddedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterOffRampAdded struct {
	OffRamp common.Address
	Raw     types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterOffRampAdded(opts *bind.FilterOpts, offRamp []common.Address) (*Any2EVMSubscriptionOffRampRouterOffRampAddedIterator, error) {

	var offRampRule []interface{}
	for _, offRampItem := range offRamp {
		offRampRule = append(offRampRule, offRampItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "OffRampAdded", offRampRule)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterOffRampAddedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "OffRampAdded", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchOffRampAdded(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOffRampAdded, offRamp []common.Address) (event.Subscription, error) {

	var offRampRule []interface{}
	for _, offRampItem := range offRamp {
		offRampRule = append(offRampRule, offRampItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "OffRampAdded", offRampRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterOffRampAdded)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OffRampAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseOffRampAdded(log types.Log) (*Any2EVMSubscriptionOffRampRouterOffRampAdded, error) {
	event := new(Any2EVMSubscriptionOffRampRouterOffRampAdded)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OffRampAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterOffRampRemoved

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterOffRampRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterOffRampRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterOffRampRemoved struct {
	OffRamp common.Address
	Raw     types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterOffRampRemoved(opts *bind.FilterOpts, offRamp []common.Address) (*Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator, error) {

	var offRampRule []interface{}
	for _, offRampItem := range offRamp {
		offRampRule = append(offRampRule, offRampItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "OffRampRemoved", offRampRule)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "OffRampRemoved", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchOffRampRemoved(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOffRampRemoved, offRamp []common.Address) (event.Subscription, error) {

	var offRampRule []interface{}
	for _, offRampItem := range offRamp {
		offRampRule = append(offRampRule, offRampItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "OffRampRemoved", offRampRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterOffRampRemoved)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OffRampRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseOffRampRemoved(log types.Log) (*Any2EVMSubscriptionOffRampRouterOffRampRemoved, error) {
	event := new(Any2EVMSubscriptionOffRampRouterOffRampRemoved)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OffRampRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseOwnershipTransferRequested(log types.Log) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested, error) {
	event := new(Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterOwnershipTransferred)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseOwnershipTransferred(log types.Log) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferred, error) {
	event := new(Any2EVMSubscriptionOffRampRouterOwnershipTransferred)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterPreparedSetSenders

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterPreparedSetSenders)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterPreparedSetSenders)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterPreparedSetSenders struct {
	Receiver   common.Address
	NewSenders []common.Address
	Raw        types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterPreparedSetSenders(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "PreparedSetSenders")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "PreparedSetSenders", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchPreparedSetSenders(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterPreparedSetSenders) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "PreparedSetSenders")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterPreparedSetSenders)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "PreparedSetSenders", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParsePreparedSetSenders(log types.Log) (*Any2EVMSubscriptionOffRampRouterPreparedSetSenders, error) {
	event := new(Any2EVMSubscriptionOffRampRouterPreparedSetSenders)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "PreparedSetSenders", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterPreparedWithdrawalRequest(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "PreparedWithdrawalRequest")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "PreparedWithdrawalRequest", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchPreparedWithdrawalRequest(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "PreparedWithdrawalRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "PreparedWithdrawalRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParsePreparedWithdrawalRequest(log types.Log) (*Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest, error) {
	event := new(Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "PreparedWithdrawalRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterSubscriptionCharged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionCharged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionCharged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionCharged struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterSubscriptionCharged(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "SubscriptionCharged")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "SubscriptionCharged", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchSubscriptionCharged(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionCharged) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "SubscriptionCharged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterSubscriptionCharged)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionCharged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseSubscriptionCharged(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionCharged, error) {
	event := new(Any2EVMSubscriptionOffRampRouterSubscriptionCharged)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionCharged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterSubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionCreated struct {
	Receiver common.Address
	Raw      types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterSubscriptionCreated(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "SubscriptionCreated")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionCreated) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "SubscriptionCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterSubscriptionCreated)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseSubscriptionCreated(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionCreated, error) {
	event := new(Any2EVMSubscriptionOffRampRouterSubscriptionCreated)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterSubscriptionFunded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionFunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterSubscriptionFunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterSubscriptionFunded struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterSubscriptionFunded(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "SubscriptionFunded")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "SubscriptionFunded", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionFunded) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "SubscriptionFunded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterSubscriptionFunded)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseSubscriptionFunded(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionFunded, error) {
	event := new(Any2EVMSubscriptionOffRampRouterSubscriptionFunded)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "SubscriptionFunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator struct {
	Event *Any2EVMSubscriptionOffRampRouterWithdrawalProcessed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Any2EVMSubscriptionOffRampRouterWithdrawalProcessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(Any2EVMSubscriptionOffRampRouterWithdrawalProcessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator) Error() error {
	return it.fail
}

func (it *Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type Any2EVMSubscriptionOffRampRouterWithdrawalProcessed struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) FilterWithdrawalProcessed(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.FilterLogs(opts, "WithdrawalProcessed")
	if err != nil {
		return nil, err
	}
	return &Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator{contract: _Any2EVMSubscriptionOffRampRouter.contract, event: "WithdrawalProcessed", logs: logs, sub: sub}, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) WatchWithdrawalProcessed(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterWithdrawalProcessed) (event.Subscription, error) {

	logs, sub, err := _Any2EVMSubscriptionOffRampRouter.contract.WatchLogs(opts, "WithdrawalProcessed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(Any2EVMSubscriptionOffRampRouterWithdrawalProcessed)
				if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "WithdrawalProcessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouterFilterer) ParseWithdrawalProcessed(log types.Log) (*Any2EVMSubscriptionOffRampRouterWithdrawalProcessed, error) {
	event := new(Any2EVMSubscriptionOffRampRouterWithdrawalProcessed)
	if err := _Any2EVMSubscriptionOffRampRouter.contract.UnpackLog(event, "WithdrawalProcessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouter) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["NewSendersSet"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseNewSendersSet(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["OffRampAdded"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseOffRampAdded(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["OffRampRemoved"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseOffRampRemoved(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["OwnershipTransferRequested"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseOwnershipTransferRequested(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["OwnershipTransferred"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseOwnershipTransferred(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["PreparedSetSenders"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParsePreparedSetSenders(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["PreparedWithdrawalRequest"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParsePreparedWithdrawalRequest(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["SubscriptionCharged"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseSubscriptionCharged(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["SubscriptionCreated"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseSubscriptionCreated(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["SubscriptionFunded"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseSubscriptionFunded(log)
	case _Any2EVMSubscriptionOffRampRouter.abi.Events["WithdrawalProcessed"].ID:
		return _Any2EVMSubscriptionOffRampRouter.ParseWithdrawalProcessed(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (Any2EVMSubscriptionOffRampRouterNewSendersSet) Topic() common.Hash {
	return common.HexToHash("0x790a6055b0430ecb86464910080949cd6cfead0d9ce2cc68a54f6ae1f144e02c")
}

func (Any2EVMSubscriptionOffRampRouterOffRampAdded) Topic() common.Hash {
	return common.HexToHash("0x78f53b26906785548b265fa08f4197f9f3fff73fe0d504d30400aacb527f4ce0")
}

func (Any2EVMSubscriptionOffRampRouterOffRampRemoved) Topic() common.Hash {
	return common.HexToHash("0xcf91daec21e3510e2f2aea4b09d08c235d5c6844980be709f282ef591dbf420c")
}

func (Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (Any2EVMSubscriptionOffRampRouterOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (Any2EVMSubscriptionOffRampRouterPreparedSetSenders) Topic() common.Hash {
	return common.HexToHash("0x4f10955bde606944bdd0299e5dfc28b0f1924777b49efc5cba32e8f2090d1535")
}

func (Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest) Topic() common.Hash {
	return common.HexToHash("0xb976e2b8f72c52b734124f2e5a8d614db599027ea97d5a815f9ec68273f7a843")
}

func (Any2EVMSubscriptionOffRampRouterSubscriptionCharged) Topic() common.Hash {
	return common.HexToHash("0x6de812ac52f2e762c18dd0b2737a440548066df1c7e99ac4de0242490dc65c1a")
}

func (Any2EVMSubscriptionOffRampRouterSubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0x4c3772ba36cf4592752f1ac765a5b6e391753813c11b97d12769fcbea359cc35")
}

func (Any2EVMSubscriptionOffRampRouterSubscriptionFunded) Topic() common.Hash {
	return common.HexToHash("0xc89bca949929d103fee7b5eae37fdafa6f82a94463c8e9ea2ec5c6b488705680")
}

func (Any2EVMSubscriptionOffRampRouterWithdrawalProcessed) Topic() common.Hash {
	return common.HexToHash("0x5abb0fc89def2ee3226cc48f5621ee8e2b45f6dcc7898d2bdb5d480533c32bc0")
}

func (_Any2EVMSubscriptionOffRampRouter *Any2EVMSubscriptionOffRampRouter) Address() common.Address {
	return _Any2EVMSubscriptionOffRampRouter.address
}

type Any2EVMSubscriptionOffRampRouterInterface interface {
	GetFeeToken(opts *bind.CallOpts) (common.Address, error)

	GetOffRamps(opts *bind.CallOpts) ([]common.Address, error)

	GetSubscription(opts *bind.CallOpts, receiver common.Address) (SubscriptionInterfaceOffRampSubscription, error)

	GetSubscriptionConfig(opts *bind.CallOpts) (SubscriptionInterfaceSubscriptionConfig, error)

	GetSupportedTokensForExecutionFee(opts *bind.CallOpts) ([]common.Address, error)

	IsOffRamp(opts *bind.CallOpts, offRamp common.Address) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	AddOffRamp(opts *bind.TransactOpts, offRamp common.Address) (*types.Transaction, error)

	ChargeSubscription(opts *bind.TransactOpts, receiver common.Address, sender common.Address, amount *big.Int) (*types.Transaction, error)

	CreateSubscription(opts *bind.TransactOpts, subscription SubscriptionInterfaceOffRampSubscription) (*types.Transaction, error)

	FundSubscription(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error)

	PrepareSetSubscriptionSenders(opts *bind.TransactOpts, receiver common.Address, newSenders []common.Address) (*types.Transaction, error)

	PrepareWithdrawal(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error)

	RemoveOffRamp(opts *bind.TransactOpts, offRamp common.Address) (*types.Transaction, error)

	RouteMessage(opts *bind.TransactOpts, message CCIPAny2EVMMessageFromSender) (*types.Transaction, error)

	SetSubscriptionSenders(opts *bind.TransactOpts, receiver common.Address, newSenders []common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Withdrawal(opts *bind.TransactOpts, receiver common.Address, amount *big.Int) (*types.Transaction, error)

	FilterNewSendersSet(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterNewSendersSetIterator, error)

	WatchNewSendersSet(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterNewSendersSet) (event.Subscription, error)

	ParseNewSendersSet(log types.Log) (*Any2EVMSubscriptionOffRampRouterNewSendersSet, error)

	FilterOffRampAdded(opts *bind.FilterOpts, offRamp []common.Address) (*Any2EVMSubscriptionOffRampRouterOffRampAddedIterator, error)

	WatchOffRampAdded(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOffRampAdded, offRamp []common.Address) (event.Subscription, error)

	ParseOffRampAdded(log types.Log) (*Any2EVMSubscriptionOffRampRouterOffRampAdded, error)

	FilterOffRampRemoved(opts *bind.FilterOpts, offRamp []common.Address) (*Any2EVMSubscriptionOffRampRouterOffRampRemovedIterator, error)

	WatchOffRampRemoved(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOffRampRemoved, offRamp []common.Address) (event.Subscription, error)

	ParseOffRampRemoved(log types.Log) (*Any2EVMSubscriptionOffRampRouterOffRampRemoved, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*Any2EVMSubscriptionOffRampRouterOwnershipTransferred, error)

	FilterPreparedSetSenders(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterPreparedSetSendersIterator, error)

	WatchPreparedSetSenders(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterPreparedSetSenders) (event.Subscription, error)

	ParsePreparedSetSenders(log types.Log) (*Any2EVMSubscriptionOffRampRouterPreparedSetSenders, error)

	FilterPreparedWithdrawalRequest(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequestIterator, error)

	WatchPreparedWithdrawalRequest(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest) (event.Subscription, error)

	ParsePreparedWithdrawalRequest(log types.Log) (*Any2EVMSubscriptionOffRampRouterPreparedWithdrawalRequest, error)

	FilterSubscriptionCharged(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionChargedIterator, error)

	WatchSubscriptionCharged(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionCharged) (event.Subscription, error)

	ParseSubscriptionCharged(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionCharged, error)

	FilterSubscriptionCreated(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionCreatedIterator, error)

	WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionCreated) (event.Subscription, error)

	ParseSubscriptionCreated(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionCreated, error)

	FilterSubscriptionFunded(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterSubscriptionFundedIterator, error)

	WatchSubscriptionFunded(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterSubscriptionFunded) (event.Subscription, error)

	ParseSubscriptionFunded(log types.Log) (*Any2EVMSubscriptionOffRampRouterSubscriptionFunded, error)

	FilterWithdrawalProcessed(opts *bind.FilterOpts) (*Any2EVMSubscriptionOffRampRouterWithdrawalProcessedIterator, error)

	WatchWithdrawalProcessed(opts *bind.WatchOpts, sink chan<- *Any2EVMSubscriptionOffRampRouterWithdrawalProcessed) (event.Subscription, error)

	ParseWithdrawalProcessed(log types.Log) (*Any2EVMSubscriptionOffRampRouterWithdrawalProcessed, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}

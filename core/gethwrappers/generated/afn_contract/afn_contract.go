// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package afn_contract

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type AFNConfig struct {
	Voters               []AFNVoter
	BlessWeightThreshold uint16
	CurseWeightThreshold uint16
}

type AFNUnvoteToCurseRecord struct {
	CurseVoteAddr common.Address
	CursesHash    [32]byte
	ForceUnvote   bool
}

type AFNVoter struct {
	BlessVoteAddr   common.Address
	CurseVoteAddr   common.Address
	CurseUnvoteAddr common.Address
	BlessWeight     uint8
	CurseWeight     uint8
}

type IAFNTaggedRoot struct {
	CommitStore common.Address
	Root        [32]byte
}

var AFNContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structAFN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"internalType\":\"structAFN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"curseId\",\"type\":\"bytes32\"}],\"name\":\"AlreadyVotedToCurse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expectedCursesHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actualCursesHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidCursesHash\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"InvalidVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustRecoverFromCurse\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"AlreadyBlessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"AlreadyVotedToBless\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structAFN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"structAFN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Cursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerCursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RecoveredFromCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"voteCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"}],\"name\":\"ReusedVotesToCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"expectedCursesHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"actualCursesHash\",\"type\":\"bytes32\"}],\"name\":\"SkippedUnvoteToCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"wasBlessed\",\"type\":\"bool\"}],\"name\":\"TaggedRootBlessVotesReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"}],\"name\":\"TaggedRootBlessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"voteCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"}],\"name\":\"UnvotedToCurse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"}],\"name\":\"VotedToBless\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"configVersion\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"weight\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"voteCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"curseId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"}],\"name\":\"VotedToCurse\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"getBlessProgress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"blessVoteAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"blessed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"version\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structAFN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"internalType\":\"structAFN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurseProgress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"curseVoteAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"voteCounts\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"cursesHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint16\",\"name\":\"accumulatedWeight\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"cursed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIAFN.TaggedRoot\",\"name\":\"taggedRoot\",\"type\":\"tuple\"}],\"name\":\"isBlessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCursed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCurse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIAFN.TaggedRoot[]\",\"name\":\"taggedRoots\",\"type\":\"tuple[]\"}],\"name\":\"ownerResetBlessVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"forceUnvote\",\"type\":\"bool\"}],\"internalType\":\"structAFN.UnvoteToCurseRecord[]\",\"name\":\"unvoteRecords\",\"type\":\"tuple[]\"}],\"name\":\"ownerUnvoteToCurse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"blessVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curseUnvoteAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"blessWeight\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"curseWeight\",\"type\":\"uint8\"}],\"internalType\":\"structAFN.Voter[]\",\"name\":\"voters\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"blessWeightThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curseWeightThreshold\",\"type\":\"uint16\"}],\"internalType\":\"structAFN.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curseVoteAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"cursesHash\",\"type\":\"bytes32\"}],\"name\":\"unvoteToCurse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"commitStore\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structIAFN.TaggedRoot[]\",\"name\":\"taggedRoots\",\"type\":\"tuple[]\"}],\"name\":\"voteToBless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"curseId\",\"type\":\"bytes32\"}],\"name\":\"voteToCurse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004c6e38038062004c6e833981016040819052620000349162000e44565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be816200013a565b5050604080516080808201835260008083526020830181905260608301526001600160801b03928201929092529150600190620000fd90829062000fd1565b82604001516001600160801b0316901c6001600160801b0316101562000127576200012762000fed565b506200013381620001e5565b5062001199565b336001600160a01b03821603620001945760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b620001fa600954640100000000900460ff1690565b1562000219576040516306523e6560e51b815260040160405180910390fd5b620002248162000a1a565b62000242576040516306b7c75960e31b815260040160405180910390fd5b6040805160028054608060208202840181019094526060830181815260009484928491879085015b82821015620002e85760008481526020908190206040805160a0810182526003860290920180546001600160a01b0390811684526001808301548216858701526002909201549081169284019290925260ff600160a01b830481166060850152600160a81b909204909116608083015290835290920191016200026a565b505050908252506001919091015461ffff808216602080850191909152620100009283900482166040948501528601516003805494880151831690930263ffffffff1990941691161791909117905590505b600254156200045a576002805460009190620003599060019062000fd1565b815481106200036c576200036c62001003565b600091825260208083206040805160a081018252600390940290910180546001600160a01b03908116808652600183015482168686019081526002938401548084168887015260ff600160a01b8204811660608a0152600160a81b90910416608088015290875260058552838720805465ffffffffffff19169055511685526007909252909220805460ff1916905581549092508062000410576200041062001019565b60008281526020902060036000199092019182020180546001600160a01b03199081168255600182018054909116905560020180546001600160b01b03191690559055506200033a565b60005b8251518110156200053c5782518051600291908390811062000483576200048362001003565b602090810291909101810151825460018082018555600094855293839020825160039092020180546001600160a01b03199081166001600160a01b03938416178255938301519481018054909416948216949094179092556040810151600290930180546060830151608090930151949093166001600160a81b031990931692909217600160a01b60ff928316021760ff60a81b1916600160a81b919093160291909117905562000534816200102f565b90506200045d565b5060048054600090620005559063ffffffff166200104b565b82546101009290920a63ffffffff8181021990931691831602179091556004541660005b83515160ff821610156200072357600084600001518260ff1681518110620005a557620005a562001003565b602090810291909101810151604080516060808201835263ffffffff88811683528185015160ff90811684880190815289821685870190815287516001600160a01b03908116600090815260058b52888120975188549451935190871664ffffffffff1990951694909417640100000000938616939093029290921760ff60281b1916650100000000009385169390930292909217909555855160a08101875260018082526080808a01518516838c019081528a8c01805186168a526007808e528b8b205462010000908190048a16878e019081529d8d015188169a87019a8b52825188168c52818f528c8c20860154948701948552915187168b52909c52989097209151825498519951965161ffff1990991690151561ff0019161761010099909416989098029290921762010000600160d01b03191693909216909602600160301b600160d01b031916919091176601000000000000939091169290920291909117835551910155506200071b8162001071565b905062000579565b506004805463ffffffff4381166401000000000263ffffffff60201b1990921691909117909155604051908216907f7cf8e698b191db138396ab0eae2ad5b3fe353fd014fd5956b034b86f2d605cfd906200078090869062001093565b60405180910390a2604080516060810182528482015161ffff168152600060208201819052918101829052905b83515160ff821610156200096f57600084600001518260ff1681518110620007d957620007d962001003565b6020908102919091018101518101516001600160a01b03808216600090815260078452604090819020815160a081018352815460ff808216151580845261010083049091169783019790975263ffffffff6201000082041693820193909352660100000000000090920490921660608201526001909101546080820152909250906200088f576001600160a01b038216600090815260076020526040812080546001600160d01b03191681556001015562000959565b80518015620008a857506000816040015163ffffffff16115b156200095957806020015160ff1684602001818151620008c9919062001144565b61ffff1690525060208082015160408084015160808501519388015191516001600160a01b0387169463ffffffff8b16947fb4a70189a30e3d3b9c77d291f83699633e70ab4427fc3644a955ab4cca077b03946200095094919391929160ff94909416845263ffffffff929092166020840152604083015261ffff16606082015260800190565b60405180910390a35b505080620009679062001071565b9050620007ad565b508051602082015161ffff91821691161080156040830152620009ce578163ffffffff167f6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e33342604051620009c591815260200190565b60405180910390a25b805160098054602084015160409094015115156401000000000260ff60201b1961ffff958616620100000263ffffffff1990931695909416949094171791909116919091179055505050565b805151600090158062000a2f57508151516080105b8062000a415750602082015161ffff16155b8062000a535750604082015161ffff16155b1562000a6157506000919050565b6000806000846000015151600362000a7a919062001169565b6001600160401b0381111562000a945762000a9462000d69565b60405190808252806020026020018201604052801562000abe578160200160208202803683370190505b50905060005b85515181101562000c8e5760008660000151828151811062000aea5762000aea62001003565b6020026020010151905060006001600160a01b031681600001516001600160a01b0316148062000b25575060208101516001600160a01b0316155b8062000b3c575060408101516001600160a01b0316155b8062000b5e5750606081015160ff1615801562000b5e5750608081015160ff16155b1562000b71575060009695505050505050565b80518362000b8184600362001169565b62000b8e90600062001183565b8151811062000ba15762000ba162001003565b6001600160a01b039092166020928302919091018201528101518362000bc984600362001169565b62000bd690600162001183565b8151811062000be95762000be962001003565b6001600160a01b039092166020928302919091019091015260408101518362000c1484600362001169565b62000c2190600262001183565b8151811062000c345762000c3462001003565b6001600160a01b0390921660209283029190910190910152606081015162000c609060ff168662001183565b9450806080015160ff168462000c77919062001183565b9350508062000c86906200102f565b905062000ac4565b5060005b815181101562000d3e57600062000cab82600162001183565b90505b825181101562000d2a5782818151811062000ccd5762000ccd62001003565b60200260200101516001600160a01b031683838151811062000cf35762000cf362001003565b60200260200101516001600160a01b03160362000d17575060009695505050505050565b62000d22816200102f565b905062000cae565b5062000d36816200102f565b905062000c92565b50846020015161ffff16831015801562000d605750846040015161ffff168210155b95945050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000da45762000da462000d69565b60405290565b60405160a081016001600160401b038111828210171562000da45762000da462000d69565b604051601f8201601f191681016001600160401b038111828210171562000dfa5762000dfa62000d69565b604052919050565b80516001600160a01b038116811462000e1a57600080fd5b919050565b805160ff8116811462000e1a57600080fd5b805161ffff8116811462000e1a57600080fd5b6000602080838503121562000e5857600080fd5b82516001600160401b038082111562000e7057600080fd5b8185019150606080838803121562000e8757600080fd5b62000e9162000d7f565b83518381111562000ea157600080fd5b8401601f8101891362000eb357600080fd5b80518481111562000ec85762000ec862000d69565b62000ed8878260051b0162000dcf565b818152878101955060a091820283018801918b83111562000ef857600080fd5b928801925b8284101562000f865780848d03121562000f175760008081fd5b62000f2162000daa565b62000f2c8562000e02565b815262000f3b8a860162000e02565b8a820152604062000f4e81870162000e02565b9082015262000f5f85880162000e1f565b87820152608062000f7281870162000e1f565b908201528752958801959283019262000efd565b5083525062000f99905084860162000e31565b8582015262000fab6040850162000e31565b6040820152979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000fe75762000fe762000fbb565b92915050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006001820162001044576200104462000fbb565b5060010190565b600063ffffffff80831681810362001067576200106762000fbb565b6001019392505050565b600060ff821660ff81036200108a576200108a62000fbb565b60010192915050565b60006020808352608080840185516060808588015282825180855260a094508489019150868401935060005b818110156200111757845180516001600160a01b0390811685528982015181168a860152604080830151909116908501528481015160ff908116868601529088015116878401529387019391850191600101620010bf565b50509488015161ffff8116604089015294604089015161ffff811689840152955098975050505050505050565b61ffff81811683821601908082111562001162576200116262000fbb565b5092915050565b808202811582820484141762000fe75762000fe762000fbb565b8082018082111562000fe75762000fe762000fbb565b613ac580620011a96000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063618af12811610097578063ba86a1f011610066578063ba86a1f01461024a578063e4bbc05c1461025d578063f2fde38b14610265578063f33f28951461027857600080fd5b8063618af128146101f457806379ba5097146102075780638da5cb5b1461020f578063979986111461023757600080fd5b80633987d651116100d35780633987d6511461019e5780633f42ab73146101b757806347cf2b60146101ce5780634d616771146101e157600080fd5b8063119a352714610105578063181f5a771461011a57806335aea8691461016c578063397796f71461017f575b600080fd5b6101186101133660046130da565b61029a565b005b6101566040518060400160405280600981526020017f41464e20312e302e30000000000000000000000000000000000000000000000081525081565b60405161016391906130f3565b60405180910390f35b61011861017a366004613183565b6106c8565b600954640100000000900460ff165b6040519015158152602001610163565b6101a6610a2d565b6040516101639594939291906131fe565b6101bf610e3f565b60405161016393929190613358565b6101186101dc366004613492565b610f77565b61018e6101ef3660046135df565b610f8b565b6101186102023660046135f7565b61101d565b6101186114c5565b60005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610163565b6101186102453660046136cb565b6115c2565b610118610258366004613797565b611ad7565b610118611cc3565b610118610273366004613833565b611d88565b61028b6102863660046135df565b611d99565b60405161016393929190613855565b33600090815260076020908152604091829020825160a081018452815460ff808216151580845261010083049091169483019490945263ffffffff6201000082041694820194909452660100000000000090930473ffffffffffffffffffffffffffffffffffffffff16606084015260010154608083015261034f576040517f669f262e0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b33600090815260086020908152604080832085845290915290205460ff16156103ad576040517f9baf703d00000000000000000000000000000000000000000000000000000000815233600482015260248101839052604401610346565b3360009081526008602090815260408083208584529091529081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055810180516103ff906138b2565b63ffffffff16905260808101516040805160208101929092528101839052606001604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529181528151602092830120608084019081523360009081526007845282902084518154948601519386015160608701517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009096169115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169190911761010060ff90951694909402939093177fffffffffffff000000000000000000000000000000000000000000000000ffff166201000063ffffffff9094169384027fffffffffffff0000000000000000000000000000000000000000ffffffffffff1617660100000000000073ffffffffffffffffffffffffffffffffffffffff909516949094029390931783555160019283015590036106c45760208101516009805460ff9092169160029061058a90849062010000900461ffff166138d5565b82546101009290920a61ffff818102199093169183160217909155600454602084810151604080870151608080890151600954845160ff909616865263ffffffff938416968601969096529284018a905260608401929092526201000090930490941693810193909352169150339082907f8e5ceca76dae647f687fccbe8d42a3796e68330812669bd5003b938dacb1b6dd9060a00160405180910390a3600954640100000000900460ff166106c25760095461ffff8082166201000090920416106106c257600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff1664010000000017905560405163ffffffff8216907f6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e333906106b99042815260200190565b60405180910390a25b505b5050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260076020908152604091829020825160a081018452815460ff808216151583526101008204169382019390935263ffffffff620100008404169381019390935266010000000000009091049092166060820152600190910154608082015261075860095460ff6401000000009091041690565b1561078f576040517fca47cca000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107fa576040517f669f262e000000000000000000000000000000000000000000000000000000008152336004820152602401610346565b805115806108105750604081015163ffffffff16155b1561081a57505050565b818160800151146108675760808101516040517f79aa5c5f000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052604401610346565b6004546020820151604080840151905173ffffffffffffffffffffffffffffffffffffffff87169363ffffffff16927f56c9f1d1001236f66c1e5d598905029b4093031f31aead3449a53d832eade225926108df92889060ff93909316835263ffffffff919091166020830152604082015260600190565b60405180910390a36000604082810182815273ffffffffffffffffffffffffffffffffffffffff868116845260076020908152929093208451815493860151925160608701517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009095169115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169190911761010060ff909416938402177fffffffffffff000000000000000000000000000000000000000000000000ffff166201000063ffffffff90921682027fffffffffffff0000000000000000000000000000000000000000ffffffffffff1617660100000000000094909516939093029390931783556080840151600190930192909255600980549091600291610a0e9185910461ffff166138f7565b92506101000a81548161ffff021916908361ffff160217905550505050565b60095460028054604080516020808402820181019092528281526060948594859462010000830461ffff169464010000000090930460ff16936000938493919290849084015b82821015610b1f5760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101610a73565b50505050905060005b8151811015610bf657600060076000848481518110610b4957610b49613912565b60209081029190910181015181015173ffffffffffffffffffffffffffffffffffffffff9081168352828201939093526040918201600020825160a081018452815460ff808216151583526101008204169382019390935263ffffffff6201000084041693810184905266010000000000009092049093166060820152600190920154608083015290915015610be557610be284613941565b93505b50610bef81613941565b9050610b28565b508167ffffffffffffffff811115610c1057610c10613381565b604051908082528060200260200182016040528015610c39578160200160208202803683370190505b5096508167ffffffffffffffff811115610c5557610c55613381565b604051908082528060200260200182016040528015610c7e578160200160208202803683370190505b5095508167ffffffffffffffff811115610c9a57610c9a613381565b604051908082528060200260200182016040528015610cc3578160200160208202803683370190505b5094506000805b8251811015610e34576000838281518110610ce757610ce7613912565b60209081029190910181015181015173ffffffffffffffffffffffffffffffffffffffff808216600090815260078452604090819020815160a081018352815460ff808216151583526101008204169682019690965263ffffffff6201000087041692810183905266010000000000009095049092166060850152600190910154608084015290925015610e2157818b8581518110610d8857610d88613912565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080604001518a8581518110610dd957610dd9613912565b602002602001019063ffffffff16908163ffffffff16815250508060800151898581518110610e0a57610e0a613912565b6020908102919091010152610e1e84613941565b93505b505080610e2d90613941565b9050610cca565b505050509091929394565b6040805160608082018352808252600060208084018290528385018290526004548551600280549384028201608090810190985294810183815263ffffffff808416986401000000009094041696959194919385939192859285015b82821015610f475760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101610e9b565b505050908252506001919091015461ffff8082166020840152620100009091041660409091015292939192919050565b610f7f612067565b610f88816120e8565b50565b6000600681610fe9610fa236869003860186613979565b80516020918201516040805173ffffffffffffffffffffffffffffffffffffffff909316838501528281019190915280518083038201815260609092019052805191012090565b8152602081019190915260400160002054760100000000000000000000000000000000000000000000900460ff1692915050565b611025612067565b60005b815181101561134457600082828151811061104557611045613912565b602090810291909101810151805173ffffffffffffffffffffffffffffffffffffffff908116600090815260078452604090819020815160a081018352815460ff808216151583526101008204169682019690965263ffffffff62010000870416818401526601000000000000909504909216606085015260019091015460808401528101519092501580156110e357508160200151816080015114155b1561114b5781516080820151602080850151604080519384529183015273ffffffffffffffffffffffffffffffffffffffff909216917ff4e3b20447f3f83360469333a2578825ae355d192dd6f59c6516d832fa425a53910160405180910390a25050611334565b805115806111615750604081015163ffffffff16155b1561116d575050611334565b81516004546020838101516040808601516080870151825160ff909416845263ffffffff918216948401949094529082019290925273ffffffffffffffffffffffffffffffffffffffff909316929116907f56c9f1d1001236f66c1e5d598905029b4093031f31aead3449a53d832eade2259060600160405180910390a36000604082810182815260808401838152855173ffffffffffffffffffffffffffffffffffffffff908116855260076020908152939094208551815494870151935160608801517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009096169115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169190911761010060ff909516948502177fffffffffffff000000000000000000000000000000000000000000000000ffff166201000063ffffffff90921682027fffffffffffff0000000000000000000000000000000000000000ffffffffffff161766010000000000009590961694909402949094178455516001909301929092556009805490916002916113179185910461ffff166138f7565b92506101000a81548161ffff021916908361ffff16021790555050505b61133d81613941565b9050611028565b50600954640100000000900460ff16801561136d575060095461ffff8082166201000090920416105b15610f8857600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff1690556040517f08c773aaf7568c6b9110dcdfc13c27177410582ee30e157d1aa306b49d603eb790600090a160408051600280546080602082028401810190945260608301818152610f88948492849160009085015b828210156114995760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff740100000000000000000000000000000000000000008304811660608501527501000000000000000000000000000000000000000000909204909116608083015290835290920191016113ed565b505050908252506001919091015461ffff808216602084015262010000909104166040909101526120e8565b60015473ffffffffffffffffffffffffffffffffffffffff163314611546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610346565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b600954640100000000900460ff1615611607576040517fca47cca000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454336000908152600560209081526040918290208251606081018452905463ffffffff81811680845260ff64010000000084048116958501959095526501000000000090920490931693820193909352921691908214611697576040517f669f262e000000000000000000000000000000000000000000000000000000008152336004820152602401610346565b60005b83811015611ad05760008585838181106116b6576116b6613912565b9050604002018036038101906116cc9190613979565b905060006116fb8787858181106116e5576116e5613912565b905060400201803603810190610fa29190613979565b6000818152600660209081526040918290208251608081018452905463ffffffff81168252640100000000810461ffff1692820192909252660100000000000082046fffffffffffffffffffffffffffffffff1692810192909252760100000000000000000000000000000000000000000000900460ff161580156060830152919250906117e0573373ffffffffffffffffffffffffffffffffffffffff168663ffffffff167f274d6d5b916b0a53974b7ab86c844b97a2e03a60f658cd9a4b1c028b604d7bf1856040516117d09190613995565b60405180910390a3505050611ac0565b8563ffffffff16816000015163ffffffff161461182357506040805160808101825263ffffffff8716815260006020820181905291810182905260608101919091525b61183581604001518660400151612bc5565b15611887573373ffffffffffffffffffffffffffffffffffffffff168663ffffffff167f6dfbb745226fa630aeb1b9557d17d508ddb789a04f0cb873ec16e58beb8beead856040516117d09190613995565b61189981604001518660400151612bff565b6fffffffffffffffffffffffffffffffff166040820152602080860151908201805160ff909216916118cc9083906138d5565b61ffff1690525060208581015160408051865173ffffffffffffffffffffffffffffffffffffffff168152868401519381019390935260ff9091168282015251339163ffffffff8916917f2a08a2bd2798f0aae9a843f0f4ad4de488c1b3d5f04049940cfed736ad69fb979181900360600190a3600354602082015161ffff9182169116106119d35760016060820152602081015160405163ffffffff8816917f8257378aa73bf8e4ada848713526584a3dcee0fd3db3beed7397f7a7f5067cc9916119ca918791825173ffffffffffffffffffffffffffffffffffffffff1681526020928301519281019290925261ffff16604082015260600190565b60405180910390a25b6000918252600660209081526040928390208251815492840151948401516060909401511515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff909516660100000000000002949094167fffffffffffffffffff0000000000000000000000000000000000ffffffffffff61ffff909616640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000090941663ffffffff90921691909117929092179390931617179055505b611ac981613941565b905061169a565b5050505050565b611adf612067565b60005b81518110156106c4576000611b51838381518110611b0257611b02613912565b602002602001015180516020918201516040805173ffffffffffffffffffffffffffffffffffffffff909316838501528281019190915280518083038201815260609092019052805191012090565b60008181526006602081815260408084208151608081018352815463ffffffff8082168352640100000000820461ffff1683870152660100000000000082046fffffffffffffffffffffffffffffffff1694830194909452760100000000000000000000000000000000000000000000810460ff1615156060830190815296889052949093527fffffffffffffffffff00000000000000000000000000000000000000000000009093169092559151600454835194955092939092821691161480611c195750805b15611caf57600454855163ffffffff909116907f7d15a6eebaa019ea7d5b7d38937c51ebd3befbfdf51bb630a694fd28635bbcba90879087908110611c6057611c60613912565b602002602001015183604051611ca6929190825173ffffffffffffffffffffffffffffffffffffffff168152602092830151928101929092521515604082015260600190565b60405180910390a25b50505080611cbc90613941565b9050611ae2565b611ccb612067565b6040514281527f367ba81ba03ea9fa7ee089ecfb43b1c35e0935bc87a472abf615b7580dc16b799060200160405180910390a1600954640100000000900460ff16611d8657600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff1664010000000017905560045460405163ffffffff909116907f6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e33390611d7d9042815260200190565b60405180910390a25b565b611d90612067565b610f8881612c22565b606060008080611db1610fa236879003870187613979565b6000818152600660209081526040918290208251608081018452905463ffffffff808216808452640100000000830461ffff1694840194909452660100000000000082046fffffffffffffffffffffffffffffffff1694830194909452760100000000000000000000000000000000000000000000900460ff1615156060820181905260045490965093945092909116900361205e5760208101516040820151909450611e5d81612d17565b60ff1667ffffffffffffffff811115611e7857611e78613381565b604051908082528060200260200182016040528015611ea1578160200160208202803683370190505b506002805460408051602080840282018101909252828152939950600093929190849084015b82821015611f735760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101611ec7565b5050505090506000805b825181101561205957611fe38460056000868581518110611fa057611fa0613912565b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000205465010000000000900460ff16612bc5565b1561204957828181518110611ffa57611ffa613912565b60200260200101516000015189838151811061201857612018613912565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015261204682613941565b91505b61205281613941565b9050611f7d565b505050505b50509193909250565b60005473ffffffffffffffffffffffffffffffffffffffff163314611d86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610346565b600954640100000000900460ff161561212d576040517fca47cca000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61213681612d56565b61216c576040517f35be3ac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160028054608060208202840181019094526060830181815260009484928491879085015b828210156122405760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925260ff74010000000000000000000000000000000000000000830481166060850152750100000000000000000000000000000000000000000090920490911660808301529083529092019101612194565b505050908252506001919091015461ffff80821660208085019190915262010000928390048216604094850152860151600380549488015183169093027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000090941691161791909117905590505b600254156124785760028054600091906122c9906001906139c2565b815481106122d9576122d9613912565b600091825260208083206040805160a0810182526003909402909101805473ffffffffffffffffffffffffffffffffffffffff908116808652600183015482168686019081526002938401548084168887015260ff740100000000000000000000000000000000000000008204811660608a015275010000000000000000000000000000000000000000009091041660808801529087526005855283872080547fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000016905551168552600790925290922080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558154909250806123e1576123e16139d5565b60008281526020902060037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019182020180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081168255600182018054909116905560020180547fffffffffffffffffffff000000000000000000000000000000000000000000001690559055506122ad565b60005b8251518110156125ce5782518051600291908390811061249d5761249d613912565b602090810291909101810151825460018082018555600094855293839020825160039092020180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff938416178255938301519481018054909416948216949094179092556040810151600290930180546060830151608090930151949093167fffffffffffffffffffffff000000000000000000000000000000000000000000909316929092177401000000000000000000000000000000000000000060ff92831602177fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000091909316029190911790556125c781613941565b905061247b565b50600480546000906125e59063ffffffff166138b2565b82546101009290920a63ffffffff8181021990931691831602179091556004541660005b83515160ff8216101561285357600084600001518260ff168151811061263157612631613912565b602090810291909101810151604080516060808201835263ffffffff88811683528185015160ff908116848801908152898216858701908152875173ffffffffffffffffffffffffffffffffffffffff908116600090815260058b5288812097518854945193519087167fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000009095169490941764010000000093861693909302929092177fffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff16650100000000009385169390930292909217909555855160a08101875260018082526080808a01518516838c019081528a8c01805186168a526007808e528b8b205462010000908190048a16878e019081529d8d015188169a87019a8b52825188168c52818f528c8c20860154948701948552915187168b52909c5298909720915182549851995196517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009099169015157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16176101009990941698909802929092177fffffffffffff000000000000000000000000000000000000000000000000ffff16939092169096027fffffffffffff0000000000000000000000000000000000000000ffffffffffff169190911766010000000000009390911692909202919091178355519101555061284c81613a04565b9050612609565b506004805463ffffffff438116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff90921691909117909155604051908216907f7cf8e698b191db138396ab0eae2ad5b3fe353fd014fd5956b034b86f2d605cfd906128c6908690613a23565b60405180910390a2604080516060810182528482015161ffff168152600060208201819052918101829052905b83515160ff82161015612ae657600084600001518260ff168151811061291b5761291b613912565b60209081029190910181015181015173ffffffffffffffffffffffffffffffffffffffff808216600090815260078452604090819020815160a081018352815460ff808216151580845261010083049091169783019790975263ffffffff620100008204169382019390935266010000000000009092049092166060820152600190910154608082015290925090612a015773ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040812080547fffffffffffff000000000000000000000000000000000000000000000000000016815560010155612ad3565b80518015612a1957506000816040015163ffffffff16115b15612ad357806020015160ff1684602001818151612a3791906138d5565b61ffff16905250602080820151604080840151608085015193880151915173ffffffffffffffffffffffffffffffffffffffff87169463ffffffff8b16947fb4a70189a30e3d3b9c77d291f83699633e70ab4427fc3644a955ab4cca077b0394612aca94919391929160ff94909416845263ffffffff929092166020840152604083015261ffff16606082015260800190565b60405180910390a35b505080612adf90613a04565b90506128f3565b508051602082015161ffff91821691161080156040830152612b43578163ffffffff167f6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e33342604051612b3a91815260200190565b60405180910390a25b80516009805460208401516040909401511515640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff61ffff95861662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000090931695909416949094171791909116919091179055505050565b600060808260ff1610612bda57612bda613a36565b50600160ff82161b82166fffffffffffffffffffffffffffffffff1615155b92915050565b600060808260ff1610612c1457612c14613a36565b50600160ff919091161b1790565b3373ffffffffffffffffffffffffffffffffffffffff821603612ca1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610346565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60005b6fffffffffffffffffffffffffffffffff821615612d5157612d3d600183613a65565b90911690612d4a81613a04565b9050612d1a565b919050565b8051516000901580612d6a57508151516080105b80612d7b5750602082015161ffff16155b80612d8c5750604082015161ffff16155b15612d9957506000919050565b60008060008460000151516003612db09190613a8e565b67ffffffffffffffff811115612dc857612dc8613381565b604051908082528060200260200182016040528015612df1578160200160208202803683370190505b50905060005b855151811015612ff757600086600001518281518110612e1957612e19613912565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161480612e7a5750602081015173ffffffffffffffffffffffffffffffffffffffff16155b80612e9d5750604081015173ffffffffffffffffffffffffffffffffffffffff16155b80612ebd5750606081015160ff16158015612ebd5750608081015160ff16155b15612ecf575060009695505050505050565b805183612edd846003613a8e565b612ee8906000613aa5565b81518110612ef857612ef8613912565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910182015281015183612f2b846003613a8e565b612f36906001613aa5565b81518110612f4657612f46613912565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152604081015183612f7c846003613a8e565b612f87906002613aa5565b81518110612f9757612f97613912565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526060810151612fce9060ff1686613aa5565b9450806080015160ff1684612fe39190613aa5565b93505080612ff090613941565b9050612df7565b5060005b81518110156130b0576000613011826001613aa5565b90505b825181101561309f5782818151811061302f5761302f613912565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1683838151811061305f5761305f613912565b602002602001015173ffffffffffffffffffffffffffffffffffffffff160361308f575060009695505050505050565b61309881613941565b9050613014565b506130a981613941565b9050612ffb565b50846020015161ffff1683101580156130d15750846040015161ffff168210155b95945050505050565b6000602082840312156130ec57600080fd5b5035919050565b600060208083528351808285015260005b8181101561312057858101830151858201604001528201613104565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612d5157600080fd5b6000806040838503121561319657600080fd5b61319f8361315f565b946020939093013593505050565b600081518084526020808501945080840160005b838110156131f357815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016131c1565b509495945050505050565b60a08152600061321160a08301886131ad565b82810360208481019190915287518083528882019282019060005b8181101561324e57845163ffffffff168352938301939183019160010161322c565b50508481036040860152875180825290820192508188019060005b8181101561328557825185529383019391830191600101613269565b50505061ffff8616606085015250905082151560808301525b9695505050505050565b8051606080845281518482018190526000926080916020918201918388019190865b8281101561332f578451805173ffffffffffffffffffffffffffffffffffffffff908116865283820151811684870152604080830151909116908601528781015160ff908116898701529087015116868501529381019360a0909301926001016132ca565b508781015161ffff81168a830152955050506040860151935061329e604088018561ffff169052565b600063ffffffff8086168352808516602084015250606060408301526130d160608301846132a8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156133d3576133d3613381565b60405290565b60405160a0810167ffffffffffffffff811182821017156133d3576133d3613381565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561344357613443613381565b604052919050565b600067ffffffffffffffff82111561346557613465613381565b5060051b60200190565b803560ff81168114612d5157600080fd5b803561ffff81168114612d5157600080fd5b600060208083850312156134a557600080fd5b823567ffffffffffffffff808211156134bd57600080fd5b818501915060608083880312156134d357600080fd5b6134db6133b0565b8335838111156134ea57600080fd5b84019250601f830188136134fd57600080fd5b823561351061350b8261344b565b6133fc565b81815260a0918202850187019187820191908b84111561352f57600080fd5b958801955b838710156135ae5780878d03121561354c5760008081fd5b6135546133d9565b61355d8861315f565b815261356a8a890161315f565b8a820152604061357b818a0161315f565b9082015261358a88880161346f565b87820152608061359b818a0161346f565b9082015283529586019591880191613534565b508352506135bf9050848601613480565b858201526135cf60408501613480565b6040820152979650505050505050565b6000604082840312156135f157600080fd5b50919050565b6000602080838503121561360a57600080fd5b823567ffffffffffffffff81111561362157600080fd5b8301601f8101851361363257600080fd5b803561364061350b8261344b565b8181526060918202830184019184820191908884111561365f57600080fd5b938501935b838510156136bf5780858a03121561367c5760008081fd5b6136846133b0565b61368d8661315f565b8152868601358782015260408087013580151581146136ac5760008081fd5b9082015283529384019391850191613664565b50979650505050505050565b600080602083850312156136de57600080fd5b823567ffffffffffffffff808211156136f657600080fd5b818501915085601f83011261370a57600080fd5b81358181111561371957600080fd5b8660208260061b850101111561372e57600080fd5b60209290920196919550909350505050565b60006040828403121561375257600080fd5b6040516040810181811067ffffffffffffffff8211171561377557613775613381565b6040529050806137848361315f565b8152602083013560208201525092915050565b600060208083850312156137aa57600080fd5b823567ffffffffffffffff8111156137c157600080fd5b8301601f810185136137d257600080fd5b80356137e061350b8261344b565b81815260069190911b820183019083810190878311156137ff57600080fd5b928401925b82841015613828576138168885613740565b82528482019150604084019350613804565b979650505050505050565b60006020828403121561384557600080fd5b61384e8261315f565b9392505050565b60608152600061386860608301866131ad565b61ffff94909416602083015250901515604090910152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff8083168181036138cb576138cb613883565b6001019392505050565b61ffff8181168382160190808211156138f0576138f0613883565b5092915050565b61ffff8281168282160390808211156138f0576138f0613883565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361397257613972613883565b5060010190565b60006040828403121561398b57600080fd5b61384e8383613740565b815173ffffffffffffffffffffffffffffffffffffffff1681526020808301519082015260408101612bf9565b81810381811115612bf957612bf9613883565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060ff821660ff8103613a1a57613a1a613883565b60010192915050565b60208152600061384e60208301846132a8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6fffffffffffffffffffffffffffffffff8281168282160390808211156138f0576138f0613883565b8082028115828204841417612bf957612bf9613883565b80820180821115612bf957612bf961388356fea164736f6c6343000813000a",
}

var AFNContractABI = AFNContractMetaData.ABI

var AFNContractBin = AFNContractMetaData.Bin

func DeployAFNContract(auth *bind.TransactOpts, backend bind.ContractBackend, config AFNConfig) (common.Address, *types.Transaction, *AFNContract, error) {
	parsed, err := AFNContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AFNContractBin), backend, config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AFNContract{AFNContractCaller: AFNContractCaller{contract: contract}, AFNContractTransactor: AFNContractTransactor{contract: contract}, AFNContractFilterer: AFNContractFilterer{contract: contract}}, nil
}

type AFNContract struct {
	address common.Address
	abi     abi.ABI
	AFNContractCaller
	AFNContractTransactor
	AFNContractFilterer
}

type AFNContractCaller struct {
	contract *bind.BoundContract
}

type AFNContractTransactor struct {
	contract *bind.BoundContract
}

type AFNContractFilterer struct {
	contract *bind.BoundContract
}

type AFNContractSession struct {
	Contract     *AFNContract
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type AFNContractCallerSession struct {
	Contract *AFNContractCaller
	CallOpts bind.CallOpts
}

type AFNContractTransactorSession struct {
	Contract     *AFNContractTransactor
	TransactOpts bind.TransactOpts
}

type AFNContractRaw struct {
	Contract *AFNContract
}

type AFNContractCallerRaw struct {
	Contract *AFNContractCaller
}

type AFNContractTransactorRaw struct {
	Contract *AFNContractTransactor
}

func NewAFNContract(address common.Address, backend bind.ContractBackend) (*AFNContract, error) {
	abi, err := abi.JSON(strings.NewReader(AFNContractABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindAFNContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AFNContract{address: address, abi: abi, AFNContractCaller: AFNContractCaller{contract: contract}, AFNContractTransactor: AFNContractTransactor{contract: contract}, AFNContractFilterer: AFNContractFilterer{contract: contract}}, nil
}

func NewAFNContractCaller(address common.Address, caller bind.ContractCaller) (*AFNContractCaller, error) {
	contract, err := bindAFNContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AFNContractCaller{contract: contract}, nil
}

func NewAFNContractTransactor(address common.Address, transactor bind.ContractTransactor) (*AFNContractTransactor, error) {
	contract, err := bindAFNContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AFNContractTransactor{contract: contract}, nil
}

func NewAFNContractFilterer(address common.Address, filterer bind.ContractFilterer) (*AFNContractFilterer, error) {
	contract, err := bindAFNContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AFNContractFilterer{contract: contract}, nil
}

func bindAFNContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AFNContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_AFNContract *AFNContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AFNContract.Contract.AFNContractCaller.contract.Call(opts, result, method, params...)
}

func (_AFNContract *AFNContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AFNContract.Contract.AFNContractTransactor.contract.Transfer(opts)
}

func (_AFNContract *AFNContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AFNContract.Contract.AFNContractTransactor.contract.Transact(opts, method, params...)
}

func (_AFNContract *AFNContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AFNContract.Contract.contract.Call(opts, result, method, params...)
}

func (_AFNContract *AFNContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AFNContract.Contract.contract.Transfer(opts)
}

func (_AFNContract *AFNContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AFNContract.Contract.contract.Transact(opts, method, params...)
}

func (_AFNContract *AFNContractCaller) GetBlessProgress(opts *bind.CallOpts, taggedRoot IAFNTaggedRoot) (GetBlessProgress,

	error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "getBlessProgress", taggedRoot)

	outstruct := new(GetBlessProgress)
	if err != nil {
		return *outstruct, err
	}

	outstruct.BlessVoteAddrs = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.AccumulatedWeight = *abi.ConvertType(out[1], new(uint16)).(*uint16)
	outstruct.Blessed = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

func (_AFNContract *AFNContractSession) GetBlessProgress(taggedRoot IAFNTaggedRoot) (GetBlessProgress,

	error) {
	return _AFNContract.Contract.GetBlessProgress(&_AFNContract.CallOpts, taggedRoot)
}

func (_AFNContract *AFNContractCallerSession) GetBlessProgress(taggedRoot IAFNTaggedRoot) (GetBlessProgress,

	error) {
	return _AFNContract.Contract.GetBlessProgress(&_AFNContract.CallOpts, taggedRoot)
}

func (_AFNContract *AFNContractCaller) GetConfigDetails(opts *bind.CallOpts) (GetConfigDetails,

	error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "getConfigDetails")

	outstruct := new(GetConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Version = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.Config = *abi.ConvertType(out[2], new(AFNConfig)).(*AFNConfig)

	return *outstruct, err

}

func (_AFNContract *AFNContractSession) GetConfigDetails() (GetConfigDetails,

	error) {
	return _AFNContract.Contract.GetConfigDetails(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCallerSession) GetConfigDetails() (GetConfigDetails,

	error) {
	return _AFNContract.Contract.GetConfigDetails(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCaller) GetCurseProgress(opts *bind.CallOpts) (GetCurseProgress,

	error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "getCurseProgress")

	outstruct := new(GetCurseProgress)
	if err != nil {
		return *outstruct, err
	}

	outstruct.CurseVoteAddrs = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.VoteCounts = *abi.ConvertType(out[1], new([]uint32)).(*[]uint32)
	outstruct.CursesHashes = *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	outstruct.AccumulatedWeight = *abi.ConvertType(out[3], new(uint16)).(*uint16)
	outstruct.Cursed = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

func (_AFNContract *AFNContractSession) GetCurseProgress() (GetCurseProgress,

	error) {
	return _AFNContract.Contract.GetCurseProgress(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCallerSession) GetCurseProgress() (GetCurseProgress,

	error) {
	return _AFNContract.Contract.GetCurseProgress(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCaller) IsBlessed(opts *bind.CallOpts, taggedRoot IAFNTaggedRoot) (bool, error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "isBlessed", taggedRoot)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_AFNContract *AFNContractSession) IsBlessed(taggedRoot IAFNTaggedRoot) (bool, error) {
	return _AFNContract.Contract.IsBlessed(&_AFNContract.CallOpts, taggedRoot)
}

func (_AFNContract *AFNContractCallerSession) IsBlessed(taggedRoot IAFNTaggedRoot) (bool, error) {
	return _AFNContract.Contract.IsBlessed(&_AFNContract.CallOpts, taggedRoot)
}

func (_AFNContract *AFNContractCaller) IsCursed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "isCursed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_AFNContract *AFNContractSession) IsCursed() (bool, error) {
	return _AFNContract.Contract.IsCursed(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCallerSession) IsCursed() (bool, error) {
	return _AFNContract.Contract.IsCursed(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_AFNContract *AFNContractSession) Owner() (common.Address, error) {
	return _AFNContract.Contract.Owner(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCallerSession) Owner() (common.Address, error) {
	return _AFNContract.Contract.Owner(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AFNContract.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_AFNContract *AFNContractSession) TypeAndVersion() (string, error) {
	return _AFNContract.Contract.TypeAndVersion(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractCallerSession) TypeAndVersion() (string, error) {
	return _AFNContract.Contract.TypeAndVersion(&_AFNContract.CallOpts)
}

func (_AFNContract *AFNContractTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "acceptOwnership")
}

func (_AFNContract *AFNContractSession) AcceptOwnership() (*types.Transaction, error) {
	return _AFNContract.Contract.AcceptOwnership(&_AFNContract.TransactOpts)
}

func (_AFNContract *AFNContractTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _AFNContract.Contract.AcceptOwnership(&_AFNContract.TransactOpts)
}

func (_AFNContract *AFNContractTransactor) OwnerCurse(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "ownerCurse")
}

func (_AFNContract *AFNContractSession) OwnerCurse() (*types.Transaction, error) {
	return _AFNContract.Contract.OwnerCurse(&_AFNContract.TransactOpts)
}

func (_AFNContract *AFNContractTransactorSession) OwnerCurse() (*types.Transaction, error) {
	return _AFNContract.Contract.OwnerCurse(&_AFNContract.TransactOpts)
}

func (_AFNContract *AFNContractTransactor) OwnerResetBlessVotes(opts *bind.TransactOpts, taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "ownerResetBlessVotes", taggedRoots)
}

func (_AFNContract *AFNContractSession) OwnerResetBlessVotes(taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.Contract.OwnerResetBlessVotes(&_AFNContract.TransactOpts, taggedRoots)
}

func (_AFNContract *AFNContractTransactorSession) OwnerResetBlessVotes(taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.Contract.OwnerResetBlessVotes(&_AFNContract.TransactOpts, taggedRoots)
}

func (_AFNContract *AFNContractTransactor) OwnerUnvoteToCurse(opts *bind.TransactOpts, unvoteRecords []AFNUnvoteToCurseRecord) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "ownerUnvoteToCurse", unvoteRecords)
}

func (_AFNContract *AFNContractSession) OwnerUnvoteToCurse(unvoteRecords []AFNUnvoteToCurseRecord) (*types.Transaction, error) {
	return _AFNContract.Contract.OwnerUnvoteToCurse(&_AFNContract.TransactOpts, unvoteRecords)
}

func (_AFNContract *AFNContractTransactorSession) OwnerUnvoteToCurse(unvoteRecords []AFNUnvoteToCurseRecord) (*types.Transaction, error) {
	return _AFNContract.Contract.OwnerUnvoteToCurse(&_AFNContract.TransactOpts, unvoteRecords)
}

func (_AFNContract *AFNContractTransactor) SetConfig(opts *bind.TransactOpts, config AFNConfig) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "setConfig", config)
}

func (_AFNContract *AFNContractSession) SetConfig(config AFNConfig) (*types.Transaction, error) {
	return _AFNContract.Contract.SetConfig(&_AFNContract.TransactOpts, config)
}

func (_AFNContract *AFNContractTransactorSession) SetConfig(config AFNConfig) (*types.Transaction, error) {
	return _AFNContract.Contract.SetConfig(&_AFNContract.TransactOpts, config)
}

func (_AFNContract *AFNContractTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "transferOwnership", to)
}

func (_AFNContract *AFNContractSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _AFNContract.Contract.TransferOwnership(&_AFNContract.TransactOpts, to)
}

func (_AFNContract *AFNContractTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _AFNContract.Contract.TransferOwnership(&_AFNContract.TransactOpts, to)
}

func (_AFNContract *AFNContractTransactor) UnvoteToCurse(opts *bind.TransactOpts, curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "unvoteToCurse", curseVoteAddr, cursesHash)
}

func (_AFNContract *AFNContractSession) UnvoteToCurse(curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error) {
	return _AFNContract.Contract.UnvoteToCurse(&_AFNContract.TransactOpts, curseVoteAddr, cursesHash)
}

func (_AFNContract *AFNContractTransactorSession) UnvoteToCurse(curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error) {
	return _AFNContract.Contract.UnvoteToCurse(&_AFNContract.TransactOpts, curseVoteAddr, cursesHash)
}

func (_AFNContract *AFNContractTransactor) VoteToBless(opts *bind.TransactOpts, taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "voteToBless", taggedRoots)
}

func (_AFNContract *AFNContractSession) VoteToBless(taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.Contract.VoteToBless(&_AFNContract.TransactOpts, taggedRoots)
}

func (_AFNContract *AFNContractTransactorSession) VoteToBless(taggedRoots []IAFNTaggedRoot) (*types.Transaction, error) {
	return _AFNContract.Contract.VoteToBless(&_AFNContract.TransactOpts, taggedRoots)
}

func (_AFNContract *AFNContractTransactor) VoteToCurse(opts *bind.TransactOpts, curseId [32]byte) (*types.Transaction, error) {
	return _AFNContract.contract.Transact(opts, "voteToCurse", curseId)
}

func (_AFNContract *AFNContractSession) VoteToCurse(curseId [32]byte) (*types.Transaction, error) {
	return _AFNContract.Contract.VoteToCurse(&_AFNContract.TransactOpts, curseId)
}

func (_AFNContract *AFNContractTransactorSession) VoteToCurse(curseId [32]byte) (*types.Transaction, error) {
	return _AFNContract.Contract.VoteToCurse(&_AFNContract.TransactOpts, curseId)
}

type AFNContractAlreadyBlessedIterator struct {
	Event *AFNContractAlreadyBlessed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractAlreadyBlessedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractAlreadyBlessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractAlreadyBlessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractAlreadyBlessedIterator) Error() error {
	return it.fail
}

func (it *AFNContractAlreadyBlessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractAlreadyBlessed struct {
	ConfigVersion uint32
	Voter         common.Address
	TaggedRoot    IAFNTaggedRoot
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterAlreadyBlessed(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractAlreadyBlessedIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "AlreadyBlessed", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractAlreadyBlessedIterator{contract: _AFNContract.contract, event: "AlreadyBlessed", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchAlreadyBlessed(opts *bind.WatchOpts, sink chan<- *AFNContractAlreadyBlessed, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "AlreadyBlessed", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractAlreadyBlessed)
				if err := _AFNContract.contract.UnpackLog(event, "AlreadyBlessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseAlreadyBlessed(log types.Log) (*AFNContractAlreadyBlessed, error) {
	event := new(AFNContractAlreadyBlessed)
	if err := _AFNContract.contract.UnpackLog(event, "AlreadyBlessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractAlreadyVotedToBlessIterator struct {
	Event *AFNContractAlreadyVotedToBless

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractAlreadyVotedToBlessIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractAlreadyVotedToBless)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractAlreadyVotedToBless)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractAlreadyVotedToBlessIterator) Error() error {
	return it.fail
}

func (it *AFNContractAlreadyVotedToBlessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractAlreadyVotedToBless struct {
	ConfigVersion uint32
	Voter         common.Address
	TaggedRoot    IAFNTaggedRoot
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterAlreadyVotedToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractAlreadyVotedToBlessIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "AlreadyVotedToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractAlreadyVotedToBlessIterator{contract: _AFNContract.contract, event: "AlreadyVotedToBless", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchAlreadyVotedToBless(opts *bind.WatchOpts, sink chan<- *AFNContractAlreadyVotedToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "AlreadyVotedToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractAlreadyVotedToBless)
				if err := _AFNContract.contract.UnpackLog(event, "AlreadyVotedToBless", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseAlreadyVotedToBless(log types.Log) (*AFNContractAlreadyVotedToBless, error) {
	event := new(AFNContractAlreadyVotedToBless)
	if err := _AFNContract.contract.UnpackLog(event, "AlreadyVotedToBless", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractConfigSetIterator struct {
	Event *AFNContractConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractConfigSetIterator) Error() error {
	return it.fail
}

func (it *AFNContractConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractConfigSet struct {
	ConfigVersion uint32
	Config        AFNConfig
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterConfigSet(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractConfigSetIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "ConfigSet", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractConfigSetIterator{contract: _AFNContract.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *AFNContractConfigSet, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "ConfigSet", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractConfigSet)
				if err := _AFNContract.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseConfigSet(log types.Log) (*AFNContractConfigSet, error) {
	event := new(AFNContractConfigSet)
	if err := _AFNContract.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractCursedIterator struct {
	Event *AFNContractCursed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractCursedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractCursed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractCursed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractCursedIterator) Error() error {
	return it.fail
}

func (it *AFNContractCursedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractCursed struct {
	ConfigVersion uint32
	Timestamp     *big.Int
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterCursed(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractCursedIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "Cursed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractCursedIterator{contract: _AFNContract.contract, event: "Cursed", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchCursed(opts *bind.WatchOpts, sink chan<- *AFNContractCursed, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "Cursed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractCursed)
				if err := _AFNContract.contract.UnpackLog(event, "Cursed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseCursed(log types.Log) (*AFNContractCursed, error) {
	event := new(AFNContractCursed)
	if err := _AFNContract.contract.UnpackLog(event, "Cursed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractOwnerCursedIterator struct {
	Event *AFNContractOwnerCursed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractOwnerCursedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractOwnerCursed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractOwnerCursed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractOwnerCursedIterator) Error() error {
	return it.fail
}

func (it *AFNContractOwnerCursedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractOwnerCursed struct {
	Timestamp *big.Int
	Raw       types.Log
}

func (_AFNContract *AFNContractFilterer) FilterOwnerCursed(opts *bind.FilterOpts) (*AFNContractOwnerCursedIterator, error) {

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "OwnerCursed")
	if err != nil {
		return nil, err
	}
	return &AFNContractOwnerCursedIterator{contract: _AFNContract.contract, event: "OwnerCursed", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchOwnerCursed(opts *bind.WatchOpts, sink chan<- *AFNContractOwnerCursed) (event.Subscription, error) {

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "OwnerCursed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractOwnerCursed)
				if err := _AFNContract.contract.UnpackLog(event, "OwnerCursed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseOwnerCursed(log types.Log) (*AFNContractOwnerCursed, error) {
	event := new(AFNContractOwnerCursed)
	if err := _AFNContract.contract.UnpackLog(event, "OwnerCursed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractOwnershipTransferRequestedIterator struct {
	Event *AFNContractOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *AFNContractOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_AFNContract *AFNContractFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AFNContractOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractOwnershipTransferRequestedIterator{contract: _AFNContract.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *AFNContractOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractOwnershipTransferRequested)
				if err := _AFNContract.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseOwnershipTransferRequested(log types.Log) (*AFNContractOwnershipTransferRequested, error) {
	event := new(AFNContractOwnershipTransferRequested)
	if err := _AFNContract.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractOwnershipTransferredIterator struct {
	Event *AFNContractOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *AFNContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_AFNContract *AFNContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AFNContractOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractOwnershipTransferredIterator{contract: _AFNContract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AFNContractOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractOwnershipTransferred)
				if err := _AFNContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseOwnershipTransferred(log types.Log) (*AFNContractOwnershipTransferred, error) {
	event := new(AFNContractOwnershipTransferred)
	if err := _AFNContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractRecoveredFromCurseIterator struct {
	Event *AFNContractRecoveredFromCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractRecoveredFromCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractRecoveredFromCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractRecoveredFromCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractRecoveredFromCurseIterator) Error() error {
	return it.fail
}

func (it *AFNContractRecoveredFromCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractRecoveredFromCurse struct {
	Raw types.Log
}

func (_AFNContract *AFNContractFilterer) FilterRecoveredFromCurse(opts *bind.FilterOpts) (*AFNContractRecoveredFromCurseIterator, error) {

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "RecoveredFromCurse")
	if err != nil {
		return nil, err
	}
	return &AFNContractRecoveredFromCurseIterator{contract: _AFNContract.contract, event: "RecoveredFromCurse", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchRecoveredFromCurse(opts *bind.WatchOpts, sink chan<- *AFNContractRecoveredFromCurse) (event.Subscription, error) {

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "RecoveredFromCurse")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractRecoveredFromCurse)
				if err := _AFNContract.contract.UnpackLog(event, "RecoveredFromCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseRecoveredFromCurse(log types.Log) (*AFNContractRecoveredFromCurse, error) {
	event := new(AFNContractRecoveredFromCurse)
	if err := _AFNContract.contract.UnpackLog(event, "RecoveredFromCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractReusedVotesToCurseIterator struct {
	Event *AFNContractReusedVotesToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractReusedVotesToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractReusedVotesToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractReusedVotesToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractReusedVotesToCurseIterator) Error() error {
	return it.fail
}

func (it *AFNContractReusedVotesToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractReusedVotesToCurse struct {
	ConfigVersion     uint32
	Voter             common.Address
	Weight            uint8
	VoteCount         uint32
	CursesHash        [32]byte
	AccumulatedWeight uint16
	Raw               types.Log
}

func (_AFNContract *AFNContractFilterer) FilterReusedVotesToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractReusedVotesToCurseIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "ReusedVotesToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractReusedVotesToCurseIterator{contract: _AFNContract.contract, event: "ReusedVotesToCurse", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchReusedVotesToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractReusedVotesToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "ReusedVotesToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractReusedVotesToCurse)
				if err := _AFNContract.contract.UnpackLog(event, "ReusedVotesToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseReusedVotesToCurse(log types.Log) (*AFNContractReusedVotesToCurse, error) {
	event := new(AFNContractReusedVotesToCurse)
	if err := _AFNContract.contract.UnpackLog(event, "ReusedVotesToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractSkippedUnvoteToCurseIterator struct {
	Event *AFNContractSkippedUnvoteToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractSkippedUnvoteToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractSkippedUnvoteToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractSkippedUnvoteToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractSkippedUnvoteToCurseIterator) Error() error {
	return it.fail
}

func (it *AFNContractSkippedUnvoteToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractSkippedUnvoteToCurse struct {
	Voter              common.Address
	ExpectedCursesHash [32]byte
	ActualCursesHash   [32]byte
	Raw                types.Log
}

func (_AFNContract *AFNContractFilterer) FilterSkippedUnvoteToCurse(opts *bind.FilterOpts, voter []common.Address) (*AFNContractSkippedUnvoteToCurseIterator, error) {

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "SkippedUnvoteToCurse", voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractSkippedUnvoteToCurseIterator{contract: _AFNContract.contract, event: "SkippedUnvoteToCurse", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchSkippedUnvoteToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractSkippedUnvoteToCurse, voter []common.Address) (event.Subscription, error) {

	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "SkippedUnvoteToCurse", voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractSkippedUnvoteToCurse)
				if err := _AFNContract.contract.UnpackLog(event, "SkippedUnvoteToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseSkippedUnvoteToCurse(log types.Log) (*AFNContractSkippedUnvoteToCurse, error) {
	event := new(AFNContractSkippedUnvoteToCurse)
	if err := _AFNContract.contract.UnpackLog(event, "SkippedUnvoteToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractTaggedRootBlessVotesResetIterator struct {
	Event *AFNContractTaggedRootBlessVotesReset

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractTaggedRootBlessVotesResetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractTaggedRootBlessVotesReset)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractTaggedRootBlessVotesReset)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractTaggedRootBlessVotesResetIterator) Error() error {
	return it.fail
}

func (it *AFNContractTaggedRootBlessVotesResetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractTaggedRootBlessVotesReset struct {
	ConfigVersion uint32
	TaggedRoot    IAFNTaggedRoot
	WasBlessed    bool
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterTaggedRootBlessVotesReset(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractTaggedRootBlessVotesResetIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "TaggedRootBlessVotesReset", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractTaggedRootBlessVotesResetIterator{contract: _AFNContract.contract, event: "TaggedRootBlessVotesReset", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchTaggedRootBlessVotesReset(opts *bind.WatchOpts, sink chan<- *AFNContractTaggedRootBlessVotesReset, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "TaggedRootBlessVotesReset", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractTaggedRootBlessVotesReset)
				if err := _AFNContract.contract.UnpackLog(event, "TaggedRootBlessVotesReset", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseTaggedRootBlessVotesReset(log types.Log) (*AFNContractTaggedRootBlessVotesReset, error) {
	event := new(AFNContractTaggedRootBlessVotesReset)
	if err := _AFNContract.contract.UnpackLog(event, "TaggedRootBlessVotesReset", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractTaggedRootBlessedIterator struct {
	Event *AFNContractTaggedRootBlessed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractTaggedRootBlessedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractTaggedRootBlessed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractTaggedRootBlessed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractTaggedRootBlessedIterator) Error() error {
	return it.fail
}

func (it *AFNContractTaggedRootBlessedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractTaggedRootBlessed struct {
	ConfigVersion     uint32
	TaggedRoot        IAFNTaggedRoot
	AccumulatedWeight uint16
	Raw               types.Log
}

func (_AFNContract *AFNContractFilterer) FilterTaggedRootBlessed(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractTaggedRootBlessedIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "TaggedRootBlessed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractTaggedRootBlessedIterator{contract: _AFNContract.contract, event: "TaggedRootBlessed", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchTaggedRootBlessed(opts *bind.WatchOpts, sink chan<- *AFNContractTaggedRootBlessed, configVersion []uint32) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "TaggedRootBlessed", configVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractTaggedRootBlessed)
				if err := _AFNContract.contract.UnpackLog(event, "TaggedRootBlessed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseTaggedRootBlessed(log types.Log) (*AFNContractTaggedRootBlessed, error) {
	event := new(AFNContractTaggedRootBlessed)
	if err := _AFNContract.contract.UnpackLog(event, "TaggedRootBlessed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractUnvotedToCurseIterator struct {
	Event *AFNContractUnvotedToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractUnvotedToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractUnvotedToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractUnvotedToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractUnvotedToCurseIterator) Error() error {
	return it.fail
}

func (it *AFNContractUnvotedToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractUnvotedToCurse struct {
	ConfigVersion uint32
	Voter         common.Address
	Weight        uint8
	VoteCount     uint32
	CursesHash    [32]byte
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterUnvotedToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractUnvotedToCurseIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "UnvotedToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractUnvotedToCurseIterator{contract: _AFNContract.contract, event: "UnvotedToCurse", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchUnvotedToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractUnvotedToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "UnvotedToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractUnvotedToCurse)
				if err := _AFNContract.contract.UnpackLog(event, "UnvotedToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseUnvotedToCurse(log types.Log) (*AFNContractUnvotedToCurse, error) {
	event := new(AFNContractUnvotedToCurse)
	if err := _AFNContract.contract.UnpackLog(event, "UnvotedToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractVotedToBlessIterator struct {
	Event *AFNContractVotedToBless

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractVotedToBlessIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractVotedToBless)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractVotedToBless)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractVotedToBlessIterator) Error() error {
	return it.fail
}

func (it *AFNContractVotedToBlessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractVotedToBless struct {
	ConfigVersion uint32
	Voter         common.Address
	TaggedRoot    IAFNTaggedRoot
	Weight        uint8
	Raw           types.Log
}

func (_AFNContract *AFNContractFilterer) FilterVotedToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractVotedToBlessIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "VotedToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractVotedToBlessIterator{contract: _AFNContract.contract, event: "VotedToBless", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchVotedToBless(opts *bind.WatchOpts, sink chan<- *AFNContractVotedToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "VotedToBless", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractVotedToBless)
				if err := _AFNContract.contract.UnpackLog(event, "VotedToBless", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseVotedToBless(log types.Log) (*AFNContractVotedToBless, error) {
	event := new(AFNContractVotedToBless)
	if err := _AFNContract.contract.UnpackLog(event, "VotedToBless", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type AFNContractVotedToCurseIterator struct {
	Event *AFNContractVotedToCurse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *AFNContractVotedToCurseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AFNContractVotedToCurse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(AFNContractVotedToCurse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *AFNContractVotedToCurseIterator) Error() error {
	return it.fail
}

func (it *AFNContractVotedToCurseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type AFNContractVotedToCurse struct {
	ConfigVersion     uint32
	Voter             common.Address
	Weight            uint8
	VoteCount         uint32
	CurseId           [32]byte
	CursesHash        [32]byte
	AccumulatedWeight uint16
	Raw               types.Log
}

func (_AFNContract *AFNContractFilterer) FilterVotedToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractVotedToCurseIterator, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.FilterLogs(opts, "VotedToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return &AFNContractVotedToCurseIterator{contract: _AFNContract.contract, event: "VotedToCurse", logs: logs, sub: sub}, nil
}

func (_AFNContract *AFNContractFilterer) WatchVotedToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractVotedToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error) {

	var configVersionRule []interface{}
	for _, configVersionItem := range configVersion {
		configVersionRule = append(configVersionRule, configVersionItem)
	}
	var voterRule []interface{}
	for _, voterItem := range voter {
		voterRule = append(voterRule, voterItem)
	}

	logs, sub, err := _AFNContract.contract.WatchLogs(opts, "VotedToCurse", configVersionRule, voterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(AFNContractVotedToCurse)
				if err := _AFNContract.contract.UnpackLog(event, "VotedToCurse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_AFNContract *AFNContractFilterer) ParseVotedToCurse(log types.Log) (*AFNContractVotedToCurse, error) {
	event := new(AFNContractVotedToCurse)
	if err := _AFNContract.contract.UnpackLog(event, "VotedToCurse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type GetBlessProgress struct {
	BlessVoteAddrs    []common.Address
	AccumulatedWeight uint16
	Blessed           bool
}
type GetConfigDetails struct {
	Version     uint32
	BlockNumber uint32
	Config      AFNConfig
}
type GetCurseProgress struct {
	CurseVoteAddrs    []common.Address
	VoteCounts        []uint32
	CursesHashes      [][32]byte
	AccumulatedWeight uint16
	Cursed            bool
}

func (_AFNContract *AFNContract) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _AFNContract.abi.Events["AlreadyBlessed"].ID:
		return _AFNContract.ParseAlreadyBlessed(log)
	case _AFNContract.abi.Events["AlreadyVotedToBless"].ID:
		return _AFNContract.ParseAlreadyVotedToBless(log)
	case _AFNContract.abi.Events["ConfigSet"].ID:
		return _AFNContract.ParseConfigSet(log)
	case _AFNContract.abi.Events["Cursed"].ID:
		return _AFNContract.ParseCursed(log)
	case _AFNContract.abi.Events["OwnerCursed"].ID:
		return _AFNContract.ParseOwnerCursed(log)
	case _AFNContract.abi.Events["OwnershipTransferRequested"].ID:
		return _AFNContract.ParseOwnershipTransferRequested(log)
	case _AFNContract.abi.Events["OwnershipTransferred"].ID:
		return _AFNContract.ParseOwnershipTransferred(log)
	case _AFNContract.abi.Events["RecoveredFromCurse"].ID:
		return _AFNContract.ParseRecoveredFromCurse(log)
	case _AFNContract.abi.Events["ReusedVotesToCurse"].ID:
		return _AFNContract.ParseReusedVotesToCurse(log)
	case _AFNContract.abi.Events["SkippedUnvoteToCurse"].ID:
		return _AFNContract.ParseSkippedUnvoteToCurse(log)
	case _AFNContract.abi.Events["TaggedRootBlessVotesReset"].ID:
		return _AFNContract.ParseTaggedRootBlessVotesReset(log)
	case _AFNContract.abi.Events["TaggedRootBlessed"].ID:
		return _AFNContract.ParseTaggedRootBlessed(log)
	case _AFNContract.abi.Events["UnvotedToCurse"].ID:
		return _AFNContract.ParseUnvotedToCurse(log)
	case _AFNContract.abi.Events["VotedToBless"].ID:
		return _AFNContract.ParseVotedToBless(log)
	case _AFNContract.abi.Events["VotedToCurse"].ID:
		return _AFNContract.ParseVotedToCurse(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (AFNContractAlreadyBlessed) Topic() common.Hash {
	return common.HexToHash("0x274d6d5b916b0a53974b7ab86c844b97a2e03a60f658cd9a4b1c028b604d7bf1")
}

func (AFNContractAlreadyVotedToBless) Topic() common.Hash {
	return common.HexToHash("0x6dfbb745226fa630aeb1b9557d17d508ddb789a04f0cb873ec16e58beb8beead")
}

func (AFNContractConfigSet) Topic() common.Hash {
	return common.HexToHash("0x7cf8e698b191db138396ab0eae2ad5b3fe353fd014fd5956b034b86f2d605cfd")
}

func (AFNContractCursed) Topic() common.Hash {
	return common.HexToHash("0x6ec7e144a45fa03ed986874794df08b5b6bbbb27ed6454b4e6eaa74248b5e333")
}

func (AFNContractOwnerCursed) Topic() common.Hash {
	return common.HexToHash("0x367ba81ba03ea9fa7ee089ecfb43b1c35e0935bc87a472abf615b7580dc16b79")
}

func (AFNContractOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (AFNContractOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (AFNContractRecoveredFromCurse) Topic() common.Hash {
	return common.HexToHash("0x08c773aaf7568c6b9110dcdfc13c27177410582ee30e157d1aa306b49d603eb7")
}

func (AFNContractReusedVotesToCurse) Topic() common.Hash {
	return common.HexToHash("0xb4a70189a30e3d3b9c77d291f83699633e70ab4427fc3644a955ab4cca077b03")
}

func (AFNContractSkippedUnvoteToCurse) Topic() common.Hash {
	return common.HexToHash("0xf4e3b20447f3f83360469333a2578825ae355d192dd6f59c6516d832fa425a53")
}

func (AFNContractTaggedRootBlessVotesReset) Topic() common.Hash {
	return common.HexToHash("0x7d15a6eebaa019ea7d5b7d38937c51ebd3befbfdf51bb630a694fd28635bbcba")
}

func (AFNContractTaggedRootBlessed) Topic() common.Hash {
	return common.HexToHash("0x8257378aa73bf8e4ada848713526584a3dcee0fd3db3beed7397f7a7f5067cc9")
}

func (AFNContractUnvotedToCurse) Topic() common.Hash {
	return common.HexToHash("0x56c9f1d1001236f66c1e5d598905029b4093031f31aead3449a53d832eade225")
}

func (AFNContractVotedToBless) Topic() common.Hash {
	return common.HexToHash("0x2a08a2bd2798f0aae9a843f0f4ad4de488c1b3d5f04049940cfed736ad69fb97")
}

func (AFNContractVotedToCurse) Topic() common.Hash {
	return common.HexToHash("0x8e5ceca76dae647f687fccbe8d42a3796e68330812669bd5003b938dacb1b6dd")
}

func (_AFNContract *AFNContract) Address() common.Address {
	return _AFNContract.address
}

type AFNContractInterface interface {
	GetBlessProgress(opts *bind.CallOpts, taggedRoot IAFNTaggedRoot) (GetBlessProgress,

		error)

	GetConfigDetails(opts *bind.CallOpts) (GetConfigDetails,

		error)

	GetCurseProgress(opts *bind.CallOpts) (GetCurseProgress,

		error)

	IsBlessed(opts *bind.CallOpts, taggedRoot IAFNTaggedRoot) (bool, error)

	IsCursed(opts *bind.CallOpts) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	OwnerCurse(opts *bind.TransactOpts) (*types.Transaction, error)

	OwnerResetBlessVotes(opts *bind.TransactOpts, taggedRoots []IAFNTaggedRoot) (*types.Transaction, error)

	OwnerUnvoteToCurse(opts *bind.TransactOpts, unvoteRecords []AFNUnvoteToCurseRecord) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, config AFNConfig) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	UnvoteToCurse(opts *bind.TransactOpts, curseVoteAddr common.Address, cursesHash [32]byte) (*types.Transaction, error)

	VoteToBless(opts *bind.TransactOpts, taggedRoots []IAFNTaggedRoot) (*types.Transaction, error)

	VoteToCurse(opts *bind.TransactOpts, curseId [32]byte) (*types.Transaction, error)

	FilterAlreadyBlessed(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractAlreadyBlessedIterator, error)

	WatchAlreadyBlessed(opts *bind.WatchOpts, sink chan<- *AFNContractAlreadyBlessed, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseAlreadyBlessed(log types.Log) (*AFNContractAlreadyBlessed, error)

	FilterAlreadyVotedToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractAlreadyVotedToBlessIterator, error)

	WatchAlreadyVotedToBless(opts *bind.WatchOpts, sink chan<- *AFNContractAlreadyVotedToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseAlreadyVotedToBless(log types.Log) (*AFNContractAlreadyVotedToBless, error)

	FilterConfigSet(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *AFNContractConfigSet, configVersion []uint32) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*AFNContractConfigSet, error)

	FilterCursed(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractCursedIterator, error)

	WatchCursed(opts *bind.WatchOpts, sink chan<- *AFNContractCursed, configVersion []uint32) (event.Subscription, error)

	ParseCursed(log types.Log) (*AFNContractCursed, error)

	FilterOwnerCursed(opts *bind.FilterOpts) (*AFNContractOwnerCursedIterator, error)

	WatchOwnerCursed(opts *bind.WatchOpts, sink chan<- *AFNContractOwnerCursed) (event.Subscription, error)

	ParseOwnerCursed(log types.Log) (*AFNContractOwnerCursed, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AFNContractOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *AFNContractOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*AFNContractOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*AFNContractOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AFNContractOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*AFNContractOwnershipTransferred, error)

	FilterRecoveredFromCurse(opts *bind.FilterOpts) (*AFNContractRecoveredFromCurseIterator, error)

	WatchRecoveredFromCurse(opts *bind.WatchOpts, sink chan<- *AFNContractRecoveredFromCurse) (event.Subscription, error)

	ParseRecoveredFromCurse(log types.Log) (*AFNContractRecoveredFromCurse, error)

	FilterReusedVotesToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractReusedVotesToCurseIterator, error)

	WatchReusedVotesToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractReusedVotesToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseReusedVotesToCurse(log types.Log) (*AFNContractReusedVotesToCurse, error)

	FilterSkippedUnvoteToCurse(opts *bind.FilterOpts, voter []common.Address) (*AFNContractSkippedUnvoteToCurseIterator, error)

	WatchSkippedUnvoteToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractSkippedUnvoteToCurse, voter []common.Address) (event.Subscription, error)

	ParseSkippedUnvoteToCurse(log types.Log) (*AFNContractSkippedUnvoteToCurse, error)

	FilterTaggedRootBlessVotesReset(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractTaggedRootBlessVotesResetIterator, error)

	WatchTaggedRootBlessVotesReset(opts *bind.WatchOpts, sink chan<- *AFNContractTaggedRootBlessVotesReset, configVersion []uint32) (event.Subscription, error)

	ParseTaggedRootBlessVotesReset(log types.Log) (*AFNContractTaggedRootBlessVotesReset, error)

	FilterTaggedRootBlessed(opts *bind.FilterOpts, configVersion []uint32) (*AFNContractTaggedRootBlessedIterator, error)

	WatchTaggedRootBlessed(opts *bind.WatchOpts, sink chan<- *AFNContractTaggedRootBlessed, configVersion []uint32) (event.Subscription, error)

	ParseTaggedRootBlessed(log types.Log) (*AFNContractTaggedRootBlessed, error)

	FilterUnvotedToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractUnvotedToCurseIterator, error)

	WatchUnvotedToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractUnvotedToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseUnvotedToCurse(log types.Log) (*AFNContractUnvotedToCurse, error)

	FilterVotedToBless(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractVotedToBlessIterator, error)

	WatchVotedToBless(opts *bind.WatchOpts, sink chan<- *AFNContractVotedToBless, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseVotedToBless(log types.Log) (*AFNContractVotedToBless, error)

	FilterVotedToCurse(opts *bind.FilterOpts, configVersion []uint32, voter []common.Address) (*AFNContractVotedToCurseIterator, error)

	WatchVotedToCurse(opts *bind.WatchOpts, sink chan<- *AFNContractVotedToCurse, configVersion []uint32, voter []common.Address) (event.Subscription, error)

	ParseVotedToCurse(log types.Log) (*AFNContractVotedToCurse, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
